
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="utf-8">
    <link rel="canonical" href="https://blog.csdn.net/qq_38490457/article/details/109257751"/>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <meta name="renderer" content="webkit"/>
    <meta name="force-rendering" content="webkit"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="report" content='{"spm":"1001.2101","extra":{"tsab":"t_1"},"pid":"blog"}'>
    <meta name="referrer" content="always">
    <meta http-equiv="Cache-Control" content="no-siteapp" /><link rel="alternate" media="handheld" href="#" />
    <meta name="shenma-site-verification" content="5a59773ab8077d4a62bf469ab966a63b_1497598848">
    <meta name="applicable-device" content="pc">
    <link  href="https://g.csdnimg.cn/static/logo/favicon32.ico"  rel="shortcut icon" type="image/x-icon" />
    <title>学习JavaScript这一篇就够了_轻松的小希的博客-CSDN博客</title>
    <script>
      (function(){ 
        var el = document.createElement("script"); 
        el.src = "https://s3a.pstatp.com/toutiao/push.js?1abfa13dfe74d72d41d83c86d240de427e7cac50c51ead53b2e79d40c7952a23ed7716d05b4a0f683a653eab3e214672511de2457e74e99286eb2c33f4428830"; 
        el.id = "ttzz"; 
        var s = document.getElementsByTagName("script")[0]; 
        s.parentNode.insertBefore(el, s);
      })(window)
    </script>
        <meta name="keywords" content="学习javascript">
        <meta name="csdn-baidu-search"  content='{"autorun":true,"install":true,"keyword":"学习javascript"}'>
    <meta name="description" content="目录第一章 JavaScript简介1.1、JavaScript的起源1.2、JavaScript的组成1.3、JavaScript的特点1.4、JavaScript的使用1.4.1、标签引用1.4.2、文件引用1.5、JavaScript的输出1.5.1、页面输出1.5.2、控制台输出1.5.3、弹出窗口输出1.6、JavaScript的注释1.6.1、单行注释1.6.2、多行注释第二章 JavaScript基础语法2.1、标识符2.2、字面量和变量2.2.1、字面量2.2.2、变量2.3、数据类型2.3">
        <link rel="stylesheet" type="text/css" href="https://csdnimg.cn/release/blogv2/dist/pc/css/detail_enter-95840df9c6.min.css">
    <script type="application/ld+json">{"@context":"https://ziyuan.baidu.com/contexts/cambrian.jsonld","@id":"https://blog.csdn.net/qq_38490457/article/details/109257751","appid":"1638831770136827","pubDate":"2020-10-24T12:50:06","title":"学习JavaScript这一篇就够了_轻松的小希的博客-CSDN博客","upDate":"2020-11-25T16:28:22"}</script>
        <link rel="stylesheet" type="text/css" href="https://csdnimg.cn/release/blogv2/dist/pc/themesSkin/skin-shark/skin-shark-39d3df9199.min.css">
    <script src="https://csdnimg.cn/public/common/libs/jquery/jquery-1.9.1.min.js" type="text/javascript"></script>
    <script type="text/javascript">
        var isCorporate = false;//注释删除enterprise
        var username =  "qq_38490457";
        var skinImg = "white";
        var blog_address = "https://caochenlei.blog.csdn.net";
        var currentUserName = "m0_62961153";
        var isOwner = false;
        var loginUrl = "http://passport.csdn.net/account/login?from=https://blog.csdn.net/qq_38490457/article/details/109257751";
        var blogUrl = "https://blog.csdn.net/";
        var avatar = "https://profile-avatar.csdnimg.cn/adae5c191130470aa9c45b27974eb51a_qq_38490457.jpg!1";
        var articleTitle = "学习JavaScript这一篇就够了";
        var articleDesc = "目录第一章 JavaScript简介1.1、JavaScript的起源1.2、JavaScript的组成1.3、JavaScript的特点1.4、JavaScript的使用1.4.1、标签引用1.4.2、文件引用1.5、JavaScript的输出1.5.1、页面输出1.5.2、控制台输出1.5.3、弹出窗口输出1.6、JavaScript的注释1.6.1、单行注释1.6.2、多行注释第二章 JavaScript基础语法2.1、标识符2.2、字面量和变量2.2.1、字面量2.2.2、变量2.3、数据类型2.3";
        var articleTitles = "学习JavaScript这一篇就够了_轻松的小希的博客-CSDN博客";
        var nickName = "轻松的小希";
        var articleDetailUrl = "https://caochenlei.blog.csdn.net/article/details/109257751";
        if(window.location.host.split('.').length == 3) {
            blog_address = blogUrl + username;
        }
        var skinStatus = "White";
        var blogStaticHost = "https://csdnimg.cn/release/blogv2/"
        var mallTestStyle = "control"
    </script>
    <script src="https://g.csdnimg.cn/??fixed-sidebar/1.1.7/fixed-sidebar.js" type="text/javascript"></script>
    <script src='//g.csdnimg.cn/common/csdn-report/report.js' type='text/javascript'></script>
    <link rel="stylesheet" type="text/css" href="https://csdnimg.cn/public/sandalstrap/1.4/css/sandalstrap.min.css">
    <style>
        .MathJax, .MathJax_Message, .MathJax_Preview{
            display: none
        }
    </style>
    <script src="https://dup.baidustatic.com/js/ds.js"></script>
</head>
  <body class="nodata " style="">
        <script>
            var toolbarSearchExt = '{"landingWord":["学习javascript"],"queryWord":"","tag":["javascript","html5","html"],"title":"学习JavaScript这一篇就够了"}';
        </script>
    <script src="https://g.csdnimg.cn/common/csdn-toolbar/csdn-toolbar.js" type="text/javascript"></script>
    <script>
    (function(){
        var bp = document.createElement('script');
        var curProtocol = window.location.protocol.split(':')[0];
        if (curProtocol === 'https') {
            bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';
        }
        else {
            bp.src = 'http://push.zhanzhang.baidu.com/push.js';
        }
        var s = document.getElementsByTagName("script")[0];
        s.parentNode.insertBefore(bp, s);
    })();
    </script>

    <link rel="stylesheet" href="https://csdnimg.cn/release/blogv2/dist/pc/css/blog_code-01256533b5.min.css">
    <link rel="stylesheet" href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/chart-3456820cac.css" />
    <link rel="stylesheet" href="https://g.csdnimg.cn/lib/swiper/6.0.4/css/swiper.css" />
    <script src="https://g.csdnimg.cn/lib/swiper/6.0.4/js/swiper.js" async></script>
    <script>
      var articleId = 109257751;
      var commentscount = 983;
      var curentUrl = "https://blog.csdn.net/qq_38490457/article/details/109257751";
      var myUrl = "https://my.csdn.net/";
        var highlight = ["javascript","html5","html","学习","就够","一篇"];//高亮数组
        var isRecommendModule = true;
          var isBaiduPre = true;
          var baiduCount = 2;
          var setBaiduJsCount = 10;
      var share_card_url = "https://app-blog.csdn.net/share?article_id=109257751&username=qq_38490457"
      var articleType = 1;
      var baiduKey = "学习javascript";
      var userNewReport = true;
      var copyPopSwitch = true;
      var needInsertBaidu = true;
      var recommendRegularDomainArr = ["blog.csdn.net/.+/article/details/","download.csdn.net/download/","edu.csdn.net/course/detail/","ask.csdn.net/questions/","bbs.csdn.net/topics/","www.csdn.net/gather_.+/"]
      var codeStyle = "atom-one-dark";
      var baiduSearchType = "baidulandingword";
      var sharData = "{\"hot\":[{\"id\":1,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/a5f4260710904e538002a6ab337939b3.png\"},{\"id\":2,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/188b37199a2c4b74b1d9ffc39e0d52de.png\"},{\"id\":3,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/14ded358b631444581edd98a256bc5af.png\"},{\"id\":4,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/1470f23a770444d986ad551b9c33c5be.png\"},{\"id\":5,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/c329f5181dc74f6c9bd28c982bb9f91d.png\"},{\"id\":6,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/ccd8a3305e81460f9c505c95b432a65f.png\"},{\"id\":7,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/bc89d8283389440d97fc4d30e30f45e1.png\"},{\"id\":8,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/452d485b4a654f5592390550d2445edf.png\"},{\"id\":9,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/f8b9939db2ed474a8f43a643015fc8b7.png\"},{\"id\":10,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/6de8864187ab4ed3b1db0856369c36ff.png\"},{\"id\":11,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/673cc3470ff74072acba958dc0c46e2d.png\"},{\"id\":12,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/930c119760ac4491804db80f9c6d4e3f.png\"},{\"id\":13,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/15e6befb05a24233bc2b65e96aa8d972.png\"},{\"id\":14,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/2075fd6822184b95a41e214de4daec13.png\"},{\"id\":15,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/859b1552db244eb6891a809263a5c657.png\"},{\"id\":16,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/0be2f920f1f74290a98921974a9613fd.png\"},{\"id\":17,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/2e97e00b43f14afab494ea55ef3f4a6e.png\"},{\"id\":18,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/ff4ab252f46e444686f5135d6ebbfec0.png\"},{\"id\":19,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/ae029bbe99564e79911657912d36524f.png\"},{\"id\":20,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/b3ece39963de440388728e9e7b9bf427.png\"},{\"id\":21,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/6f14651a99ba486e926d63b6fa692997.png\"},{\"id\":22,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/83ceddf050084875a341e32dcceca721.png\"},{\"id\":23,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/b90368b8fd5d4c6c8c79a707d877cf7c.png\"},{\"id\":24,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/aeffae14ecf14e079b2616528c9a393b.png\"},{\"id\":25,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/c5a06b5a13d44d16bed868fc3384897a.png\"},{\"id\":26,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/08b697658b844b318cea3b119e9541ef.png\"},{\"id\":27,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/68ccb0b8d09346ac961d2b5c1a8c77bf.png\"},{\"id\":28,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/a2227a247e37418cbe0ea972ba6a859b.png\"},{\"id\":29,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/3a42825fede748f9993e5bb844ad350d.png\"},{\"id\":30,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/8882abc1dd484224b636966ea38555c3.png\"},{\"id\":31,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/4f6a5f636a3e444d83cf8cc06d87a159.png\"},{\"id\":32,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/1953ef79c56b4407b78d7181bdff11c3.png\"},{\"id\":33,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/c04a2a4f772948ed85b5b0380ed36287.png\"},{\"id\":34,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/5b4fecd05091405ea04d8c0f53e9f2c7.png\"},{\"id\":35,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/b89f576d700344e280d6ceb2a66c2420.png\"},{\"id\":36,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/1c65780e11804bbd9971ebadb3d78bcf.png\"},{\"id\":37,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/d590db2055f345db9706eb68a7ec151a.png\"},{\"id\":38,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/fe602f80700b4f6fb3c4a9e4c135510e.png\"},{\"id\":39,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/39ff2fcd31e04feba301a071976a0ba7.png\"},{\"id\":40,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/f9b61b3d113f436b828631837f89fb39.png\"},{\"id\":41,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/df1aca5f610c4ad48cd16da88c9c8499.png\"},{\"id\":42,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/d7acf73a1e6b41399a77a85040e10961.png\"},{\"id\":43,\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/b7f1b63542524b97962ff649ab4e7e23.png\"}],\"vip\":[{\"id\":1,\"vipUrl\":\"https:\\/\\/img-home.csdnimg.cn\\/images\\/20220920101150.png\",\"url\":\"https:\\/\\/img-home.csdnimg.cn\\/images\\/20220920101154.png\"},{\"id\":2,\"vipUrl\":\"https:\\/\\/img-home.csdnimg.cn\\/images\\/20220920101204.png\",\"url\":\"https:\\/\\/img-home.csdnimg.cn\\/images\\/20220920101208.png\"},{\"id\":3,\"vipUrl\":\"https:\\/\\/img-home.csdnimg.cn\\/images\\/20220920101211.png\",\"url\":\"https:\\/\\/img-home.csdnimg.cn\\/images\\/20220920101215.png\"},{\"id\":4,\"vipUrl\":\"https:\\/\\/img-home.csdnimg.cn\\/images\\/20220920101218.png\",\"url\":\"https:\\/\\/img-home.csdnimg.cn\\/images\\/20220920101220.png\"},{\"id\":5,\"vipUrl\":\"https:\\/\\/img-home.csdnimg.cn\\/images\\/20220920101223.png\",\"url\":\"https:\\/\\/img-home.csdnimg.cn\\/images\\/20220920101226.png\"},{\"id\":6,\"vipUrl\":\"https:\\/\\/img-home.csdnimg.cn\\/images\\/20220922100635.png\",\"url\":\"https:\\/\\/img-home.csdnimg.cn\\/images\\/20220922100639.png\"},{\"id\":7,\"vipUrl\":\"https:\\/\\/img-home.csdnimg.cn\\/images\\/20220922100642.png\",\"url\":\"https:\\/\\/img-home.csdnimg.cn\\/images\\/20220922100644.png\"},{\"id\":8,\"vipUrl\":\"https:\\/\\/img-home.csdnimg.cn\\/images\\/20220922100647.png\",\"url\":\"https:\\/\\/img-home.csdnimg.cn\\/images\\/20220922100649.png\"},{\"id\":9,\"vipUrl\":\"https:\\/\\/img-home.csdnimg.cn\\/images\\/20220922100652.png\",\"url\":\"https:\\/\\/img-home.csdnimg.cn\\/images\\/20220922100655.png\"},{\"id\":10,\"vipUrl\":\"https:\\/\\/img-blog.csdnimg.cn\\/55de67481fde4b04b97ad78f11fe369a.png\",\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/bb2418fb537e4d78b10d8765ccd810c5.png\"},{\"id\":11,\"vipUrl\":\"https:\\/\\/img-blog.csdnimg.cn\\/579c713394584d128104ef1044023954.png\",\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/f420d9fbcf5548079d31b5e809b6d6cd.png\"},{\"id\":12,\"vipUrl\":\"https:\\/\\/img-blog.csdnimg.cn\\/75b7f3155ba642f5a4cc16b7baf44122.png\",\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/a9030f5877be401f8b340b80b0d91e64.png\"},{\"id\":13,\"vipUrl\":\"https:\\/\\/img-blog.csdnimg.cn\\/0903d33cafa54934be3780aa54ae958d.png\",\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/2cd8c8929f5a42fca5da2a0aeb456203.png\"},{\"id\":14,\"vipUrl\":\"https:\\/\\/img-blog.csdnimg.cn\\/949fd7c22884439fbfc3c0e9c3b8dee7.png\",\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/dafbea9bd9eb4f3b962b48dc41657f89.png\"},{\"id\":15,\"vipUrl\":\"https:\\/\\/img-blog.csdnimg.cn\\/4119cfddd71d4e6a8a27a18dbb74d90e.png\",\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/c56310c8b6384d9e85388e4e342ce508.png\"},{\"id\":16,\"vipUrl\":\"https:\\/\\/img-blog.csdnimg.cn\\/121575274da142bcbbbbc2e8243dd411.png\",\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/5013993de06542f881018bb9abe2edf7.png\"},{\"id\":17,\"vipUrl\":\"https:\\/\\/img-blog.csdnimg.cn\\/4d97aa6dd4fe4f09a6bef5bdf8a6abcd.png\",\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/76f23877b6ad4066ad45ce8e31b4b977.png\"},{\"id\":18,\"vipUrl\":\"https:\\/\\/img-blog.csdnimg.cn\\/fdb619daf21b4c829de63b9ebc78859d.png\",\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/a1abe5d27a5441f599adfe662f510243.png\"},{\"id\":19,\"vipUrl\":\"https:\\/\\/img-blog.csdnimg.cn\\/676b7707bb11410f8f56bc0ed2b2345c.png\",\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/7ac5b467fbf24e1d8c2de3f3332c4f54.png\"},{\"id\":20,\"vipUrl\":\"https:\\/\\/img-blog.csdnimg.cn\\/0becb8cc227e4723b765bdd69a20fd4a.png\",\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/fdec85b26091486b9a89d0b8d45c3749.png\"},{\"id\":21,\"vipUrl\":\"https:\\/\\/img-blog.csdnimg.cn\\/1a6c06235ad44941b38c54cbc25a370c.png\",\"url\":\"https:\\/\\/img-blog.csdnimg.cn\\/410a06cda2d44b0c84578f88275caf70.png\"}],\"map\":{\"hot\":\"热门\",\"vip\":\"VIP\"}}";
      
      var canRead = true;
      var blogMoveHomeArticle = false;
      var showPcWindowAd = false;
      var showHeadWord = true;
      var showSearchText = "";
      var linkPage = true;
      var articleSource = 1;
      var articleReport = '{"spm":"1001.2101","extra":{"tsab":"t_1"},"pid":"blog"}';
      var isShowToQuestion = false;
        var baiduSearchChannel = 'pc_relevant'
        var baiduSearchIdentification = '.235^v38^pc_relevant_anti_t3_base'
        var distRequestId = '1686871376234_95673'
        var initRewardObject = {
          giver: "m0_62961153",
          anchor: "qq_38490457",
          articleId: "109257751",
          sign: "6d97cc840b0d9d368da2282b83d5fabd",
        }
        var isLikeStatus = false;
        var isUnLikeStatus = false;
        var studyLearnWord = "";
        var isCurrentUserVip = false;
        var contentViewsHeight = 0;
        var contentViewsCount = 0;
        var contentViewsCountLimit = 5;
        var isShowConcision = true
      var isCookieConcision = false
      var isHasDirectoryModel = false
      var isShowSideModel = false
      var isShowDirectoryModel = true
      function getCookieConcision(sName){
        var allCookie = document.cookie.split("; ");
        for (var i=0; i < allCookie.length; i++){
          var aCrumb = allCookie[i].split("=");
          if (sName == aCrumb[0])
            return aCrumb[1];
        }
        return null;
      }
      if (getCookieConcision('blog_details_concision') && getCookieConcision('blog_details_concision') == 0){
        isCookieConcision = true
        isShowSideModel = true
        isShowDirectoryModel = false
      }
    </script>
        <div class="main_father clearfix d-flex justify-content-center mainfather-concision" style="height:100%;">
          <div class="container clearfix container-concision" id="mainBox">
          <script>
          if (!isCookieConcision) {
            $('.main_father').removeClass('mainfather-concision')
            $('.main_father .container').removeClass('container-concision')
          }
          </script>
          <main>
<script type="text/javascript">
    var resourceId =  "";
    function getQueryString(name) {   
      var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)"); //构造一个含有目标参数的正则表达式对象  
      var r = window.location.search.substr(1).match(reg);  //匹配目标参数
      if( r != null ) return decodeURIComponent( r[2] ); return '';   
    }
    function stripscript(s){ 
      var pattern = new RegExp("[`~!@#$^&*()=|{}':;',\\[\\].<>/?~！@#￥……&*（）——|{}【】‘；：”“'。，、？%]") 
      var rs = ""; 
      for (var i = 0; i < s.length; i++) { 
        rs = rs+s.substr(i, 1).replace(pattern, ''); 
      } 
      return rs;
    }
    var blogHotWords = stripscript(getQueryString('utm_term')).length > 1 ? stripscript(getQueryString('utm_term')) : ''
</script>
<div class="blog-content-box">
    <div class="article-header-box">
        <div class="article-header">
            <div class="article-title-box">
                <h1 class="title-article" id="articleContentId">学习JavaScript这一篇就够了</h1>
            </div>
            <div class="article-info-box">
                <div class="article-bar-top">
                    <img class="article-type-img" src="https://csdnimg.cn/release/blogv2/dist/pc/img/original.png" alt="">
                    <div class="bar-content">
                      <a class="follow-nickName " href="https://caochenlei.blog.csdn.net" target="_blank" rel="noopener" title="轻松的小希">轻松的小希</a>
                    <img class="article-time-img article-heard-img" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newUpTime2.png" alt="">
                    <span class="time">已于&nbsp;2022-03-06 17:27:11&nbsp;修改</span>
                    <img class="article-read-img article-heard-img" src="https://csdnimg.cn/release/blogv2/dist/pc/img/articleReadEyes2.png" alt="">
                    <span class="read-count">572714</span>
                    <a id="blog_detail_zk_collection" class="un-collection" data-report-click='{"mod":"popu_823","spm":"1001.2101.3001.4232","ab":"new"}'>
                        <img class="article-collect-img article-heard-img un-collect-status isdefault" style="display:none" src="https://csdnimg.cn/release/blogv2/dist/pc/img/tobarCollect2.png" alt="">
                        <img class="article-collect-img article-heard-img collect-status isactive" style="display:inline-block" src="https://csdnimg.cn/release/blogv2/dist/pc/img/tobarCollectionActive2.png" alt="">
                        <span class="name">收藏</span>
                        <span class="get-collection">
                            37349
                        </span>
                    </a>
                    </div>
                </div>
                <div class="blog-tags-box">
                    <div class="tags-box artic-tag-box">
                            <span class="label">分类专栏：</span>
                                <a class="tag-link" href="https://blog.csdn.net/qq_38490457/category_10401704.html" target="_blank" rel="noopener">Web</a>
                            <span class="label">文章标签：</span>
                                <a data-report-click='{"mod":"popu_626","spm":"1001.2101.3001.4223","strategy":"javascript","ab":"new","extra":"{\"searchword\":\"javascript\"}"}' class="tag-link" href="https://so.csdn.net/so/search/s.do?q=javascript&amp;t=all&amp;o=vip&amp;s=&amp;l=&amp;f=&amp;viparticle=" target="_blank" rel="noopener">javascript</a>
                                <a data-report-click='{"mod":"popu_626","spm":"1001.2101.3001.4223","strategy":"html5","ab":"new","extra":"{\"searchword\":\"html5\"}"}' class="tag-link" href="https://so.csdn.net/so/search/s.do?q=html5&amp;t=all&amp;o=vip&amp;s=&amp;l=&amp;f=&amp;viparticle=" target="_blank" rel="noopener">html5</a>
                                <a data-report-click='{"mod":"popu_626","spm":"1001.2101.3001.4223","strategy":"html","ab":"new","extra":"{\"searchword\":\"html\"}"}' class="tag-link" href="https://so.csdn.net/so/search/s.do?q=html&amp;t=all&amp;o=vip&amp;s=&amp;l=&amp;f=&amp;viparticle=" target="_blank" rel="noopener">html</a>
                    </div>
                </div>
                <div class="up-time"><span>于&nbsp;2020-11-25 16:28:22&nbsp;首次发布</span></div>
                <div class="slide-content-box">
                    <div class="article-copyright">
                        <div class="creativecommons">
                            版权声明：本文为博主原创文章，遵循<a href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="noopener"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。
                        </div>
                        <div class="article-source-link">
                            本文链接：<a href="https://blog.csdn.net/qq_38490457/article/details/109257751" target="_blank">https://blog.csdn.net/qq_38490457/article/details/109257751</a>
                        </div>
                    </div>
                </div>
                
                <div class="operating">
                    <a class="href-article-edit slide-toggle">版权</a>
                </div>
            </div>
        </div>
    </div>
    <div id="blogHuaweiyunAdvert"></div>
        <div id="blogColumnPayAdvert">
            <div class="column-group">
                <div class="column-group-item column-group0 column-group-item-one">
                    <div class="item-l">
                        <a class="item-target" href="https://blog.csdn.net/qq_38490457/category_10401704.html" target="_blank" title="Web"
                        data-report-view='{"spm":"1001.2101.3001.6332"}'
                        data-report-click='{"spm":"1001.2101.3001.6332"}'>
                            <img class="item-target" src="https://img-blog.csdnimg.cn/20201115093906928.png?x-oss-process=image/resize,m_fixed,h_224,w_224" alt="">
                            <span class="title item-target">
                                <span>
                                <span class="tit">Web</span>
                                    <span class="dec">专栏收录该内容</span>
                                </span>
                            </span>
                        </a>
                    </div>
                    <div class="item-m">
                        <span>9 篇文章</span>
                        <span>1407 订阅</span>
                    </div>
                    <div class="item-r">
                            <a class="item-target article-column-bt articleColumnFreeBt" data-id="10401704">订阅专栏</a>
                    </div>
                </div>
            </div>
        </div>
    <article class="baidu_pl">
        <div id="article_content" class="article_content clearfix">
        <link rel="stylesheet" href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/kdoc_html_views-1a98987dfd.css">
        <link rel="stylesheet" href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-25cebea3f9.css">
                <div id="content_views" class="markdown_views prism-atom-one-dark">
                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                        <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path>
                    </svg>
                    <p></p> 
<div class="toc"> 
 <h3>目录</h3> 
 <ul><li><a href="#_JavaScript_7">第一章 JavaScript简介</a></li><li><ul><li><a href="#11JavaScript_9">1.1、JavaScript的起源</a></li><li><a href="#12JavaScript_27">1.2、JavaScript的组成</a></li><li><a href="#13JavaScript_39">1.3、JavaScript的特点</a></li><li><a href="#14JavaScript_63">1.4、JavaScript的使用</a></li><li><ul><li><a href="#141_65">1.4.1、标签引用</a></li><li><a href="#142_75">1.4.2、文件引用</a></li></ul> 
   </li><li><a href="#15JavaScript_91">1.5、JavaScript的输出</a></li><li><ul><li><a href="#151_93">1.5.1、页面输出</a></li><li><a href="#152_103">1.5.2、控制台输出</a></li><li><a href="#153_120">1.5.3、弹出窗口输出</a></li></ul> 
   </li><li><a href="#16JavaScript_130">1.6、JavaScript的注释</a></li><li><ul><li><a href="#161_139">1.6.1、单行注释</a></li><li><a href="#162_148">1.6.2、多行注释</a></li></ul> 
  </li></ul> 
  </li><li><a href="#_JavaScript_159">第二章 JavaScript基础语法</a></li><li><ul><li><a href="#21_161">2.1、标识符</a></li><li><a href="#22_196">2.2、字面量和变量</a></li><li><ul><li><a href="#221_198">2.2.1、字面量</a></li><li><a href="#222_202">2.2.2、变量</a></li></ul> 
   </li><li><a href="#23_224">2.3、数据类型</a></li><li><ul><li><a href="#231_226">2.3.1、类型分类</a></li><li><a href="#232typeof_242">2.3.2、typeof运算符</a></li><li><a href="#233String_266">2.3.3、String</a></li><li><a href="#234Number_276">2.3.4、Number</a></li><li><a href="#235Boolean_300">2.3.5、Boolean</a></li><li><a href="#236Undefined_306">2.3.6、Undefined</a></li><li><a href="#237Null_314">2.3.7、Null</a></li></ul> 
   </li><li><a href="#24_322">2.4、强制类型转换</a></li><li><ul><li><a href="#241String_326">2.4.1、转换为String类型</a></li><li><a href="#242Number_367">2.4.2、转换为Number类型</a></li><li><a href="#243Boolean_405">2.4.3、转换为Boolean类型</a></li></ul> 
   </li><li><a href="#25_417">2.5、运算符</a></li><li><ul><li><a href="#251_423">2.5.1、算术运算符</a></li><li><a href="#252_439">2.5.2、关系运算符</a></li><li><a href="#253_452">2.5.3、赋值运算符</a></li><li><a href="#254_467">2.5.4、逻辑运算符</a></li><li><a href="#255_493">2.5.5、比较运算符</a></li><li><a href="#256_506">2.5.6、条件运算符</a></li><li><a href="#257_516">2.5.7、逗号运算符</a></li></ul> 
   </li><li><a href="#26_524">2.6、运算符优先级</a></li><li><a href="#27_530">2.7、代码块</a></li><li><ul><li><a href="#271_532">2.7.1、语句</a></li><li><a href="#272_538">2.7.2、代码块</a></li></ul> 
   </li><li><a href="#28_554">2.8、条件语句</a></li><li><ul><li><a href="#281ifelse_561">2.8.1、if...else</a></li><li><a href="#282switchcase_619">2.8.2、switch...case</a></li></ul> 
   </li><li><a href="#29_699">2.9、循环语句</a></li><li><ul><li><a href="#291while_707">2.9.1、while</a></li><li><a href="#292dowhile_729">2.9.2、do...while</a></li><li><a href="#293for_751">2.9.3、for</a></li><li><a href="#294_771">2.9.4、跳转控制</a></li></ul> 
   </li><li><a href="#210_789">2.10、对象基础</a></li><li><ul><li><a href="#2101_791">2.10.1、概述</a></li><li><a href="#2102_795">2.10.2、创建对象</a></li><li><a href="#2103_818">2.10.3、访问属性</a></li><li><a href="#2104_834">2.10.4、删除属性</a></li><li><a href="#2105_854">2.10.5、遍历对象</a></li><li><a href="#2106_880">2.10.6、数据类型梳理</a></li><li><ul><li><a href="#21061_882">2.10.6.1、基本数据类型</a></li><li><a href="#21062_892">2.10.6.2、引用数据类型</a></li></ul> 
    </li><li><a href="#2107_902">2.10.7、栈和堆梳理</a></li></ul> 
   </li><li><a href="#211_925">2.11、函数</a></li><li><ul><li><a href="#2111_927">2.11.1、概述</a></li><li><a href="#2112_935">2.11.2、函数创建</a></li><li><a href="#2113_987">2.11.3、函数调用</a></li><li><a href="#2114_1014">2.11.4、函数参数</a></li><li><a href="#2115_1020">2.11.5、函数返回值</a></li><li><a href="#2116_1039">2.11.6、嵌套函数</a></li><li><a href="#2117_1057">2.11.7、匿名函数</a></li><li><a href="#2118_1071">2.11.8、立即执行函数</a></li><li><a href="#2119_1083">2.11.9、对象中的函数</a></li><li><a href="#21110this_1105">2.11.10、this对象</a></li></ul> 
   </li><li><a href="#212_1133">2.12、对象进阶</a></li><li><ul><li><a href="#2121_1135">2.12.1、用工厂方法创建对象</a></li><li><a href="#2122_1249">2.12.2、用构造函数创建对象</a></li><li><a href="#2123_1335">2.12.3、原型</a></li><li><a href="#2124_1399">2.12.4、原型链</a></li><li><a href="#2125toString_1409">2.12.5、toString方法</a></li><li><a href="#2126hasOwnProperty_1478">2.12.6、hasOwnProperty方法</a></li><li><a href="#2127_1550">2.12.7、对象继承</a></li><li><ul><li><a href="#21271_1567">2.12.7.1、原型链继承</a></li><li><a href="#21272_1624">2.12.7.2、借用构造函数继承</a></li><li><a href="#21273_1675">2.12.7.3、组合继承</a></li></ul> 
    </li><li><a href="#2128_1722">2.12.8、垃圾回收</a></li></ul> 
   </li><li><a href="#213_1749">2.13、作用域</a></li><li><ul><li><a href="#2131_1756">2.13.1、声明提前</a></li><li><a href="#2132_1761">2.13.2、作用域</a></li><li><ul><li><a href="#21321_1763">2.13.2.1、全局作用域</a></li><li><a href="#21322_1773">2.13.2.2、函数作用域</a></li></ul> 
    </li><li><a href="#2133_1781">2.13.3、作用域链</a></li></ul> 
  </li></ul> 
  </li><li><a href="#_JavaScript_1791">第三章 JavaScript常用对象</a></li><li><ul><li><a href="#31_1793">3.1、数组对象</a></li><li><ul><li><a href="#311_1795">3.1.1、概述</a></li><li><a href="#312_1803">3.1.2、创建数组</a></li><li><ul><li><a href="#3121_1805">3.1.2.1、使用对象创建</a></li><li><a href="#3122_1837">3.1.2.2、使用字面量创建</a></li></ul> 
    </li><li><a href="#313_1851">3.1.3、遍历数组</a></li><li><a href="#314_1859">3.1.4、数组属性</a></li><li><a href="#315_1879">3.1.5、数组方法</a></li></ul> 
   </li><li><a href="#32_2058">3.2、函数对象</a></li><li><ul><li><a href="#321callapply_2060">3.2.1、call()和apply()</a></li><li><a href="#322this_2114">3.2.2、this指向</a></li><li><a href="#323arguments_2121">3.2.3、arguments参数</a></li></ul> 
   </li><li><a href="#33Date_2158">3.3、Date对象</a></li><li><a href="#34Math_2181">3.4、Math对象</a></li><li><a href="#35String_2220">3.5、String对象</a></li><li><ul><li><a href="#351_2222">3.5.1、概述</a></li><li><a href="#352_2232">3.5.2、字符串属性</a></li><li><a href="#353_2252">3.5.3、字符串方法</a></li></ul> 
   </li><li><a href="#36RegExp_2386">3.6、RegExp对象</a></li><li><ul><li><a href="#361_2388">3.6.1、概述</a></li><li><a href="#362_2394">3.6.2、创建正则对象</a></li><li><ul><li><a href="#3621_2396">3.6.2.1、使用对象创建</a></li><li><a href="#3622_2422">3.6.2.2、使用字面量创建</a></li></ul> 
    </li><li><a href="#363_2450">3.6.3、正则进阶</a></li><li><a href="#364_2518">3.6.4、正则方法</a></li><li><a href="#365_2567">3.6.5、正则量词</a></li><li><a href="#366_2606">3.6.6、正则高阶</a></li><li><a href="#367_2682">3.6.7、正则案例</a></li><li><ul><li><a href="#3671_2684">3.6.7.1、检查手机号</a></li><li><a href="#3672_2694">3.6.7.2、检查邮箱号</a></li></ul> 
   </li></ul> 
  </li></ul> 
  </li><li><a href="#_JavaScript_DOM_2704">第四章 JavaScript DOM</a></li><li><ul><li><a href="#41DOM_2706">4.1、DOM概述</a></li><li><a href="#42DOM_2726">4.2、DOM文档节点</a></li><li><ul><li><a href="#421_2728">4.2.1、节点概述</a></li><li><a href="#422_2751">4.2.2、节点属性</a></li><li><a href="#423_2755">4.2.3、文档节点</a></li><li><a href="#424_2763">4.2.4、元素节点</a></li><li><a href="#425_2771">4.2.5、属性节点</a></li><li><a href="#426_2779">4.2.6、文本节点</a></li></ul> 
   </li><li><a href="#43DOM_2785">4.3、DOM文档操作</a></li><li><ul><li><a href="#431_HTML__2791">4.3.1、查找 HTML 元素</a></li><li><ul><li><a href="#4311_2793">4.3.1.1、方法介绍</a></li><li><a href="#4312_2803">4.3.1.2、方法演示</a></li></ul> 
    </li><li><a href="#432_HTML__2925">4.3.2、获取 HTML 的值</a></li><li><ul><li><a href="#4321_2927">4.3.2.1、方法介绍</a></li><li><a href="#4322_2937">4.3.2.2、方法演示</a></li></ul> 
    </li><li><a href="#433_HTML__3170">4.3.3、改变 HTML 的值</a></li><li><ul><li><a href="#4331_3172">4.3.3.1、方法介绍</a></li><li><a href="#4332_3182">4.3.3.2、方法演示</a></li></ul> 
    </li><li><a href="#434_HTML__3421">4.3.4、修改 HTML 元素</a></li><li><ul><li><a href="#4341_3423">4.3.4.1、方法介绍</a></li><li><a href="#4342_3435">4.3.4.2、方法演示</a></li></ul> 
    </li><li><a href="#435_HTML__3731">4.3.5、查找 HTML 父子</a></li><li><ul><li><a href="#4351_3733">4.3.5.1、方法介绍</a></li><li><a href="#4352_3750">4.3.5.2、方法演示</a></li></ul> 
   </li></ul> 
   </li><li><a href="#44DOM_3959">4.4、DOM文档事件</a></li><li><ul><li><a href="#441_3961">4.4.1、事件概述</a></li><li><a href="#442_3965">4.4.2、窗口事件</a></li><li><a href="#443_4069">4.4.3、表单事件</a></li><li><a href="#444_4264">4.4.4、键盘事件</a></li><li><a href="#445_4373">4.4.5、鼠标事件</a></li><li><a href="#446_4506">4.4.6、媒体事件</a></li><li><a href="#447_4536">4.4.7、其它事件</a></li><li><a href="#448_4543">4.4.8、事件冒泡</a></li><li><a href="#449_4715">4.4.9、事件委派</a></li><li><a href="#4410_4754">4.4.10、事件绑定</a></li><li><a href="#4411_4854">4.4.11、事件传播</a></li></ul> 
  </li></ul> 
  </li><li><a href="#_JavaScript_BOM_4872">第五章 JavaScript BOM</a></li><li><ul><li><a href="#51BOM_4874">5.1、BOM概述</a></li><li><a href="#52Window_4892">5.2、Window对象</a></li><li><ul><li><a href="#521_4894">5.2.1、弹出框</a></li><li><ul><li><a href="#5211_4898">5.2.1.1、警告框</a></li><li><a href="#5212_4916">5.2.1.2、确认框</a></li><li><a href="#5213_4943">5.2.1.3、提示框</a></li></ul> 
    </li><li><a href="#522_4968">5.2.2、定时事件</a></li><li><ul><li><a href="#5221_4986">5.2.2.1、延时器</a></li><li><a href="#5222_5029">5.2.2.2、定时器</a></li></ul> 
    </li><li><a href="#523_5223">5.2.3、常用窗口属性</a></li><li><a href="#524_5272">5.2.4、其它窗口方法</a></li></ul> 
   </li><li><a href="#53Navigator_5419">5.3、Navigator对象</a></li><li><a href="#54Location_5473">5.4、Location对象</a></li><li><ul><li><a href="#541_5477">5.4.1、常用属性</a></li><li><a href="#542_5505">5.4.2、常用方法</a></li></ul> 
   </li><li><a href="#55History_5525">5.5、History对象</a></li><li><ul><li><a href="#551_5529">5.5.1、常用属性</a></li><li><a href="#552_5538">5.5.2、常用方法</a></li></ul> 
   </li><li><a href="#56Screen_5563">5.6、Screen对象</a></li><li><ul><li><a href="#561Screen_5569">5.6.1、Screen对象描述</a></li><li><a href="#562Screen_5573">5.6.2、Screen对象属性</a></li></ul> 
  </li></ul> 
  </li><li><a href="#_JavaScript_5591">第六章 JavaScript高级语法</a></li><li><ul><li><a href="#61Exception_5593">6.1、Exception</a></li><li><ul><li><a href="#611_5595">6.1.1、异常概述</a></li><li><a href="#612_5627">6.1.2、异常捕捉</a></li><li><a href="#613_5666">6.1.3、异常演示</a></li><li><ul><li><a href="#6131Eval__5668">6.1.3.1、Eval 错误</a></li><li><a href="#6132_5684">6.1.3.2、范围错误</a></li><li><a href="#6133_5701">6.1.3.3、引用错误</a></li><li><a href="#6134_5718">6.1.3.4、语法错误</a></li><li><a href="#6135_5734">6.1.3.5、类型错误</a></li><li><a href="#6136URI__5751">6.1.3.6、URI 错误</a></li></ul> 
    </li><li><a href="#614_5767">6.1.4、异常抛出</a></li><li><ul><li><a href="#6141_5780">6.1.4.1、主动抛出内置异常</a></li><li><a href="#6142_5798">6.1.4.2、主动抛出自定义异常</a></li></ul> 
   </li></ul> 
   </li><li><a href="#62JSON_5821">6.2、JSON</a></li><li><ul><li><a href="#621JSON_5823">6.2.1、JSON概述</a></li><li><a href="#622JSON_5829">6.2.2、JSON语法</a></li><li><a href="#623JSON_5857">6.2.3、JSON数据类型</a></li><li><ul><li><a href="#6231JSON__5859">6.2.3.1、JSON 字符串</a></li><li><a href="#6232JSON__5867">6.2.3.2、JSON 数字</a></li><li><a href="#6233JSON__5875">6.2.3.3、JSON 对象</a></li><li><a href="#6234JSON__5885">6.2.3.4、JSON 数组</a></li><li><a href="#6235JSON__5895">6.2.3.5、JSON 布尔</a></li><li><a href="#6236JSON_null_5903">6.2.3.6、JSON null</a></li></ul> 
    </li><li><a href="#624JSONJS_5911">6.2.4、JSON字符串转JS对象</a></li><li><a href="#625JSJSON_5927">6.2.5、JS对象转JSON字符串</a></li></ul> 
   </li><li><a href="#63AJAX_5943">6.3、AJAX</a></li><li><ul><li><a href="#631AJAX_5945">6.3.1、AJAX概述</a></li><li><a href="#632AJAXXMLHttpRequest_5951">6.3.2、AJAX的XMLHttpRequest对象</a></li><li><a href="#633AJAXXMLHttpRequest_5985">6.3.3、AJAX的XMLHttpRequest对象方法</a></li><li><a href="#634AJAXXMLHttpRequest_5998">6.3.4、AJAX的XMLHttpRequest对象属性</a></li><li><a href="#635AJAXGET_6009">6.3.5、AJAX的GET请求</a></li><li><a href="#636AJAXPOST_6048">6.3.6、AJAX的POST请求</a></li><li><a href="#637AJAX_6088">6.3.7、AJAX的请求整合</a></li></ul> 
   </li><li><a href="#64Cookie_6147">6.4、Cookie</a></li><li><ul><li><a href="#641Cookie_6149">6.4.1、Cookie概述</a></li><li><a href="#642Cookie_6166">6.4.2、Cookie创建</a></li><li><a href="#643Cookie_6186">6.4.3、Cookie读取</a></li><li><a href="#644Cookie_6200">6.4.4、Cookie修改</a></li><li><a href="#645Cookie_6215">6.4.5、Cookie删除</a></li><li><a href="#646Cookie_6230">6.4.6、Cookie值设置函数</a></li><li><a href="#647Cookie_6247">6.4.7、Cookie值获取函数</a></li></ul> 
   </li><li><a href="#65WebStorage_6266">6.5、WebStorage</a></li><li><ul><li><a href="#651WebStorage_6268">6.5.1、WebStorage概述</a></li><li><a href="#652WebStorage_6278">6.5.2、WebStorage分类</a></li><li><a href="#653localStorage_6284">6.5.3、localStorage方法</a></li><li><a href="#654sessionStorage_6342">6.5.4、sessionStorage方法</a></li></ul> 
   </li><li><a href="#66Closure_6404">6.6、Closure</a></li><li><ul><li><a href="#661_6406">6.6.1、闭包引入</a></li><li><a href="#662_6441">6.6.2、闭包概念</a></li><li><a href="#663_6451">6.6.3、闭包演示</a></li><li><a href="#664_6485">6.6.4、闭包生命周期</a></li><li><a href="#665_6513">6.6.5、闭包应用</a></li></ul> 
  </li></ul> 
  </li><li><a href="#_JavaScript_6591">第七章 JavaScript新特性</a></li><li><ul><li><a href="#71ECMAScript6_6593">7.1、ECMAScript6新特性</a></li><li><ul><li><a href="#711let__6595">7.1.1、let 关键字</a></li><li><a href="#712const__6649">7.1.2、const 关键字</a></li><li><a href="#713_6673">7.1.3、变量的解构赋值</a></li><li><a href="#714_6735">7.1.4、模板字符串</a></li><li><a href="#715_6770">7.1.5、简化对象写法</a></li><li><a href="#716_6797">7.1.6、箭头函数</a></li><li><a href="#717rest__6852">7.1.7、rest 参数</a></li><li><a href="#718spread__6874">7.1.8、spread 扩展运算符</a></li><li><a href="#719Symbol_6913">7.1.9、Symbol类型</a></li><li><ul><li><a href="#7191Symbol_6915">7.1.9.1、Symbol的使用</a></li><li><a href="#7192Symbol_6960">7.1.9.2、Symbol内置值</a></li></ul> 
    </li><li><a href="#7110_7010">7.1.10、迭代器</a></li><li><a href="#7111_7094">7.1.11、生成器</a></li><li><ul><li><a href="#71111_7098">7.1.11.1、生成器函数使用</a></li><li><a href="#71112_7134">7.1.11.2、生成器函数参数</a></li><li><a href="#71113_7159">7.1.11.3、生成器函数实例</a></li></ul> 
    </li><li><a href="#7112Promise_7238">7.1.12、Promise</a></li><li><ul><li><a href="#71121Promise_7242">7.1.12.1、Promise基本使用</a></li><li><a href="#71122Promise_7268">7.1.12.2、Promise案例演示</a></li><li><a href="#71123Promisethen_7306">7.1.12.3、Promise-then方法</a></li><li><a href="#71124Promisecatch_7329">7.1.12.4、Promise-catch方法</a></li></ul> 
    </li><li><a href="#7113Set_7348">7.1.13、Set</a></li><li><a href="#7114Map_7378">7.1.14、Map</a></li><li><a href="#7115class__7411">7.1.15、class 类</a></li><li><a href="#7116_7482">7.1.16、数值扩展</a></li><li><ul><li><a href="#71161_7484">7.1.16.1、二进制和八进制</a></li><li><a href="#71162NumberEPSILON_7501">7.1.16.2、Number.EPSILON</a></li><li><a href="#71163NumberisFinite_7519">7.1.16.3、Number.isFinite</a></li><li><a href="#71164NumberisNaN_7532">7.1.16.4、Number.isNaN</a></li><li><a href="#71165NumberparseInt_7542">7.1.16.5、Number.parseInt</a></li><li><a href="#71166NumberparseFloat_7552">7.1.16.6、Number.parseFloat</a></li><li><a href="#71167NumberisInteger_7562">7.1.16.7、Number.isInteger</a></li><li><a href="#71168Mathtrunc_7573">7.1.16.8、Math.trunc</a></li><li><a href="#71169Mathsign_7583">7.1.16.9、Math.sign</a></li></ul> 
    </li><li><a href="#7117_7595">7.1.17、对象扩展</a></li><li><ul><li><a href="#71171Objectis_7603">7.1.17.1、Object.is</a></li><li><a href="#71172Objectassign_7615">7.1.17.2、Object.assign</a></li><li><a href="#71173_7639">7.1.17.3、设置原型对象</a></li></ul> 
    </li><li><a href="#7118_7658">7.1.18、模块化</a></li><li><ul><li><a href="#71181_7662">7.1.18.1、模块化的好处</a></li><li><a href="#71182_7668">7.1.18.2、模块化的产品</a></li><li><a href="#71183_7676">7.1.18.3、模块化的语法</a></li><li><a href="#71184_7683">7.1.18.4、模块化的暴露</a></li><li><a href="#71185_7721">7.1.18.5、模块化的导入</a></li><li><a href="#71186_7753">7.1.18.6、解构赋值形式</a></li></ul> 
    </li><li><a href="#7119_7792">7.1.19、浅拷贝和深拷贝</a></li><li><ul><li><a href="#71191_7796">7.1.19.1、浅拷贝</a></li><li><a href="#71192_7817">7.1.19.2、深拷贝</a></li><li><ul><li><a href="#711921_7819">7.1.19.2.1、自带的</a></li><li><a href="#711922_7945">7.1.19.2.2、通用版</a></li></ul> 
    </li></ul> 
   </li></ul> 
   </li><li><a href="#72ECMAScript7_8002">7.2、ECMAScript7新特性</a></li><li><ul><li><a href="#721_8004">7.2.1、数组方法扩展</a></li><li><a href="#722_8015">7.2.2、幂运算</a></li></ul> 
   </li><li><a href="#73ECMAScript8_8026">7.3、ECMAScript8新特性</a></li><li><ul><li><a href="#731async__8028">7.3.1、async 函数</a></li><li><a href="#732await__8067">7.3.2、await 表达式</a></li><li><a href="#733_8146">7.3.3、对象方法拓展</a></li></ul> 
   </li><li><a href="#74ECMAScript9_8208">7.4、ECMAScript9新特性</a></li><li><ul><li><a href="#741_8210">7.4.1、对象拓展</a></li><li><ul><li><a href="#7411_8214">7.4.1.1、对象展开</a></li><li><a href="#7412_8234">7.4.1.2、对象合并</a></li></ul> 
    </li><li><a href="#742_8259">7.4.2、正则表达式拓展</a></li><li><ul><li><a href="#7421_8261">7.4.2.1、命名捕获分组</a></li><li><a href="#7422_8275">7.4.2.2、正向断言</a></li><li><a href="#7423_8290">7.4.2.3、反向断言</a></li><li><a href="#7424dotAll_8305">7.4.2.4、dotAll模式</a></li></ul> 
   </li></ul> 
   </li><li><a href="#75ECMAScript10_8338">7.5、ECMAScript10新特性</a></li><li><ul><li><a href="#751_8340">7.5.1、对象方法拓展</a></li><li><a href="#752_8360">7.5.2、字符串方法拓展</a></li><li><a href="#753_8370">7.5.3、数组方法拓展</a></li><li><a href="#754Symbol_8397">7.5.4、Symbol属性拓展</a></li></ul> 
   </li><li><a href="#76ECMAScript11_8409">7.6、ECMAScript11新特性</a></li><li><ul><li><a href="#761class__8411">7.6.1、class 私有属性</a></li><li><a href="#762PromiseallSettled_8445">7.6.2、Promise.allSettled</a></li><li><a href="#763_8477">7.6.3、字符串方法扩展</a></li><li><a href="#764_8506">7.6.4、可选链操作符</a></li><li><a href="#765_import_8531">7.6.5、动态 import</a></li><li><a href="#766BigInt_8575">7.6.6、BigInt类型</a></li><li><a href="#767globalThis_8616">7.6.7、globalThis</a></li></ul> 
  </li></ul> 
  </li><li><a href="#_JavaScript_8626">第八章 JavaScript项目百练</a></li><li><ul><li><a href="#81_8628">8.1、项目百练介绍</a></li><li><a href="#82_8632">8.2、项目百练目录</a></li></ul> 
 </li></ul> 
</div> 
<p></p> 
<hr /> 
<p><strong>配套资料&#xff0c;免费下载</strong><br /> 链接&#xff1a;https://pan.baidu.com/s/152NnFqzAUx9br2qb49mstA<br /> 提取码&#xff1a;ujyp<br /> 复制这段内容后打开百度网盘手机App&#xff0c;操作更方便哦</p> 
<h1><a id="_JavaScript_7"></a>第一章 JavaScript简介</h1> 
<h2><a id="11JavaScript_9"></a>1.1、JavaScript的起源</h2> 
<p>JavaScript诞生于1995年&#xff0c;它的出现主要是用于处理网页中的前端验证。所谓的前端验证&#xff0c;就是指检查用户输入的内容是否符合一定的规则。比如&#xff1a;用户名的长度&#xff0c;密码的长度&#xff0c;邮箱的格式等。但是&#xff0c;有的同学可能会有疑问&#xff0c;这些验证&#xff0c;后端不也可以进行验证吗&#xff1f;确实&#xff0c;后端程序的确可以进行这些验证&#xff0c;但你要清楚&#xff0c;在1995年那个年代&#xff0c;网速是非常慢的&#xff0c;向后端发送一个请求&#xff0c;浏览器很久才能得到响应&#xff0c;那这无疑是一种非常不好的用户体验。</p> 
<p>为了解决前端验证的问题&#xff0c;当时的浏览器巨头NetScape&#xff08;网景&#xff09;公司就开发出一种脚本语言&#xff0c;起初命名为LiveScript&#xff0c;后来由于SUN公司的介入更名为了JavaScript。但是你要清楚&#xff0c;Java和JavaScript是没有什么关系的&#xff0c;只不过当时Java非常流行&#xff0c;为了蹭热度&#xff0c;才将LiveScript更名为JavaScript&#xff0c;它们的关系就像雷锋和雷峰塔的关系一样&#xff0c;没啥关系。</p> 
<p>但是&#xff0c;浏览器开发商不止网景一家&#xff0c;还有一个大家都知道的公司&#xff0c;微软公司&#xff0c;它们的主打产品是IE&#xff08;Internet Explorer&#xff09;浏览器&#xff0c;当网景公司的Netscape Navigator浏览器推出JavaScript语言时&#xff0c;微软就急了啊&#xff0c;好家伙&#xff0c;人网景都推出了专门用于前端验证的语言&#xff0c;不仅大大减少了后端程序的压力&#xff0c;还提高了用户的体验。我微软这么大的公司不也得整一个&#xff0c;在1996年&#xff0c;微软公司在其最新的IE3浏览器中引入了自己对JavaScript的实现JScript。</p> 
<p>于是在市面上存在两个版本的JavaScript&#xff0c;一个网景公司的JavaScript和微软的JScript&#xff0c;虽然当时浏览器的巨头是网景&#xff0c;但是网景的浏览器是收费的&#xff0c;虽然微软的IE浏览器在全球的市场份额远远不及网景&#xff0c;但是微软的拳头产品是Windows操作系统&#xff0c;每一个操作系统都自带一个IE浏览器并且免费&#xff0c;那么&#xff0c;未来的发展大家可能也想到了&#xff0c;网景让微软给干倒闭了&#xff0c;1998年11月&#xff0c;网景被美国在线&#xff08;AOL&#xff09;收购。</p> 
<p>老大哥就是老大哥&#xff0c;为了抢先获得规则制定权&#xff0c;网景最先将JavaScript作为草案提交给欧洲计算机制造商协会&#xff0c;也就是ECMA组织&#xff0c;希望能将JavaScript做成行业标准&#xff0c;最终在网景、SUN以及微软等公司的参与下&#xff0c;由一众程序员和相关组织人员组成的第39技术委员会也就是TC39发布了ECMA-262标准&#xff0c;这个标准定义了名为ECMAScript的全新脚本语言&#xff0c;为啥又来了个ECMAScript&#xff1f;</p> 
<p>因为Java是SUN的商标&#xff0c;SUN授权了NetScape可以叫JavaScript&#xff0c;但是ECMA没有SUN的授权就不能叫JavaScript&#xff0c;哪怕NetScape成员特别希望ECMA把它叫做JavaScript&#xff0c;但是ECMA也有成员并不希望这个标准就叫JavaScript&#xff0c;总之经过几轮磋商和博弈&#xff0c;ECMAScript这个名字就定下来。</p> 
<p>我们可以简单看一下历史事件发展表&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/34ceed720299546a8161deab88fe16aa.png" alt="image-20201012142902870" /></p> 
<h2><a id="12JavaScript_27"></a>1.2、JavaScript的组成</h2> 
<p>ECMAScript是一个标准&#xff0c;而这个标准需要由各个厂商去实现&#xff0c;不同的浏览器厂商对该标准会有不同的实现。</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/584d9295990909d32b3338dbbbe9c037.png" alt="image-20201012144015831" /></p> 
<p>我们已经知道ECMAScript是JavaScript标准&#xff0c;所以一般情况下这两个词我们认为是一个意思。但是实际上JavaScript的含义却要更大一些。一个完整的JavaScript实现应该由以下三个部分构成&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/fafb929ac005ed0e9e2dedb433fe8eab.png" alt="image-20201012144120964" /></p> 
<p>由此我们也知道了我们所要学习的内容就是这三部分&#xff0c;它们具体的含义后边章节会具体介绍。</p> 
<h2><a id="13JavaScript_39"></a>1.3、JavaScript的特点</h2> 
<p><strong>解释型语言</strong></p> 
<p>JavaScript是一门解释型语言&#xff0c;所谓解释型值语言是指不需要被编译为机器码在执行&#xff0c;而是直接执行。由于少了编译这一步骤&#xff0c;所以解释型语言开发起来尤为轻松&#xff0c;但是解释型语言运行较慢也是它的劣势。不过解释型语言中使用了JIT技术&#xff0c;使得运行速度得以改善。</p> 
<p><strong>动态语言</strong></p> 
<p>JavaScript是一门动态语言&#xff0c;所谓的动态语言可以暂时理解为在语言中的一切内容都是不确定的。比如一个变量&#xff0c;这一时刻是个整型&#xff0c;下一时刻可能会变成字符串了。当然这个问题我们以后再谈。不过在补充一句动态语言相比静态语言性能上要差一些&#xff0c;不过由于JavaScript中应用的JIT技术&#xff0c;所以JavaScript可能是运行速度最快的动态语言了。</p> 
<p><strong>类似于 C 和 Java 的语法结构</strong></p> 
<p>JavaScript的语法结构与C和Java很像&#xff0c;向for、if、while等语句和Java的基本上是一模一样的。所以有过C和Java基础的同学学习起来会轻松很多。不过JavaScript和与Java的关系也仅仅是看起来像而已。</p> 
<p><strong>基于原型的面向对象</strong></p> 
<p>JavaScript是一门面向对象的语言。啥是对象&#xff1f;下次聊。</p> 
<p>Java也是一门面向对象的语言&#xff0c;但是与Java不同JavaScript是基于原型的面向对象。啥是原型&#xff1f;下次聊。</p> 
<p><strong>严格区分大小写</strong></p> 
<p>JavaScript是严格区分大小写的&#xff0c;也就是abc和Abc会被解析器认为是两个不同的东西。</p> 
<h2><a id="14JavaScript_63"></a>1.4、JavaScript的使用</h2> 
<h3><a id="141_65"></a>1.4.1、标签引用</h3> 
<p>在HTML中在script标签中就可以编写JavaScript代码&#xff0c;以下是一个简单演示。</p> 
<pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#34;Hello,World!&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<h3><a id="142_75"></a>1.4.2、文件引用</h3> 
<p>在一个单独的js文件中也可以编写JavaScript代码&#xff0c;然后在HTML文件中使用script标签进行引用&#xff0c;以下是一个简单演示。</p> 
<p>main.html</p> 
<pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>main.js<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p>main.js</p> 
<pre><code class="prism language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#34;Hello,World!&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<h2><a id="15JavaScript_91"></a>1.5、JavaScript的输出</h2> 
<h3><a id="151_93"></a>1.5.1、页面输出</h3> 
<p>如何使用JavaScript向页面输出一句话&#xff0c;请参考以下代码。</p> 
<pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#34;Hello,World!&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<h3><a id="152_103"></a>1.5.2、控制台输出</h3> 
<p>如何使用JavaScript向控制台输出一句话&#xff0c;请参考以下代码。</p> 
<blockquote> 
 <p>注意&#xff1a;页面按F12弹出控制台</p> 
</blockquote> 
<pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;输出一条日志&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最常用</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#34;输出一条信息&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#34;输出一条警告&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#34;输出一条错误&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/0ce4f104e24737e922449dfcd54951f2.png" alt="image-20201025103100826" /></p> 
<h3><a id="153_120"></a>1.5.3、弹出窗口输出</h3> 
<p>如何使用JavaScript向弹出窗口输出一句话&#xff0c;请参考以下代码。</p> 
<pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#34;Hello,World!&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<h2><a id="16JavaScript_130"></a>1.6、JavaScript的注释</h2> 
<p>注释中的内容不会被解析器解析执行&#xff0c;但是会在源码中显示&#xff0c;我们一般会使用注释对程序中的内容进行解释。</p> 
<p>JS中的注释和Java的的一致&#xff0c;分为两种&#xff1a;</p> 
<ul><li>单行注释&#xff1a;<code>// 注释内容</code></li><li>多行注释&#xff1a;<code>/* 注释内容 */</code></li></ul> 
<h3><a id="161_139"></a>1.6.1、单行注释</h3> 
<pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token comment">// 这是注释内容</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;Hello,World!&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<h3><a id="162_148"></a>1.6.2、多行注释</h3> 
<pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token comment">/**
     * 这是注释内容
     */</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;Hello,World!&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<h1><a id="_JavaScript_159"></a>第二章 JavaScript基础语法</h1> 
<h2><a id="21_161"></a>2.1、标识符</h2> 
<p>所谓标识符&#xff0c;就是指给变量、函数、属性或函数的参数起名字。</p> 
<p>标识符可以是按照下列格式规则组合起来的一或多个字符&#xff1a;</p> 
<ul><li>第一个字符必须是一个字母、下划线&#xff08; _ &#xff09;或一个美元符号&#xff08; $ &#xff09;。</li><li>其它字符可以是字母、下划线、美元符号或数字。</li><li>按照惯例&#xff0c;ECMAScript 标识符采用驼峰命名法。</li><li>标识符不能是关键字和保留字符。</li></ul> 
<p><strong>关键字&#xff1a;</strong></p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/06bab955dce3d478eb0ee1880efdbf13.png" alt="image-20201012215759481" /></p> 
<p><strong>保留字符&#xff1a;</strong></p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/321c5fb7e148d7fa99e59440083b0a4b.png" alt="image-20201012215835171" /></p> 
<p><strong>其它不建议使用的标识符&#xff1a;</strong></p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/612f0462d3cde3f2fa410ccd8b6da15b.png" alt="image-20201012215902568" /></p> 
<p><strong>单个单词的标识符举例&#xff1a;</strong></p> 
<pre><code>name、age、gender、hobby
</code></pre> 
<p><strong>多个单词的标识符举例&#xff1a;</strong></p> 
<pre><code>studentName、studentAge、studentGender、studentHobby
</code></pre> 
<h2><a id="22_196"></a>2.2、字面量和变量</h2> 
<h3><a id="221_198"></a>2.2.1、字面量</h3> 
<p>字面量实际上就是一些固定的值&#xff0c;比如&#xff1a;1、2 、3、true、false、null、NaN、“hello”&#xff0c;字面量都是不可以改变的&#xff0c;由于字面量不是很方便使用&#xff0c;所以在JavaScript中很少直接使用字面量&#xff0c;使用的而是变量。</p> 
<h3><a id="222_202"></a>2.2.2、变量</h3> 
<p>变量的作用是给某一个值或对象标注名称。比如我们的程序中有一个值123&#xff0c;这个值我们是需要反复使用的&#xff0c;这个时候 我们最好将123这个值赋值给一个变量&#xff0c;然后通过变量去使用123这个值。</p> 
<p><strong>变量的声明&#xff1a;</strong> 使用var关键字声明一个变量。</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">;</span>
</code></pre> 
<p><strong>变量的赋值&#xff1a;</strong> 使用&#61;为变量赋值。</p> 
<pre><code class="prism language-javascript">a <span class="token operator">&#61;</span> <span class="token number">123</span><span class="token punctuation">;</span>
</code></pre> 
<p><strong>声明和赋值同时进行&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> a <span class="token operator">&#61;</span> <span class="token number">123</span><span class="token punctuation">;</span>
</code></pre> 
<h2><a id="23_224"></a>2.3、数据类型</h2> 
<h3><a id="231_226"></a>2.3.1、类型分类</h3> 
<p>数据类型决定了一个数据的特征&#xff0c;比如&#xff1a;123和”123”&#xff0c;直观上看这两个数据都是123&#xff0c;但实际上前者是一个数字&#xff0c;而后者是一个字符串。</p> 
<p>对于不同的数据类型我们在进行操作时会有很大的不同。</p> 
<p>JavaScript中一共有5种基本数据类型&#xff1a;</p> 
<ul><li>字符串型&#xff08;String&#xff09;</li><li>数值型&#xff08;Number&#xff09;</li><li>布尔型&#xff08;Boolean&#xff09;</li><li>undefined型&#xff08;Undefined&#xff09;</li><li>null型&#xff08;Null&#xff09;</li></ul> 
<p>这5种之外的类型都称为Object&#xff0c;所以总的来看JavaScript中共有六种数据类型。</p> 
<h3><a id="232typeof_242"></a>2.3.2、typeof运算符</h3> 
<p>使用typeof操作符可以用来检查一个变量的数据类型。</p> 
<p><strong>使用方式&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">typeof</span> 数据
</code></pre> 
<p><strong>示例代码&#xff1a;</strong></p> 
<pre><code class="prism language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&#34;Hello,World!&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><strong>运行结果&#xff1a;</strong></p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/b9ba0a296f0c0a973fae0c2bda964929.png" alt="image-20201013080324458" /></p> 
<h3><a id="233String_266"></a>2.3.3、String</h3> 
<p>String用于表示一个字符序列&#xff0c;即字符串。字符串需要使用 <strong>单引号</strong> 或 <strong>双引号</strong> 括起来。</p> 
<p><strong>转义字符&#xff1a;</strong></p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/8cd27bded82d24387ae42b8444f0d25e.png" alt="image-20201013085608008" /></p> 
<blockquote> 
 <p>注意&#xff1a;使用typeof运算符检查字符串时&#xff0c;会返回&#34;string&#34;。</p> 
</blockquote> 
<h3><a id="234Number_276"></a>2.3.4、Number</h3> 
<p>Number 类型用来表示整数和浮点数&#xff0c;最常用的功能就是用来表示10进制的整数和浮点数。</p> 
<p>Number表示的数字大小是有限的&#xff0c;如果超过了这个范围&#xff0c;则会返回 ±Infinity。</p> 
<ul><li>最大值&#xff1a;&#43;1.7976931348623157e&#43;308</li><li>最小值&#xff1a;-1.7976931348623157e&#43;308</li><li>0以上的最小值&#xff1a;5e-324</li></ul> 
<p><strong>特殊的数字&#xff1a;</strong></p> 
<ul><li>Infinity&#xff1a;正无穷</li><li>-Infinity&#xff1a;负无穷</li><li>NaN&#xff1a;非法数字&#xff08;Not A Number&#xff09;</li></ul> 
<p><strong>其它的进制&#xff1a;</strong></p> 
<ul><li>二进制&#xff1a;0b 开头表示二进制&#xff0c;但是&#xff0c;并不是所有的浏览器都支持</li><li>八进制&#xff1a;0 开头表示八进制</li><li>十六进制&#xff1a;0x 开头表示十六进制</li></ul> 
<blockquote> 
 <p>注意&#xff1a;使用typeof检查一个Number类型的数据时&#xff08;包括NaN 和 Infinity&#xff09;&#xff0c;会返回&#34;number&#34;。</p> 
</blockquote> 
<h3><a id="235Boolean_300"></a>2.3.5、Boolean</h3> 
<p>布尔型也被称为逻辑值类型或者真假值类型。</p> 
<p>布尔型只能够取真&#xff08;true&#xff09;和假&#xff08;false&#xff09;两种数值。除此以外&#xff0c; 其它的值都不被支持。</p> 
<h3><a id="236Undefined_306"></a>2.3.6、Undefined</h3> 
<p>Undefined 类型只有一个值&#xff0c;即特殊的 undefined。</p> 
<p>在使用 var 声明变量但未对其加以初始化时&#xff0c;这个变量的值就是 undefined。</p> 
<blockquote> 
 <p>注意&#xff1a;使用typeof对没有初始化和没有声明的变量&#xff0c;会返回“undefined”。</p> 
</blockquote> 
<h3><a id="237Null_314"></a>2.3.7、Null</h3> 
<p>Null 类型是第二个只有一个值的数据类型&#xff0c;这个特殊的值是 null。</p> 
<p>undefined值实际上是由null值衍生出来的&#xff0c;所以如果比较undefined和null是否相等&#xff0c;会返回true。</p> 
<blockquote> 
 <p>注意&#xff1a;从语义上看null表示的是一个空的对象&#xff0c;所以使用typeof检查null会返回一个Object。</p> 
</blockquote> 
<h2><a id="24_322"></a>2.4、强制类型转换</h2> 
<p>强制类型转换指将一个数据类型强制转换为其它的数据类型。一般是指&#xff0c;将其它的数据类型转换为String、Number、Boolean。</p> 
<h3><a id="241String_326"></a>2.4.1、转换为String类型</h3> 
<p>将其它数值转换为字符串有三种方式&#xff1a;toString()、String()、 拼串。</p> 
<ul><li> <p>方式一&#xff1a;调用被转换数据类型的toString()方法&#xff0c;该方法不会影响到原变量&#xff0c;它会将转换的结果返回&#xff0c;但是注意&#xff1a;null和undefined这两个值没有toString()方法&#xff0c;如果调用它们的方法&#xff0c;会报错。</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> a <span class="token operator">&#61;</span> <span class="token number">123</span><span class="token punctuation">;</span>
a <span class="token operator">&#61;</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> </li><li> <p>方式二&#xff1a;调用String()函数&#xff0c;并将被转换的数据作为参数传递给函数&#xff0c;使用String()函数做强制类型转换时&#xff0c;对于Number和Boolean实际上就是调用的toString()方法&#xff0c;但是对于null和undefined&#xff0c;就不会调用toString()方法&#xff0c;它会将 null 直接转换为 “null”&#xff0c;将 undefined 直接转换为 “undefined”。</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> a <span class="token operator">&#61;</span> <span class="token number">123</span><span class="token punctuation">;</span>
a <span class="token operator">&#61;</span> <span class="token function">String</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> b <span class="token operator">&#61;</span> undefined<span class="token punctuation">;</span>
b <span class="token operator">&#61;</span> <span class="token function">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> c <span class="token operator">&#61;</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
c <span class="token operator">&#61;</span> <span class="token function">String</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> </li><li> <p>方式三&#xff1a;为任意的数据类型 <code>&#43;&#34;&#34;</code></p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> a <span class="token operator">&#61;</span> <span class="token number">123</span><span class="token punctuation">;</span>
a <span class="token operator">&#61;</span> a <span class="token operator">&#43;</span> <span class="token string">&#34;&#34;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> </li></ul> 
<h3><a id="242Number_367"></a>2.4.2、转换为Number类型</h3> 
<p>有三个函数可以把非数值转换为数值&#xff1a;Number()、parseInt() 和parseFloat()。Number()可以用来转换任意类型的数据&#xff0c;而后两者只能用于转换字符串。parseInt()只会将字符串转换为整数&#xff0c;而parseFloat()可以将字符串转换为浮点数。</p> 
<ul><li> <p>方式一&#xff1a;使用Number()函数</p> 
  <ul><li>字符串 --&gt; 数字 
    <ul><li>如果是纯数字的字符串&#xff0c;则直接将其转换为数字</li><li>如果字符串中有非数字的内容&#xff0c;则转换为NaN</li><li>如果字符串是一个空串或者是一个全是空格的字符串&#xff0c;则转换为0</li></ul> </li><li>布尔 --&gt; 数字 
    <ul><li>true 转成 1</li><li>false 转成 0</li></ul> </li><li>null --&gt; 数字 
    <ul><li>null 转成 0</li></ul> </li><li>undefined --&gt; 数字 
    <ul><li>undefined 转成 NaN</li></ul> </li></ul> </li><li> <p>方式二&#xff1a;这种方式专门用来对付字符串&#xff0c;parseInt() 把一个字符串转换为一个整数</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> a <span class="token operator">&#61;</span> <span class="token string">&#34;123&#34;</span><span class="token punctuation">;</span>
a <span class="token operator">&#61;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> </li><li> <p>方式三&#xff1a;这种方式专门用来对付字符串&#xff0c;parseFloat() 把一个字符串转换为一个浮点数</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> a <span class="token operator">&#61;</span> <span class="token string">&#34;123.456&#34;</span><span class="token punctuation">;</span>
a <span class="token operator">&#61;</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> </li></ul> 
<blockquote> 
 <p>注意&#xff1a;如果对非String使用parseInt()或parseFloat()&#xff0c;它会先将其转换为String然后在操作</p> 
</blockquote> 
<h3><a id="243Boolean_405"></a>2.4.3、转换为Boolean类型</h3> 
<p>将其它的数据类型转换为Boolean&#xff0c;只能使用Boolean()函数。</p> 
<ul><li>使用Boolean()函数 
  <ul><li>数字 —&gt; 布尔 
    <ul><li>除了0和NaN&#xff0c;其余的都是true</li></ul> </li><li>字符串 —&gt; 布尔 
    <ul><li>除了空串&#xff0c;其余的都是true</li></ul> </li><li>null和undefined都会转换为false</li><li>对象也会转换为true</li></ul> </li></ul> 
<h2><a id="25_417"></a>2.5、运算符</h2> 
<p>运算符也叫操作符&#xff0c;通过运算符可以对一个或多个值进行运算并获取运算结果。</p> 
<p>比如&#xff1a;typeof就是运算符&#xff0c;可以来获得一个值的类型&#xff0c;它会将该值的类型以字符串的形式返回&#xff08;number string boolean undefined object&#xff09;</p> 
<h3><a id="251_423"></a>2.5.1、算术运算符</h3> 
<p>算术运算符用于表达式计算。</p> 
<p>y&#61;5&#xff0c;下面的表格解释了这些算术运算符&#xff1a;</p> 
<table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">例子</th><th align="left">x 运算结果</th><th align="left">y 运算结果</th><th align="left">在线实例</th></tr></thead><tbody><tr><td align="left">&#43;</td><td align="left">加法</td><td align="left">x&#61;y&#43;2</td><td align="left">7</td><td align="left">5</td><td align="left"><a href="https://www.runoob.com/try/try.php?filename&#61;tryjs_oper_add">实例 »</a></td></tr><tr><td align="left">-</td><td align="left">减法</td><td align="left">x&#61;y-2</td><td align="left">3</td><td align="left">5</td><td align="left"><a href="https://www.runoob.com/try/try.php?filename&#61;tryjs_oper_sub">实例 »</a></td></tr><tr><td align="left">*</td><td align="left">乘法</td><td align="left">x&#61;y*2</td><td align="left">10</td><td align="left">5</td><td align="left"><a href="https://www.runoob.com/try/try.php?filename&#61;tryjs_oper_mult">实例 »</a></td></tr><tr><td align="left">/</td><td align="left">除法</td><td align="left">x&#61;y/2</td><td align="left">2.5</td><td align="left">5</td><td align="left"><a href="https://www.runoob.com/try/try.php?filename&#61;tryjs_oper_div">实例 »</a></td></tr><tr><td align="left">%</td><td align="left">取模&#xff08;求余数&#xff09;</td><td align="left">x&#61;y%2</td><td align="left">1</td><td align="left">5</td><td align="left"><a href="https://www.runoob.com/try/try.php?filename&#61;tryjs_oper_mod">实例 »</a></td></tr><tr><td align="left">&#43;&#43;</td><td align="left">自增</td><td align="left">x&#61;&#43;&#43;y<br />x&#61;y&#43;&#43;</td><td align="left">6<br />5</td><td align="left">6<br />6</td><td align="left"><a href="https://www.runoob.com/try/try.php?filename&#61;tryjs_oper_incr">实例 »</a><br /><a href="https://www.runoob.com/try/try.php?filename&#61;tryjs_oper_incr2">实例 »</a></td></tr><tr><td align="left">–</td><td align="left">自减</td><td align="left">x&#61;–y<br />x&#61;y–</td><td align="left">4<br />5</td><td align="left">4<br />4</td><td align="left"><a href="https://www.runoob.com/try/try.php?filename&#61;tryjs_oper_decr"> 实例 »</a><br /><a href="https://www.runoob.com/try/try.php?filename&#61;tryjs_oper_decr2">实例 »</a></td></tr></tbody></table> 
<h3><a id="252_439"></a>2.5.2、关系运算符</h3> 
<p>关系运算符在逻辑语句中使用&#xff0c;以测定变量或值是否相等。</p> 
<p>x&#61;5&#xff0c;下面的表格解释了比较运算符&#xff1a;</p> 
<table><thead><tr><th>运算符</th><th>描述</th><th>比较</th><th>返回值</th><th>实例</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td><td>x&gt;8</td><td><em>false</em></td><td><a href="https://www.runoob.com/try/try.php?filename&#61;tryjs_comparison8">实例 »</a></td></tr><tr><td>&lt;</td><td>小于</td><td>x&lt;8</td><td><em>true</em></td><td><a href="https://www.runoob.com/try/try.php?filename&#61;tryjs_comparison9">实例 »</a></td></tr><tr><td>&gt;&#61;</td><td>大于或等于</td><td>x&gt;&#61;8</td><td><em>false</em></td><td><a href="https://www.runoob.com/try/try.php?filename&#61;tryjs_comparison10">实例 »</a></td></tr><tr><td>&lt;&#61;</td><td>小于或等于</td><td>x&lt;&#61;8</td><td><em>true</em></td><td><a href="https://www.runoob.com/try/try.php?filename&#61;tryjs_comparison11">实例 »</a></td></tr></tbody></table> 
<h3><a id="253_452"></a>2.5.3、赋值运算符</h3> 
<p>赋值运算符用于给 JavaScript 变量赋值。</p> 
<p>x&#61;10 和 y&#61;5&#xff0c;下面的表格解释了赋值运算符&#xff1a;</p> 
<table><thead><tr><th align="left">运算符</th><th align="left">例子</th><th align="left">等同于</th><th align="left">运算结果</th><th align="left">在线实例</th></tr></thead><tbody><tr><td align="left">&#61;</td><td align="left">x&#61;y</td><td align="left"></td><td align="left">x&#61;5</td><td align="left"><a href="https://www.runoob.com/try/try.php?filename&#61;tryjs_oper_equal">实例 »</a></td></tr><tr><td align="left">&#43;&#61;</td><td align="left">x&#43;&#61;y</td><td align="left">x&#61;x&#43;y</td><td align="left">x&#61;15</td><td align="left"><a href="https://www.runoob.com/try/try.php?filename&#61;tryjs_oper_plusequal">实例 »</a></td></tr><tr><td align="left">-&#61;</td><td align="left">x-&#61;y</td><td align="left">x&#61;x-y</td><td align="left">x&#61;5</td><td align="left"><a href="https://www.runoob.com/try/try.php?filename&#61;tryjs_oper_minequal">实例 »</a></td></tr><tr><td align="left">*&#61;</td><td align="left">x*&#61;y</td><td align="left">x&#61;x*y</td><td align="left">x&#61;50</td><td align="left"><a href="https://www.runoob.com/try/try.php?filename&#61;tryjs_oper_multequal">实例 »</a></td></tr><tr><td align="left">/&#61;</td><td align="left">x/&#61;y</td><td align="left">x&#61;x/y</td><td align="left">x&#61;2</td><td align="left"><a href="https://www.runoob.com/try/try.php?filename&#61;tryjs_oper_divequal">实例 »</a></td></tr><tr><td align="left">%&#61;</td><td align="left">x%&#61;y</td><td align="left">x&#61;x%y</td><td align="left">x&#61;0</td><td align="left"><a href="https://www.runoob.com/try/try.php?filename&#61;tryjs_oper_modequal">实例 »</a></td></tr></tbody></table> 
<h3><a id="254_467"></a>2.5.4、逻辑运算符</h3> 
<p>逻辑运算符用于测定变量或值之间的逻辑。</p> 
<p>给定 x&#61;6 以及 y&#61;3&#xff0c;下表解释了逻辑运算符&#xff1a;</p> 
<table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">and</td><td align="left">(x &lt; 10 &amp;&amp; y &gt; 1) 为 true</td></tr><tr><td align="left">||</td><td align="left">or</td><td align="left">(x&#61;&#61;5 || y&#61;&#61;5) 为 false</td></tr><tr><td align="left">!</td><td align="left">not</td><td align="left">!(x&#61;&#61;y) 为 true</td></tr></tbody></table> 
<p>关于逻辑运算符我们可以具体探讨一下&#xff1a;</p> 
<ul><li>&amp;&amp; 与&#xff1a;&amp;&amp;可以对符号两侧的值进行与运算并返回结果&#xff0c;运算规则如下&#xff1a; 
  <ul><li>两个值中只要有一个值为false&#xff0c;就返回false&#xff0c;只有两个值都为true时&#xff0c;才会返回true</li><li>JS中的“与”属于短路的与&#xff0c;如果第一个值为false&#xff0c;则不会检查第二个值</li><li>非布尔值时&#xff1a;如果两个都为true&#xff0c;则返回第二个值&#xff0c;如果两个值中有false&#xff0c;则返回靠前的false的值</li></ul> </li><li>|| 或&#xff1a;||可以对符号两侧的值进行或运算并返回结果&#xff0c;运算规则如下&#xff1a; 
  <ul><li>两个值中只要有一个true&#xff0c;就返回true&#xff0c;只有两个值都为false&#xff0c;才会返回false</li><li>JS中的“或”属于短路的或&#xff0c;如果第一个值为true&#xff0c;则不会检查第二个值</li><li>非布尔值时&#xff1a;如果两个都为false &#xff0c;则返回第二个值&#xff0c;如果两个值中有true&#xff0c;则返回靠前的true的值</li></ul> </li><li>! 非&#xff1a;!可以用来对一个值进行非运算&#xff0c;所谓非运算就是对一个布尔值进行取反操作&#xff0c;true变false&#xff0c;false变true&#xff0c;运算规则如下&#xff1a; 
  <ul><li>如果对一个值进行两次取反&#xff0c;它不会变化</li><li>非布尔值时&#xff1a;先会将其转换为布尔值&#xff0c;然后再取反&#xff0c;所以我们可以利用该特点&#xff0c;来将一个其它的数据类型转换为布尔值&#xff0c;可以为一个任意数据类型取两次反&#xff0c;来将其转换为布尔值&#xff0c;原理和Boolean()函数一样</li></ul> </li></ul> 
<h3><a id="255_493"></a>2.5.5、比较运算符</h3> 
<p>比较运算符用来比较两个值是否相等&#xff0c;如果相等会返回true&#xff0c;否则返回false。</p> 
<ul><li>使用 <strong>&#61;&#61;</strong> 来做相等运算 
  <ul><li>当使用&#61;&#61;来比较两个值时&#xff0c;如果值的类型不同&#xff0c;则会自动进行类型转换&#xff0c;将其转换为相同的类型&#xff0c;然后在比较</li></ul> </li><li>使用 <strong>!&#61;</strong> 来做不相等运算 
  <ul><li>不相等用来判断两个值是否不相等&#xff0c;如果不相等返回true&#xff0c;否则返回false&#xff0c;不相等也会对变量进行自动的类型转换&#xff0c;如果转换后相等它也会返回false</li></ul> </li><li>使用 <strong>&#61;&#61;&#61;</strong> 来做全等运算 
  <ul><li>用来判断两个值是否全等&#xff0c;它和相等类似&#xff0c;不同的是它不会做自动的类型转换&#xff0c;如果两个值的类型不同&#xff0c;直接返回false</li></ul> </li><li>使用 <strong>!&#61;&#61;</strong> 来做不全等运算 
  <ul><li>用来判断两个值是否不全等&#xff0c;它和不等类似&#xff0c;不同的是它不会做自动的类型转换&#xff0c;如果两个值的类型不同&#xff0c;直接返回true</li></ul> </li></ul> 
<h3><a id="256_506"></a>2.5.6、条件运算符</h3> 
<p>JavaScript 还包含了基于某些条件对变量进行赋值的条件运算符。</p> 
<p>语法&#xff1a;<code>variablename&#61;(condition)?value1:value2;</code></p> 
<p>举例&#xff1a;<code>result&#61;(age&lt;18)?&#34;年龄太小&#34;:&#34;年龄合适&#34;;</code></p> 
<p>执行流程&#xff1a;如果condition为true&#xff0c;则执行语句1&#xff0c;并返回执行结果&#xff0c;如果为false&#xff0c;则执行语句2&#xff0c;并返回执行结果。</p> 
<h3><a id="257_516"></a>2.5.7、逗号运算符</h3> 
<p>使用逗号可以在一条语句中执行多次操作。</p> 
<p>比如&#xff1a;var num1&#61;1, num2&#61;2, num3&#61;3;</p> 
<p>使用逗号运算符分隔的语句会从左到右顺 序依次执行。</p> 
<h2><a id="26_524"></a>2.6、运算符优先级</h2> 
<p>运算符优先级由上到下依次减小&#xff0c;对于同级运算符&#xff0c;采用从左向右依次执行的方法。</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/695dff6b3d3117760c6fba7c0b09895b.png" alt="image-20201013115557984" /></p> 
<h2><a id="27_530"></a>2.7、代码块</h2> 
<h3><a id="271_532"></a>2.7.1、语句</h3> 
<p>前边我所说表达式和运算符等内容可以理解成是我们一 门语言中的单词&#xff0c;短语。而语句&#xff08;statement&#xff09;就是我们这个语言中一句一句完 整的话了。语句是一个程序的基本单位&#xff0c;JavaScript的程序就是由一条一条语句构成的&#xff0c;每一条语句使用;结尾。</p> 
<p>JavaScript中的语句默认是由上至下顺序执行的&#xff0c;但是我们也可以通过一些流程控制语句来控制语句的执行顺序。</p> 
<h3><a id="272_538"></a>2.7.2、代码块</h3> 
<p>代码块是在大括号 {} 中所写的语句&#xff0c;以此将多条语句的集合视为一条语句来使用。</p> 
<p>例如&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">var</span> a <span class="token operator">&#61;</span> <span class="token number">123</span><span class="token punctuation">;</span>
    a<span class="token operator">&#43;&#43;</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<p>我们一般使用代码块将需要一起执行的语句进行分组&#xff0c;需要注意的是&#xff0c;代码块结尾不需要加 分号。</p> 
<h2><a id="28_554"></a>2.8、条件语句</h2> 
<p>条件语句是通过判断指定表达式的值来决定执行还是跳过某些语句&#xff0c;最基本的条件语句&#xff1a;</p> 
<ul><li>if…else</li><li>switch…case</li></ul> 
<h3><a id="281ifelse_561"></a>2.8.1、if…else</h3> 
<p>if…else语句是一种最基本的控制语句&#xff0c;它让JavaScript可以有条件的执行语句。</p> 
<ul><li> <p>第一种形式&#xff1a;</p> <pre><code class="prism language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span>
    statement
</code></pre> <pre><code class="prism language-javascript"><span class="token keyword">var</span> age <span class="token operator">&#61;</span> <span class="token number">16</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;未成年&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> </li><li> <p>第二种形式&#xff1a;</p> <pre><code class="prism language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span>
    statement
<span class="token keyword">else</span>
    statement
</code></pre> <pre><code class="prism language-javascript"><span class="token keyword">var</span> age <span class="token operator">&#61;</span> <span class="token number">16</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;未成年&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;已成年&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> </li><li> <p>第三种形式&#xff1a;</p> <pre><code class="prism language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>expression1<span class="token punctuation">)</span>
    statement
<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>expression2<span class="token punctuation">)</span>
    statement
<span class="token keyword">else</span>
    statement    
</code></pre> <pre><code class="prism language-javascript"><span class="token keyword">var</span> age <span class="token operator">&#61;</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;小于18岁了&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&#61;&#61;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;已经18岁了&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;大于18岁了&#34;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre> </li></ul> 
<h3><a id="282switchcase_619"></a>2.8.2、switch…case</h3> 
<p>switch…case是另一种流程控制语句。</p> 
<p>switch语句更适用于多条分支使用同一条语句的情况。</p> 
<p>语法格式&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">switch</span> <span class="token punctuation">(</span>语句<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">case</span> 表达式<span class="token number">1</span><span class="token punctuation">:</span>
        语句<span class="token operator">...</span>
    <span class="token keyword">case</span> 表达式<span class="token number">2</span><span class="token punctuation">:</span>
        语句<span class="token operator">...</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        语句<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre> 
<blockquote> 
 <p>注意&#xff1a;需要注意的是一旦符合case的条件程序会一直运行到结束&#xff0c;所以我们一般会在case中添加break作为语句的结束。</p> 
</blockquote> 
<p><strong>案例演示1&#xff1a;根据today的数值&#xff0c;输出今天是星期几。</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> today <span class="token operator">&#61;</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>today<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;星期一&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;星期二&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;星期三&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;星期四&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;星期五&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;星期六&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;星期日&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;输入错误&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<p><strong>案例演示2&#xff1a;根据month的数值&#xff0c;输出对应月份的天数&#xff0c;2月默认28天。</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> month <span class="token operator">&#61;</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>month<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>
    <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>
    <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>
    <span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">:</span>
    <span class="token keyword">case</span> <span class="token number">10</span><span class="token punctuation">:</span>
    <span class="token keyword">case</span> <span class="token number">12</span><span class="token punctuation">:</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;31天&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>
    <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>
    <span class="token keyword">case</span> <span class="token number">9</span><span class="token punctuation">:</span>
    <span class="token keyword">case</span> <span class="token number">11</span><span class="token punctuation">:</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;30天&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;28天&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;输入错误&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h2><a id="29_699"></a>2.9、循环语句</h2> 
<p>循环语句和条件语句一样&#xff0c;也是基本的控制语句&#xff0c;只要满足一定的条件将会一直执行&#xff0c;最基本的循环语句&#xff1a;</p> 
<ul><li>while</li><li>do…while</li><li>for</li></ul> 
<h3><a id="291while_707"></a>2.9.1、while</h3> 
<p>while语句是一个最基本的循环语句&#xff0c;while语句也被称为while循环。</p> 
<p>语法格式&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    语句<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre> 
<p><strong>案例演示&#xff1a;输出1-10。</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> i <span class="token operator">&#61;</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;&#61;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">&#43;&#43;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="292dowhile_729"></a>2.9.2、do…while</h3> 
<p>do…while和while非常类似&#xff0c;只不过它会在循环的尾部而不是顶部检查表达式的值&#xff0c;因此&#xff0c;do…while循环会至少执行一次。相比于while&#xff0c;do…while的使用情况并不 是很多。</p> 
<p>语法格式&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">do</span><span class="token punctuation">{<!-- --></span>
    语句<span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><strong>案例演示&#xff1a;输出1-10。</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> i <span class="token operator">&#61;</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">do</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">&#43;&#43;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;&#61;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<h3><a id="293for_751"></a>2.9.3、for</h3> 
<p>for语句也是循环控制语句&#xff0c;我们也称它为for循环。大部分循环都会有一个计数器用以控制循环执行的次数&#xff0c; 计数器的三个关键操作是初始化、检测和更新。for语句 就将这三步操作明确为了语法的一部分。</p> 
<p>语法格式&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化表达式 <span class="token punctuation">;</span> 条件表达式 <span class="token punctuation">;</span> 更新表达式<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    语句<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre> 
<p><strong>案例演示&#xff1a;输出1-10。</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">&#61;</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;&#61;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">&#43;&#43;</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="294_771"></a>2.9.4、跳转控制</h3> 
<ul><li>break&#xff1a;结束最近的一次循环&#xff0c;可以在循环和switch语句中使用。</li><li>continue&#xff1a;结束本次循环&#xff0c;执行下一次循环&#xff0c;只能在循环中使用。</li></ul> 
<p>那如果我们想要跳出多层循环或者跳到指定位置该怎么办呢&#xff1f;可以为循环语句创建一个label&#xff0c;来标识当前的循环&#xff0c;如下例子&#xff1a;</p> 
<pre><code class="prism language-javascript">outer<span class="token punctuation">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">&#61;</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">&#43;&#43;</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">&#61;</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">&#43;&#43;</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&#61;&#61;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token keyword">break</span> outer<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
<h2><a id="210_789"></a>2.10、对象基础</h2> 
<h3><a id="2101_791"></a>2.10.1、概述</h3> 
<p>Object类型&#xff0c;我们也称为一个对象&#xff0c;是JavaScript中的引用数据类型。它是一种复合值&#xff0c;它将很多值聚合到一起&#xff0c;可以通过名字访问这些值。对象也可以看做是属性的无序集合&#xff0c;每个属性都是一个名/值对。对象除了可以创建自有属性&#xff0c;还可以通过从一个名为原型的对象那里继承属性。除了字符串、数字、true、false、null和undefined之外&#xff0c;JavaScript中的值都是对象。</p> 
<h3><a id="2102_795"></a>2.10.2、创建对象</h3> 
<p>创建对象有两种方式&#xff1a;</p> 
<ul><li> <p>第一种方式&#xff1a;</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> person <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>name <span class="token operator">&#61;</span> <span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>age <span class="token operator">&#61;</span> <span class="token number">18</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> </li><li> <p>第二种方式&#xff1a;</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> person <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">18</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> </li></ul> 
<h3><a id="2103_818"></a>2.10.3、访问属性</h3> 
<p>访问属性的两种方式&#xff1a;</p> 
<ul><li> <p>第一种方式&#xff1a;使用 . 来访问</p> <pre><code class="prism language-javascript">对象<span class="token punctuation">.</span>属性名
</code></pre> </li><li> <p>第二种方式&#xff1a;使用 [] 来访问</p> <pre><code class="prism language-javascript">对象<span class="token punctuation">[</span>‘属性名’<span class="token punctuation">]</span>
</code></pre> </li></ul> 
<h3><a id="2104_834"></a>2.10.4、删除属性</h3> 
<p>删除对象的属性可以使用delete关键字&#xff0c;格式如下&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">delete</span> 对象<span class="token punctuation">.</span>属性名
</code></pre> 
<p>案例演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> person <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>name <span class="token operator">&#61;</span> <span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>age <span class="token operator">&#61;</span> <span class="token number">18</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">delete</span> person<span class="token punctuation">.</span>name
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<h3><a id="2105_854"></a>2.10.5、遍历对象</h3> 
<p>枚举遍历对象中的属性&#xff0c;可以使用for … in语句循环&#xff0c;对象中有几个属性&#xff0c;循环体就会执行几次。</p> 
<p>语法格式&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> 变量 <span class="token keyword">in</span> 对象<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>

<span class="token punctuation">}</span>
</code></pre> 
<p>案例演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> person <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;zhangsan&#34;</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">18</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> personKey <span class="token keyword">in</span> person<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">var</span> personVal <span class="token operator">&#61;</span> person<span class="token punctuation">[</span>personKey<span class="token punctuation">]</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>personKey <span class="token operator">&#43;</span> <span class="token string">&#34;:&#34;</span> <span class="token operator">&#43;</span> personVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="2106_880"></a>2.10.6、数据类型梳理</h3> 
<h4><a id="21061_882"></a>2.10.6.1、基本数据类型</h4> 
<p>JavaScript中的变量可能包含两种不同数据类型的值&#xff1a;基本数据类型和引用数据类型。</p> 
<p>JavaScript中一共有5种基本数据类型&#xff1a;String、Number、 Boolean、Undefined、Null。</p> 
<p>基本数据类型的值是无法修改的&#xff0c;是不可变的。</p> 
<p>基本数据类型的比较是值的比较&#xff0c;也就是只要两个变量的值相等&#xff0c;我们就认为这两个变量相等。</p> 
<h4><a id="21062_892"></a>2.10.6.2、引用数据类型</h4> 
<p>引用类型的值是保存在内存中的对象。</p> 
<p>当一个变量是一个对象时&#xff0c;实际上变量中保存的并不是对象本身&#xff0c;而是对象的引用。</p> 
<p>当从一个变量向另一个变量复制引用类型的值时&#xff0c;会将对象的引用复制到变量中&#xff0c;并不是创建一个新的对象。</p> 
<p>这时&#xff0c;两个变量指向的是同一个对象。因此&#xff0c;改变其中一个变量会影响另一个。</p> 
<h3><a id="2107_902"></a>2.10.7、栈和堆梳理</h3> 
<p>JavaScript在运行时数据是保存到栈内存和堆内存当中的。</p> 
<p>简单来说栈内存用来保存变量和基本类型&#xff0c;堆内存是用来保存对象。</p> 
<p>我们在声明一个变量时&#xff0c;实际上就是在栈内存中创建了一个空间用来保存变量。</p> 
<p>如果是基本类型则在栈内存中直接保存&#xff0c;如果是引用类型则会在堆内存中保存&#xff0c;变量中保存的实际上对象在堆内存中的地址。</p> 
<p>当我们写了下边这几句代码的时候&#xff0c;栈内存和堆内存的结构如下&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> a <span class="token operator">&#61;</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">&#61;</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> c <span class="token operator">&#61;</span> <span class="token string">&#34;hello&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> d <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>name<span class="token punctuation">:</span> <span class="token string">&#39;sunwukong&#39;</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre> 
<p>栈的特点&#xff1a;先进后出&#xff0c;后进先出</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/48487fd2d563e9a30beaf4fe8273285f.png" alt="image-20201014085429553" /></p> 
<h2><a id="211_925"></a>2.11、函数</h2> 
<h3><a id="2111_927"></a>2.11.1、概述</h3> 
<p>函数是由一连串的子程序&#xff08;语句的集合&#xff09;所组成的&#xff0c;可以被外部程序调用&#xff0c;向函数传递参数之后&#xff0c;函数可以返回一定的值。</p> 
<p>通常情况下&#xff0c;JavaScript代码是自上而下执行的&#xff0c;不过函数体内部的代码则不是这样。如果只是对函数进行了声明&#xff0c;其中的代码并不会执行&#xff0c;只有在调用函数时才会执行函数体内部的代码。</p> 
<p>这里要注意的是JavaScript中的函数也是一个对象&#xff0c;使用typeof检查一个函数对象时&#xff0c;会返回function。</p> 
<h3><a id="2112_935"></a>2.11.2、函数创建</h3> 
<ul><li> <p>使用 <strong>函数对象</strong> 来创建一个函数&#xff08;几乎不用&#xff09;</p> <p>语法格式&#xff1a;</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> 函数名 <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#34;执行语句&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> <p>示例代码&#xff1a;</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> fun <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#34;console.log(&#39;这是我的第一个函数&#39;);&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> </li><li> <p>使用 <strong>函数声明</strong> 来创建一个函数&#xff08;比较常用&#xff09;</p> <p>语法格式&#xff1a;</p> <pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">[</span>形参<span class="token number">1</span><span class="token punctuation">,</span>形参<span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">,</span>形参<span class="token constant">N</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    语句<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre> <p>示例代码&#xff1a;</p> <pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;这是我的第二个函数&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> </li><li> <p>使用 <strong>函数表达式</strong> 来创建一个函数&#xff08;比较常用&#xff09;</p> <p>语法格式&#xff1a;</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">函数名</span>  <span class="token operator">&#61;</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">[</span>形参<span class="token number">1</span><span class="token punctuation">,</span>形参<span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">,</span>形参<span class="token constant">N</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    语句<span class="token operator">...</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre> <p>示例代码&#xff1a;</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">fun</span>  <span class="token operator">&#61;</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;这是我的第三个函数&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> </li></ul> 
<h3><a id="2113_987"></a>2.11.3、函数调用</h3> 
<ul><li> <p>对于无参函数调用&#xff1a;</p> <pre><code class="prism language-javascript"><span class="token comment">// 函数声明</span>
<span class="token keyword">var</span> <span class="token function-variable function">fun</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;哈哈&#xff0c;我执行啦&#xff01;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 函数调用</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> </li><li> <p>对于有参函数调用&#xff1a;</p> <pre><code class="prism language-javascript"><span class="token comment">// 函数声明</span>
<span class="token keyword">var</span> <span class="token function-variable function">sum</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">var</span> result <span class="token operator">&#61;</span> num1 <span class="token operator">&#43;</span> num2<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;num1 &#43; num2 &#61; &#34;</span> <span class="token operator">&#43;</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 函数调用</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> </li></ul> 
<h3><a id="2114_1014"></a>2.11.4、函数参数</h3> 
<ul><li>JS中的所有的参数传递都是按值传递的&#xff0c;也就是说把函数外部的值赋值给函数内部的参数&#xff0c;就和把值从一个变量赋值给另一个变量是一样的&#xff0c;在调用函数时&#xff0c;可以在()中指定实参&#xff08;实际参数&#xff09;&#xff0c;实参将会赋值给函数中对应的形参</li><li>调用函数时&#xff0c;解析器不会检查实参的类型&#xff0c;所以要注意&#xff0c;是否有可能会接收到非法的参数&#xff0c;如果有可能&#xff0c;则需要对参数进行类型的检查&#xff0c;函数的实参可以是任意的数据类型</li><li>调用函数时&#xff0c;解析器也不会检查实参的数量&#xff0c;多余实参不会被赋值&#xff0c;如果实参的数量少于形参的数量&#xff0c;则没有对应实参的形参将是undefined</li></ul> 
<h3><a id="2115_1020"></a>2.11.5、函数返回值</h3> 
<p>可以使用 return 来设置函数的返回值&#xff0c;return后的值将会作为函数的执行结果返回&#xff0c;可以定义一个变量&#xff0c;来接收该结果。</p> 
<blockquote> 
 <p>注意&#xff1a;在函数中return后的语句都不会执行&#xff0c;如果return语句后不跟任何值就相当于返回一个undefined&#xff0c;如果函数中不写return&#xff0c;则也会返回undefined&#xff0c;return后可以跟任意类型的值</p> 
</blockquote> 
<p>语法格式&#xff1a;return 值</p> 
<p>案例演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">return</span> num1 <span class="token operator">&#43;</span> num2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> result <span class="token operator">&#61;</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<h3><a id="2116_1039"></a>2.11.6、嵌套函数</h3> 
<p>嵌套函数&#xff1a;在函数中声明的函数就是嵌套函数&#xff0c;嵌套函数只能在当前函数中可以访问&#xff0c;在当前函数外无法访问。</p> 
<p>案例演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">fu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">function</span> <span class="token function">zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;我是儿子&#34;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">fu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<h3><a id="2117_1057"></a>2.11.7、匿名函数</h3> 
<p>匿名函数&#xff1a;没有名字的函数就是匿名函数&#xff0c;它可以让一个变量来接收&#xff0c;也就是用 “函数表达式” 方式创建和接收。</p> 
<p>案例演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">fun</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#34;我是一个匿名函数&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<h3><a id="2118_1071"></a>2.11.8、立即执行函数</h3> 
<p>立即执行函数&#xff1a;函数定义完&#xff0c;立即被调用&#xff0c;这种函数叫做立即执行函数&#xff0c;立即执行函数往往只会执行一次。</p> 
<p>案例演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#34;我是一个匿名函数&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<h3><a id="2119_1083"></a>2.11.9、对象中的函数</h3> 
<p>对象的属性值可以是任何的数据类型&#xff0c;也可以是个函数。</p> 
<p>如果一个函数作为一个对象的属性保存&#xff0c;那么我们称这个函数是这个对象的方法&#xff0c;调用这个函数就说调用对象的方法&#xff08;method&#xff09;。</p> 
<blockquote> 
 <p>注意&#xff1a;方法和函数只是名称上的区别&#xff0c;没有其它别的区别</p> 
</blockquote> 
<p>案例演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> person <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;zhangsan&#34;</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    sayHello<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">&#43;</span> <span class="token string">&#34; hello&#34;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<h3><a id="21110this_1105"></a>2.11.10、this对象</h3> 
<p>解析器在调用函数每次都会向函数内部传递进一个隐含的参数&#xff0c;这个隐含的参数就是this&#xff0c;this指向的是一个对象&#xff0c;这个对象我们称为函数执行的上下文对象&#xff0c;根据函数的调用方式的不同&#xff0c;this会指向不同的对象</p> 
<ul><li>以函数的形式调用时&#xff0c;this永远都是window</li><li>以方法的形式调用时&#xff0c;this就是调用方法的那个对象</li></ul> 
<p>案例演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token comment">//创建一个全局变量name</span>
<span class="token keyword">var</span> name <span class="token operator">&#61;</span> <span class="token string">&#34;全局变量name&#34;</span><span class="token punctuation">;</span>

<span class="token comment">//创建一个函数</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//创建一个对象</span>
<span class="token keyword">var</span> obj <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span>
    sayName<span class="token punctuation">:</span> fun
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//我们希望调用obj.sayName()时可以输出obj的名字而不是全局变量name的名字</span>
obj<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<h2><a id="212_1133"></a>2.12、对象进阶</h2> 
<h3><a id="2121_1135"></a>2.12.1、用工厂方法创建对象</h3> 
<p>我们之前已经学习了如何创建一个对象&#xff0c;那我们要是想要创建多个对象又该怎么办&#xff1f;聪明的同学可能会说&#xff0c;直接在写几个对象不就好了吗&#xff1f;比如下边的代码&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> person1 <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    sayName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> person2 <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span>
    sayName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> person3 <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;沙和尚&#34;</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    sayName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person3<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p>的确&#xff0c;上述代码确实可以创建多个对象&#xff0c;但是&#xff0c;这样的解决方案真的好吗&#xff1f;对于少量对象可能使用&#xff0c;我们假设说&#xff0c;要用循环创建1000个对象&#xff0c;那你这种办法似乎就没用了&#xff0c;我们可以这么做&#xff0c;如下代码&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token comment">// 使用工厂模式创建对象</span>
<span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">// 创建新的对象</span>
    <span class="token keyword">var</span> obj <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置对象属性</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">&#61;</span> <span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>age <span class="token operator">&#61;</span> <span class="token number">18</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置对象方法</span>
    obj<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//返回新的对象</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> person1 <span class="token operator">&#61;</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> person2 <span class="token operator">&#61;</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> person3 <span class="token operator">&#61;</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person3<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p>上述代码看起来更加简洁&#xff0c;但是你会发现每一个人都是孙悟空&#xff0c;我们要是想要给每一个人不同的属性值&#xff0c;请参考&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token comment">// 使用工厂模式创建对象</span>
<span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">// 创建新的对象</span>
    <span class="token keyword">var</span> obj <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置对象属性</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">&#61;</span> name<span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>age <span class="token operator">&#61;</span> age<span class="token punctuation">;</span>
    <span class="token comment">// 设置对象方法</span>
    obj<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//返回新的对象</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> person1 <span class="token operator">&#61;</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> person2 <span class="token operator">&#61;</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> person3 <span class="token operator">&#61;</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">&#34;沙和尚&#34;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person3<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p>现在再看上述代码&#xff0c;发现好像已经完美的解决了创建多个对象的难题&#xff0c;那我们是不是可以用循环批量创建1000个对象了呢&#xff1f;那我们就来试试&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token comment">// 使用工厂模式创建对象</span>
<span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">// 创建新的对象</span>
    <span class="token keyword">var</span> obj <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置对象属性</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">&#61;</span> name<span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>age <span class="token operator">&#61;</span> age<span class="token punctuation">;</span>
    <span class="token comment">// 设置对象方法</span>
    obj<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//返回新的对象</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">&#61;</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;&#61;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">&#43;&#43;</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">var</span> person <span class="token operator">&#61;</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">&#34;person&#34;</span> <span class="token operator">&#43;</span> i<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<p>这样我们就实现了批量创建对象的功能&#xff0c;至于对象的名称和年龄&#xff0c;我们可以通过名称数组和年龄数组来获取&#xff0c;但这并不是我们本小节的重点&#xff0c;我们就忽略了。</p> 
<h3><a id="2122_1249"></a>2.12.2、用构造函数创建对象</h3> 
<p>在前一节中&#xff0c;我们学会了使用工厂模式创建对象&#xff0c;但是&#xff0c;你会发现我们所创建的对象类型都是Object&#xff0c;具体代码如下&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token comment">// 使用工厂模式创建对象</span>
<span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">// 创建新的对象</span>
    <span class="token keyword">var</span> obj <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置对象属性</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">&#61;</span> name<span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>age <span class="token operator">&#61;</span> age<span class="token punctuation">;</span>
    <span class="token comment">// 设置对象方法</span>
    obj<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//返回新的对象</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">&#61;</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;&#61;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">&#43;&#43;</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">var</span> person <span class="token operator">&#61;</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">&#34;person&#34;</span> <span class="token operator">&#43;</span> i<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/5c87b435343a519cbd7badefc46dbeb2.png" alt="image-20201016083849601" /></p> 
<p>那这有问题吗&#xff1f;看起来有&#xff0c;看起来好像又没有&#xff0c;每创建一个都是对象&#xff0c;但是在实际生活中&#xff0c;人应该是一个确定的类别&#xff0c;属于人类&#xff0c;对象是一个笼统的称呼&#xff0c;万物皆对象&#xff0c;它并不能确切的指明当前对象是人类&#xff0c;那我们要是既想实现创建对象的功能&#xff0c;同时又能明确所创建出来的对象是人类&#xff0c;那么似乎问题就得到了解决&#xff0c;这就用到了构造函数&#xff0c;每一个构造函数你都可以理解为一个类别&#xff0c;用构造函数所创建的对象我们也成为类的实例&#xff0c;那我们来看看是如何做的&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token comment">// 使用构造函数来创建对象</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">// 设置对象的属性</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">&#61;</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">&#61;</span> age<span class="token punctuation">;</span>
    <span class="token comment">// 设置对象的方法</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> person1 <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> person2 <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> person3 <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#34;沙和尚&#34;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person3<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/7705f04f8327430a55a646c735cd6e33.png" alt="image-20201016085351603" /></p> 
<p>那这构造函数到底是什么呢&#xff1f;我来解释一下&#xff1a;</p> 
<p>构造函数&#xff1a;构造函数就是一个普通的函数&#xff0c;创建方式和普通函数没有区别&#xff0c;不同的是构造函数习惯上首字母大写&#xff0c;构造函数和普通函数的还有一个区别就是调用方式的不同&#xff0c;普通函数是直接调用&#xff0c;而构造函数需要使用new关键字来调用。</p> 
<p>那构造函数是怎么执行创建对象的过程呢&#xff1f;我再来解释一下&#xff1a;</p> 
<ol><li>调用构造函数&#xff0c;它会立刻创建一个新的对象</li><li>将新建的对象设置为函数中this&#xff0c;<strong>在构造函数中可以使用this来引用新建的对象</strong></li><li>逐行执行函数中的代码</li><li>将新建的对象作为返回值返回</li></ol> 
<p>你会发现构造函数有点类似工厂方法&#xff0c;但是它创建对象和返回对象都给我们隐藏了&#xff0c;使用同一个构造函数创建的对象&#xff0c;我们称为一类对象&#xff0c;也将一个构造函数称为一个类。我们将通过一个构造函数创建的对象&#xff0c;称为是该类的实例。</p> 
<p>现在&#xff0c;this又出现了一种新的情况&#xff0c;为了不让大家混淆&#xff0c;我再来梳理一下&#xff1a;</p> 
<ul><li>当以函数的形式调用时&#xff0c;this是window</li><li>当以方法的形式调用时&#xff0c;谁调用方法this就是谁</li><li>当以构造函数的形式调用时&#xff0c;this就是新创建的那个对象</li></ul> 
<p>我们可以使用 instanceof 运算符检查一个对象是否是一个类的实例&#xff0c;它返回true或false</p> 
<p>语法格式&#xff1a;</p> 
<pre><code class="prism language-javascript">对象 <span class="token keyword">instanceof</span> 构造函数
</code></pre> 
<p>案例演示&#xff1a;</p> 
<pre><code class="prism language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<h3><a id="2123_1335"></a>2.12.3、原型</h3> 
<p>在前一节中&#xff0c;我们学习了使用构造函数的方式进行创建对象&#xff0c;但是&#xff0c;它还是存在一个问题&#xff0c;那就是&#xff0c;你会发现&#xff0c;每一个对象的属性不一样这是一定的&#xff0c;但是它的方法似乎好像是一样的&#xff0c;如果我创建1000个对象&#xff0c;那岂不是内存中就有1000个相同的方法&#xff0c;那要是有10000个&#xff0c;那对内存的浪费可不是一点半点的&#xff0c;我们有没有什么好的办法解决&#xff0c;没错&#xff0c;我们可以把函数抽取出来&#xff0c;作为全局函数&#xff0c;在构造函数中直接引用就可以了&#xff0c;上代码&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token comment">// 使用构造函数来创建对象</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">// 设置对象的属性</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">&#61;</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">&#61;</span> age<span class="token punctuation">;</span>
    <span class="token comment">// 设置对象的方法</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">&#61;</span> sayName
<span class="token punctuation">}</span>

<span class="token comment">// 抽取方法为全局函数</span>
<span class="token keyword">function</span> <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> person1 <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> person2 <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> person3 <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#34;沙和尚&#34;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

person1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person3<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/05f5cdbe83821c5ab8262a4b0d3096fe.png" alt="image-20201016085859719" /></p> 
<p>但是&#xff0c;在全局作用域中定义函数却不是一个好的办法&#xff0c;为什么呢&#xff1f;因为&#xff0c;如果要是涉及到多人协作开发一个项目&#xff0c;别人也有可能叫sayName这个方法&#xff0c;这样在工程合并的时候就会导致一系列的问题&#xff0c;污染全局作用域&#xff0c;那该怎么办呢&#xff1f;有没有一种方法&#xff0c;我只在Person这个类的全局对象中添加一个函数&#xff0c;然后在类中引用&#xff1f;答案肯定是有的&#xff0c;这就需要原型对象了&#xff0c;我们先看看怎么做的&#xff0c;然后在详细讲解原型对象。</p> 
<pre><code class="prism language-javascript"><span class="token comment">// 使用构造函数来创建对象</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">// 设置对象的属性</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">&#61;</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">&#61;</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在Person类的原型对象中添加方法</span>
Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> person1 <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> person2 <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> person3 <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#34;沙和尚&#34;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

person1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person3<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/7a39d722ae8c06f66b47748bfc3bfa9b.png" alt="image-20201016091223379" /></p> 
<p>那原型&#xff08;prototype&#xff09;到底是什么呢&#xff1f;</p> 
<p>我们所创建的每一个函数&#xff0c;解析器都会向函数中添加一个属性prototype&#xff0c;这个属性对应着一个对象&#xff0c;这个对象就是我们所谓的原型对象&#xff0c;即显式原型&#xff0c;原型对象就相当于一个公共的区域&#xff0c;所有同一个类的实例都可以访问到这个原型对象&#xff0c;我们可以将对象中共有的内容&#xff0c;统一设置到原型对象中。</p> 
<p>如果函数作为普通函数调用prototype没有任何作用&#xff0c;当函数以构造函数的形式调用时&#xff0c;它所创建的对象中都会有一个隐含的属性&#xff0c;指向该构造函数的原型对象&#xff0c;我们可以通过<code>__proto__</code>&#xff08;隐式原型&#xff09;来访问该属性。当我们访问对象的一个属性或方法时&#xff0c;它会先在对象自身中寻找&#xff0c;如果有则直接使用&#xff0c;如果没有则会去原型对象中寻找&#xff0c;如果找到则直接使用。</p> 
<p>以后我们创建构造函数时&#xff0c;可以将这些对象共有的属性和方法&#xff0c;统一添加到构造函数的原型对象中&#xff0c;这样不用分别为每一个对象添加&#xff0c;也不会影响到全局作用域&#xff0c;就可以使每个对象都具有这些属性和方法了。</p> 
<h3><a id="2124_1399"></a>2.12.4、原型链</h3> 
<p>访问一个对象的属性时&#xff0c;先在自身属性中查找&#xff0c;找到返回&#xff0c; 如果没有&#xff0c;再沿着__proto__这条链向上查找&#xff0c;找到返回&#xff0c;如果最终没找到&#xff0c;返回undefined&#xff0c;这就是原型链&#xff0c;又称隐式原型链&#xff0c;它的作用就是查找对象的属性(方法)。</p> 
<p>我们使用一张图来梳理一下上一节原型案例的代码&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/34f5a7f9ab460f148c64a66e8632634b.png" alt="image-20201016092628653" /></p> 
<blockquote> 
 <p>注意&#xff1a;Object对象是所有对象的祖宗&#xff0c;Object的原型对象指向为null&#xff0c;也就是没有原型对象</p> 
</blockquote> 
<h3><a id="2125toString_1409"></a>2.12.5、toString方法</h3> 
<p>toString()函数用于将当前对象以字符串的形式返回。该方法属于Object对象&#xff0c;由于所有的对象都&#34;继承&#34;了Object的对象实例&#xff0c;因此几乎所有的实例对象都可以使用该方法&#xff0c;所有主流浏览器均支持该函数。</p> 
<pre><code class="prism language-javascript"><span class="token comment">// 使用构造函数来创建对象</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">// 设置对象的属性</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">&#61;</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">&#61;</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//创建对象的一个实例对象</span>
<span class="token keyword">var</span> p <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#34;张三&#34;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/bf8a0035d661c976f986b7bfa8f62bad.png" alt="image-20201025104527044" /></p> 
<p>JavaScript的许多内置对象都重写了该函数&#xff0c;以实现更适合自身的功能需要。</p> 
<table><thead><tr><th>类型</th><th>行为描述</th></tr></thead><tbody><tr><td>String</td><td>返回 String 对象的值。</td></tr><tr><td>Number</td><td>返回 Number 的字符串表示。</td></tr><tr><td>Boolean</td><td>如果布尔值是true&#xff0c;则返回&#34;true&#34;。否则返回&#34;false&#34;。</td></tr><tr><td>Object<br />(默认)</td><td>返回&#34;[object ObjectName]&#34;&#xff0c;其中 ObjectName 是对象类型的名称。</td></tr><tr><td>Array</td><td>将 Array 的每个元素转换为字符串&#xff0c;并将它们依次连接起来&#xff0c;两个元素之间用英文逗号作为分隔符进行拼接。</td></tr><tr><td>Date</td><td>返回日期的文本表示。</td></tr><tr><td>Error</td><td>返回一个包含相关错误信息的字符串。</td></tr><tr><td>Function</td><td>返回如下格式的字符串&#xff0c;其中 functionname 是一个函数的名称<br />此函数的 toString 方法被调用&#xff1a; “function functionname() { [native code] }”</td></tr></tbody></table> 
<p>注意&#xff1a;这里我们只是演示toString()方法&#xff0c;其它的一些没有讲到的知识后边会将&#xff0c;我们只看效果就可。</p> 
<pre><code class="prism language-javascript"><span class="token comment">// 字符串</span>
<span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;Hello&#34;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 数字</span>
<span class="token keyword">var</span> num <span class="token operator">&#61;</span> <span class="token number">15.26540</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 布尔</span>
<span class="token keyword">var</span> bool <span class="token operator">&#61;</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bool<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Object</span>
<span class="token keyword">var</span> obj <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>name<span class="token punctuation">:</span> <span class="token string">&#34;张三&#34;</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 数组</span>
<span class="token keyword">var</span> array <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token string">&#34;CodePlayer&#34;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 日期</span>
<span class="token keyword">var</span> date <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2013</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 错误</span>
<span class="token keyword">var</span> error <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#34;自定义错误信息&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 函数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/203f4736a13382fc30ab2054631445b5.png" alt="image-20201025111357084" /></p> 
<h3><a id="2126hasOwnProperty_1478"></a>2.12.6、hasOwnProperty方法</h3> 
<p>前边章节我们学过&#xff0c;如何遍历一个对象所有的属性和值&#xff0c;那我们要是判断当前对象是否包含指定的属性或方法可以使用 in 运算符来检查&#xff0c;如下代码演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token comment">// 创造一个构造函数</span>
<span class="token keyword">function</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
<span class="token punctuation">}</span>

<span class="token comment">// 向MyClass的原型中添加一个name属性</span>
MyClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">&#61;</span> <span class="token string">&#34;我是原型中的名字&#34;</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个MyClass的实例</span>
<span class="token keyword">var</span> mc <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mc<span class="token punctuation">.</span>age <span class="token operator">&#61;</span> <span class="token number">18</span><span class="token punctuation">;</span>

<span class="token comment">// 使用in检查对象中是否含有某个属性时&#xff0c;如果对象中没有但是原型中有&#xff0c;也会返回true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;age&#34;</span> <span class="token keyword">in</span> mc<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;name&#34;</span> <span class="token keyword">in</span> mc<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/55a9e1b3a9e36a0e344877c964e436e4.png" alt="image-20201016094121739" /></p> 
<p>如果我只想要检查自身对象是否含有某个方法或属性&#xff0c;我们可以使用Object的hasOwnProperty()方法&#xff0c;它返回一个布尔值&#xff0c;判断对象是否包含特定的自身&#xff08;非继承&#xff09;属性。如下代码演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token comment">// 创造一个构造函数</span>
<span class="token keyword">function</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
<span class="token punctuation">}</span>

<span class="token comment">// 向MyClass的原型中添加一个name属性</span>
MyClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">&#61;</span> <span class="token string">&#34;我是原型中的名字&#34;</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个MyClass的实例</span>
<span class="token keyword">var</span> mc <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mc<span class="token punctuation">.</span>age <span class="token operator">&#61;</span> <span class="token number">18</span><span class="token punctuation">;</span>

<span class="token comment">// 使用in检查对象中是否含有某个属性时&#xff0c;如果对象中没有但是原型中有&#xff0c;也会返回true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;age&#34;</span> <span class="token keyword">in</span> mc<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;name&#34;</span> <span class="token keyword">in</span> mc<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 可以使用对象的hasOwnProperty()来检查对象自身中是否含有该属性&#xff0c;使用该方法只有当对象自身中含有属性时&#xff0c;才会返回true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#34;name&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/dd0f3747a1ca02da2d727f344cb2372f.png" alt="image-20201016094051484" /></p> 
<p>有同学可能会有疑问&#xff0c;我的这个MyClass类对象中没有hasOwnProperty这个方法啊&#xff0c;它是哪来的&#xff1f;对了&#xff0c;就是原型中的&#xff0c;在执行方法的时候它会通过原型链进行查找&#xff0c;这个方法是Object的特有方法&#xff0c;如下代码演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token comment">// 创造一个构造函数</span>
<span class="token keyword">function</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
<span class="token punctuation">}</span>

<span class="token comment">// 向MyClass的原型中添加一个name属性</span>
MyClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">&#61;</span> <span class="token string">&#34;我是原型中的名字&#34;</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个MyClass的实例</span>
<span class="token keyword">var</span> mc <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mc<span class="token punctuation">.</span>age <span class="token operator">&#61;</span> <span class="token number">18</span><span class="token punctuation">;</span>

<span class="token comment">// 检查当前对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#34;hasOwnProperty&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 检查当前对象的原型对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#34;hasOwnProperty&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 检查当前对象的原型对象的原型对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#34;hasOwnProperty&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/9ba1a18eb6768ea310dbf0c77b72dde0.png" alt="image-20201016094021988" /></p> 
<h3><a id="2127_1550"></a>2.12.7、对象继承</h3> 
<p>前边我们一直在说继承&#xff0c;那什么是继承&#xff1f;它有什么作用&#xff1f;如何实现继承&#xff1f;将会是本章节探讨的问题。</p> 
<p>面向对象的语言有一个标志&#xff0c;那就是它们都有类的概念&#xff0c;而通过类可以创建任意多个具有相同属性和方法的对象。但是在JavaScript中没有类的概念&#xff0c;前边我们说所的类只是我们自己这么叫&#xff0c;大家要清楚。因此它的对象也与基于类的对象有所不同。实际上&#xff0c;JavaScript语言是通过一种叫做原型&#xff08;prototype&#xff09;的方式来实现面向对象编程的。</p> 
<p>那实现继承有一个最大的好处就是子对象可以使用父对象的属性和方法&#xff0c;从而简化了一些代码。</p> 
<p>JavaScript有六种非常经典的对象继承方式&#xff0c;但是我们只学习前三种&#xff1a;</p> 
<ul><li><strong>原型链继承</strong></li><li><strong>借用构造函数继承</strong></li><li><strong>组合继承&#xff08;重要&#xff09;</strong></li><li>原型式继承</li><li>寄生式继承</li><li>寄生组合式继承</li></ul> 
<h4><a id="21271_1567"></a>2.12.7.1、原型链继承</h4> 
<p><strong>核心思想&#xff1a;</strong> 子类型的原型为父类型的一个实例对象</p> 
<p><strong>基本做法&#xff1a;</strong></p> 
<ol><li>定义父类型构造函数</li><li>给父类型的原型添加方法</li><li>定义子类型的构造函数</li><li>创建父类型的对象赋值给子类型的原型</li><li>将子类型原型的构造属性设置为子类型</li><li>给子类型原型添加方法</li><li>创建子类型的对象: 可以调用父类型的方法</li></ol> 
<p><strong>案例演示&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">// 定义父类型构造函数</span>
<span class="token keyword">function</span> <span class="token function">SupperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>supProp <span class="token operator">&#61;</span> <span class="token string">&#39;Supper property&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 给父类型的原型添加方法</span>
SupperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">showSupperProp</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>supProp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 定义子类型的构造函数</span>
<span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subProp <span class="token operator">&#61;</span> <span class="token string">&#39;Sub property&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建父类型的对象赋值给子类型的原型</span>
SubType<span class="token punctuation">.</span>prototype <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">SupperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将子类型原型的构造属性设置为子类型</span>
SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">&#61;</span> SubType<span class="token punctuation">;</span>

<span class="token comment">// 给子类型原型添加方法</span>
SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">showSubProp</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subProp<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 创建子类型的对象: 可以调用父类型的方法</span>
<span class="token keyword">var</span> subType <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
subType<span class="token punctuation">.</span><span class="token function">showSupperProp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
subType<span class="token punctuation">.</span><span class="token function">showSubProp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/bac6a9902796a74b61ed2fd9e959fa44.png" alt="image-20201025114537583" /></p> 
<p><strong>缺点描述&#xff1a;</strong></p> 
<ol><li>原型链继承多个实例的引用类型属性指向相同&#xff0c;一个实例修改了原型属性&#xff0c;另一个实例的原型属性也会被修改</li><li>不能传递参数</li><li>继承单一</li></ol> 
<h4><a id="21272_1624"></a>2.12.7.2、借用构造函数继承</h4> 
<p><strong>核心思想&#xff1a;</strong> 使用.call()和.apply()将父类构造函数引入子类函数&#xff0c;使用父类的构造函数来增强子类实例&#xff0c;等同于复制父类的实例给子类</p> 
<p><strong>基本做法&#xff1a;</strong></p> 
<ol><li>定义父类型构造函数</li><li>定义子类型的构造函数</li><li>给子类型的原型添加方法</li><li>创建子类型的对象然后调用</li></ol> 
<p><strong>案例演示&#xff1a;</strong></p> 
<p>借用构造函数继承的重点就在于SuperType**.call(this, name)**&#xff0c;调用了SuperType构造函数&#xff0c;这样&#xff0c;SubType的每个实例都会将SuperType中的属性复制一份。</p> 
<pre><code class="prism language-javascript"><span class="token comment">// 定义父类型构造函数</span>
<span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">&#61;</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">showSupperName</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义子类型的构造函数</span>
<span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">// 在子类型中调用call方法继承自SuperType</span>
    SuperType<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">&#61;</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 给子类型的原型添加方法</span>
SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">showSubName</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 创建子类型的对象然后调用</span>
<span class="token keyword">var</span> subType <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
subType<span class="token punctuation">.</span><span class="token function">showSupperName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
subType<span class="token punctuation">.</span><span class="token function">showSubName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>subType<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>subType<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/f463d70717ecb12cd6885ae465e21e62.png" alt="image-20201025125050202" /></p> 
<p><strong>缺点描述&#xff1a;</strong></p> 
<ol><li>只能继承父类的实例属性和方法&#xff0c;不能继承原型属性和方法</li><li>无法实现构造函数的复用&#xff0c;每个子类都有父类实例函数的副本&#xff0c;影响性能&#xff0c;代码会臃肿</li></ol> 
<h4><a id="21273_1675"></a>2.12.7.3、组合继承</h4> 
<p><strong>核心思想&#xff1a;</strong> 原型链&#43;借用构造函数的组合继承</p> 
<p><strong>基本做法&#xff1a;</strong></p> 
<ol><li>利用原型链实现对父类型对象的方法继承</li><li>利用super()借用父类型构建函数初始化相同属性</li></ol> 
<p><strong>案例演示&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">&#61;</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">&#61;</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">&#61;</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 为了得到父类型的实例属性和方法</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">&#61;</span> price<span class="token punctuation">;</span> <span class="token comment">// 添加子类型私有的属性</span>
<span class="token punctuation">}</span>

Student<span class="token punctuation">.</span>prototype <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 为了得到父类型的原型属性和方法</span>
Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">&#61;</span> Student<span class="token punctuation">;</span> <span class="token comment">// 修正constructor属性指向</span>
Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setPrice</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> <span class="token comment">// 添加子类型私有的方法 </span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">&#61;</span> price<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> s <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">15000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>age<span class="token punctuation">,</span> s<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">16000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>age<span class="token punctuation">,</span> s<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/14c2cf0500c8dbb4a4584180dc4da6eb.png" alt="image-20201025131516264" /></p> 
<p><strong>缺点描述&#xff1a;</strong></p> 
<ol><li>父类中的实例属性和方法既存在于子类的实例中&#xff0c;又存在于子类的原型中&#xff0c;不过仅是内存占用&#xff0c;因此&#xff0c;在使用子类创建实例对象时&#xff0c;其原型中会存在<strong>两份相同的属性和方法</strong> 。</li></ol> 
<blockquote> 
 <p>注意&#xff1a;<strong>这个方法是JavaScript中最常用的继承模式</strong>。</p> 
</blockquote> 
<h3><a id="2128_1722"></a>2.12.8、垃圾回收</h3> 
<p>垃圾回收&#xff08;GC&#xff09;&#xff1a;就像人生活的时间长了会产生垃圾一样&#xff0c;程序运行过程中也会产生垃圾&#xff0c;这些垃圾积攒过多以后&#xff0c;会导致程序运行的速度过慢&#xff0c;所以我们需要一个垃圾回收的机制&#xff0c;来处理程序运行过程中产生垃圾。</p> 
<p>当一个对象没有任何的变量或属性对它进行引用&#xff0c;此时我们将永远无法操作该对象&#xff0c;此时这种对象就是一个垃圾&#xff0c;这种对象过多会占用大量的内存空间&#xff0c;导致程序运行变慢&#xff0c;所以这种垃圾必须进行清理。</p> 
<p>在JS中拥有自动的垃圾回收机制&#xff0c;会自动将这些垃圾对象从内存中销毁&#xff0c;我们不需要也不能进行垃圾回收的操作&#xff0c;我们需要做的只是要将不再使用的对象设置null即可。</p> 
<p>案例演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token comment">// 使用构造函数来创建对象</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">// 设置对象的属性</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">&#61;</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">&#61;</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> person1 <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> person2 <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> person3 <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#34;沙和尚&#34;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

person1 <span class="token operator">&#61;</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
person2 <span class="token operator">&#61;</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
person3 <span class="token operator">&#61;</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre> 
<h2><a id="213_1749"></a>2.13、作用域</h2> 
<p>作用域指一个变量的作用的范围&#xff0c;在JS中一共有两种作用域&#xff1a;</p> 
<ul><li>全局作用域</li><li>函数作用域</li></ul> 
<h3><a id="2131_1756"></a>2.13.1、声明提前</h3> 
<ul><li>变量的声明提前&#xff1a;使用var关键字声明的变量&#xff0c;会在所有的代码执行之前被声明&#xff08;但是不会赋值&#xff09;&#xff0c;但是如果声明变量时不使用var关键字&#xff0c;则变量不会被声明提前</li><li>函数的声明提前&#xff1a;使用函数声明形式创建的函数 function 函数名(){} &#xff0c;它会在所有的代码执行之前就被创建&#xff0c;所以我们可以在函数声明前来调用函数。使用函数表达式创建的函数&#xff0c;不会被声明提前&#xff0c;所以不能在声明前调用</li></ul> 
<h3><a id="2132_1761"></a>2.13.2、作用域</h3> 
<h4><a id="21321_1763"></a>2.13.2.1、全局作用域</h4> 
<ul><li>直接编写在script标签中的JavaScript代码&#xff0c;都在全局作用域</li><li>全局作用域在页面打开时创建&#xff0c;在页面关闭时销毁</li><li>在全局作用域中有一个全局对象window&#xff0c;它代表的是一个浏览器的窗口&#xff0c;它由浏览器创建&#xff0c;我们可以直接使用</li><li>在全局作用域中&#xff1a; 
  <ul><li>创建的变量都会作为window对象的属性保存</li><li>创建的函数都会作为window对象的方法保存</li></ul> </li><li>全局作用域中的变量都是全局变量&#xff0c;在页面的任意的部分都可以访问的到</li></ul> 
<h4><a id="21322_1773"></a>2.13.2.2、函数作用域</h4> 
<ul><li>调用函数时创建函数作用域&#xff0c;函数执行完毕以后&#xff0c;函数作用域销毁</li><li>每调用一次函数就会创建一个新的函数作用域&#xff0c;它们之间是互相独立的</li><li>在函数作用域中可以访问到全局作用域的变量&#xff0c;在全局作用域中无法访问到函数作用域的变量</li><li>在函数中要访问全局变量可以使用window对象</li><li>作用域链&#xff1a;当在函数作用域操作一个变量时&#xff0c;它会先在自身作用域中寻找&#xff0c;如果有就直接使用&#xff0c;如果没有则向上一级作用域中寻找&#xff0c;直到找到全局作用域&#xff0c;如果全局作用域中依然没有找到&#xff0c;则会报错ReferenceError</li></ul> 
<h3><a id="2133_1781"></a>2.13.3、作用域链</h3> 
<p>多个上下级关系的作用域形成的链&#xff0c;它的方向是从下向上的(从内到外)&#xff0c;查找变量时就是沿着作用域链来查找的。</p> 
<p>查找一个变量的查找规则&#xff1a;</p> 
<ol><li>在当前作用域下的执行上下文中查找对应的属性&#xff0c;如果有直接返回&#xff0c;否则进入2</li><li>在上一级作用域的执行上下文中查找对应的属性&#xff0c;如果有直接返回&#xff0c;否则进入3</li><li>再次执行2的相同操作&#xff0c;直到全局作用域&#xff0c;如果还找不到就抛出找不到的ReferenceError异常</li></ol> 
<h1><a id="_JavaScript_1791"></a>第三章 JavaScript常用对象</h1> 
<h2><a id="31_1793"></a>3.1、数组对象</h2> 
<h3><a id="311_1795"></a>3.1.1、概述</h3> 
<p>数组也是对象的一种&#xff0c;数组是一种用于表达有顺序关系的值的集合的语言结构&#xff0c;也就是同类数据元素的有序集合。</p> 
<p>数组的存储性能比普通对象要好&#xff0c;在开发中我们经常使用数组来存储一些数据。但是在JavaScript中是支持数组可以是不同的元素&#xff0c;这跟JavaScript的弱类型有关&#xff0c;此处不用纠结&#xff0c;我们大多数时候都是相同类型元素的集合。数组内的各个值被称作元素&#xff0c;每一个元素都可以通过索引&#xff08;下标&#xff09;来快速读取&#xff0c;索引是从零开始的整数。</p> 
<p>使用typeof检查一个数组对象时&#xff0c;会返回object。</p> 
<h3><a id="312_1803"></a>3.1.2、创建数组</h3> 
<h4><a id="3121_1805"></a>3.1.2.1、使用对象创建</h4> 
<ul><li> <p>同类型有序数组创建&#xff1a;</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> arr <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token number">1</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token number">2</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token number">3</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token number">4</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token number">5</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token number">6</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token number">7</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token number">8</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token number">9</span><span class="token punctuation">;</span>
</code></pre> </li><li> <p>不同类型有序数组创建&#xff1a;</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> arr <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token number">1</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token string">&#34;2&#34;</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token number">3</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token string">&#34;4&#34;</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token number">5</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token string">&#34;6&#34;</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token number">7</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token string">&#34;8&#34;</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token number">9</span><span class="token punctuation">;</span>
</code></pre> </li></ul> 
<h4><a id="3122_1837"></a>3.1.2.2、使用字面量创建</h4> 
<ul><li> <p>同类型有序数组创建&#xff1a;</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> arr <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre> </li><li> <p>不同类型有序数组创建&#xff1a;</p> <pre><code class="prism language-javascript"><span class="token keyword">var</span> arr <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#34;2&#34;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#34;4&#34;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#34;6&#34;</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">&#34;8&#34;</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre> </li></ul> 
<h3><a id="313_1851"></a>3.1.3、遍历数组</h3> 
<pre><code class="prism language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">&#61;</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">&#43;&#43;</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="314_1859"></a>3.1.4、数组属性</h3> 
<p><strong>constructor属性演示&#xff1a;返回创建数组对象的原型函数</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> arr <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/980c0ed39d3282e2b8e77253c8bf098b.png" alt="image-20201017213941462" /></p> 
<p><strong>length属性演示&#xff1a;设置或返回数组元素的个数</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> arr <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/d5b5c2bc0e188b9d4feec0c58c69c244.png" alt="image-20201017214117638" /></p> 
<h3><a id="315_1879"></a>3.1.5、数组方法</h3> 
<p><strong>push()方法演示&#xff1a;该方法可以向数组的末尾添加一个或多个元素&#xff0c;并返回数组的新的长度</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> arr <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;沙和尚&#34;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#34;唐僧&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;蜘蛛精&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;白骨精&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;玉兔精&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/7aae1c9934e6bba6de27079ceb77ec36.png" alt="image-20201017215218010" /></p> 
<p><strong>pop()方法演示&#xff1a;该方法可以删除数组的最后一个元素&#xff0c;并将被删除的元素作为返回值返回</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> arr <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;沙和尚&#34;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/043cc91f4298568ea371a41dd605ac72.png" alt="image-20201017215359638" /></p> 
<p><strong>unshift()方法演示&#xff1a;该方法向数组开头添加一个或多个元素&#xff0c;并返回新的数组长度</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> arr <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;沙和尚&#34;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">&#34;牛魔王&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;二郎神&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/a5a0ced2f25131ef28b91ce82c35581f.png" alt="image-20201017215527496" /></p> 
<p><strong>shift()方法演示&#xff1a;该方法可以删除数组的第一个元素&#xff0c;并将被删除的元素作为返回值返回</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> arr <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;沙和尚&#34;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/dd77a3a74059c9856680794c3b349bab.png" alt="image-20201017215800977" /></p> 
<p><strong>forEach()方法演示&#xff1a;该方法可以用来遍历数组</strong></p> 
<p>forEach()方法需要一个函数作为参数&#xff0c;像这种函数&#xff0c;由我们创建但是不由我们调用的&#xff0c;我们称为回调函数。数组中有几个元素函数就会执行几次&#xff0c;每次执行时&#xff0c;浏览器会将遍历到的元素&#xff0c;以实参的形式传递进来&#xff0c;我们可以来定义形参&#xff0c;来读取这些内容&#xff0c;浏览器会在回调函数中传递三个参数&#xff1a;</p> 
<ul><li>第一个参数&#xff1a;就是当前正在遍历的元素</li><li>第二个参数&#xff1a;就是当前正在遍历的元素的索引</li><li>第三个参数&#xff1a;就是正在遍历的数组</li></ul> 
<blockquote> 
 <p>注意&#xff1a;这个方法只支持IE8以上的浏览器&#xff0c;IE8及以下的浏览器均不支持该方法&#xff0c;所以如果需要兼容IE8&#xff0c;则不要使用forEach()&#xff0c;还是使用for循环来遍历数组。</p> 
</blockquote> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> arr <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;沙和尚&#34;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value <span class="token operator">&#43;</span> <span class="token string">&#34; #### &#34;</span> <span class="token operator">&#43;</span> index <span class="token operator">&#43;</span> <span class="token string">&#34; #### &#34;</span> <span class="token operator">&#43;</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/23e5a69cb38d91535b27ab372e689258.png" alt="image-20201017220618530" /></p> 
<p><strong>slice()方法演示&#xff1a;该方法可以用来从数组提取指定元素&#xff0c;该方法不会改变元素数组&#xff0c;而是将截取到的元素封装到一个新数组中返回</strong></p> 
<p>参数&#xff1a;</p> 
<ul><li>第一个参数&#xff1a;截取开始的位置的索引&#xff0c;包含开始索引</li><li>第二个参数&#xff1a;截取结束的位置的索引&#xff0c;不包含结束索引&#xff0c;第二个参数可以省略不写&#xff0c;此时会截取从开始索引往后的所有元素</li></ul> 
<blockquote> 
 <p>注意&#xff1a;索引可以传递一个负值&#xff0c;如果传递一个负值&#xff0c;则从后往前计算&#xff0c;-1代表倒数第一个&#xff0c;-2代表倒数第二个。</p> 
</blockquote> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> arr <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;沙和尚&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;唐僧&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;白骨精&#34;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
result <span class="token operator">&#61;</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
result <span class="token operator">&#61;</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/18ad817362706339461665656b5b81bd.png" alt="image-20201018090855439" /></p> 
<p><strong>splice()方法演示&#xff1a;该方法可以用于删除数组中的指定元素&#xff0c;该方法会影响到原数组&#xff0c;会将指定元素从原数组中删除&#xff0c;并将被删除的元素作为返回值返回</strong></p> 
<p>参数&#xff1a;</p> 
<ul><li>第一个参数&#xff1a;表示开始位置的索引</li><li>第二个参数&#xff1a;表示要删除的元素数量</li><li>第三个参数及以后参数&#xff1a;可以传递一些新的元素&#xff0c;这些元素将会自动插入到开始位置索引前边</li></ul> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> arr <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;沙和尚&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;唐僧&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;白骨精&#34;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
result <span class="token operator">&#61;</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#34;牛魔王&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;铁扇公主&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;红孩儿&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/45074ba5bb641f6dc53536e6471f1fd2.png" alt="image-20201018091447071" /></p> 
<p><strong>concat()方法演示&#xff1a;该方法可以连接两个或多个数组&#xff0c;并将新的数组返回&#xff0c;该方法不会对原数组产生影响</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> arr <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;沙和尚&#34;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr2 <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token string">&#34;白骨精&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;玉兔精&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;蜘蛛精&#34;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr3 <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token string">&#34;二郎神&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;太上老君&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;玉皇大帝&#34;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> arr3<span class="token punctuation">,</span> <span class="token string">&#34;牛魔王&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;铁扇公主&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/12c0858ad255003ba9ddd66ebb9a0df2.png" alt="image-20201018122134527" /></p> 
<p><strong>join()方法演示&#xff1a;该方法可以将数组转换为一个字符串&#xff0c;该方法不会对原数组产生影响&#xff0c;而是将转换后的字符串作为结果返回&#xff0c;在join()中可以指定一个字符串作为参数&#xff0c;这个字符串将会成为数组中元素的连接符&#xff0c;如果不指定连接符&#xff0c;则默认使用&#xff0c;作为连接符</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> arr <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;沙和尚&#34;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#34;&#64;-&#64;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/891029712402377b772676696ae3ec72.png" alt="image-20201018122403396" /></p> 
<p><strong>reverse()方法演示&#xff1a;该方法用来反转数组&#xff08;前边的去后边&#xff0c;后边的去前边&#xff09;&#xff0c;该方法会直接修改原数组</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> arr <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;沙和尚&#34;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/e7a4076da2a80e71ea4ce4c6e5010656.png" alt="image-20201018122520134" /></p> 
<p><strong>sort()方法演示&#xff1a;该方法可以用来对数组中的元素进行排序&#xff0c;也会影响原数组&#xff0c;默认会按照Unicode编码进行排序</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> arr <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token string">&#34;b&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;c&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;a&#34;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/59057f1ac69677343efe214d0582f5d7.png" alt="image-20201018123042465" /></p> 
<blockquote> 
 <p>注意&#xff1a;即使对于纯数字的数组&#xff0c;使用sort()排序时&#xff0c;也会按照Unicode编码来排序&#xff0c;所以对数字进排序时&#xff0c;可能会得到错误的结果。</p> 
</blockquote> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> arr <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/248ba29f0450aba65c0f1015b35b6fe3.png" alt="image-20201018123124230" /></p> 
<p>我们可以自己来指定排序的规则&#xff0c;我们可以在sort()添加一个回调函数&#xff0c;来指定排序规则&#xff0c;回调函数中需要定义两个形参&#xff0c;浏览器将会分别使用数组中的元素作为实参去调用回调函数&#xff0c;使用哪个元素调用不确定&#xff0c;但是肯定的是在数组中a一定在b前边&#xff0c;浏览器会根据回调函数的返回值来决定元素的顺序&#xff0c;如下&#xff1a;</p> 
<ul><li>如果返回一个大于0的值&#xff0c;则元素会交换位置</li><li>如果返回一个小于0的值&#xff0c;则元素位置不变</li><li>如果返回一个等于0的值&#xff0c;则认为两个元素相等&#xff0c;也不交换位置</li></ul> 
<p>经过上边的规则&#xff0c;我们可以总结下&#xff1a;</p> 
<ul><li>如果需要升序排列&#xff0c;则返回 a-b</li><li>如果需要降序排列&#xff0c;则返回 b-a</li></ul> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> arr <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/ed84d161d2ae11b8981ea2edae1eabbd.png" alt="image-20201018123008856" /></p> 
<h2><a id="32_2058"></a>3.2、函数对象</h2> 
<h3><a id="321callapply_2060"></a>3.2.1、call()和apply()</h3> 
<p>call()和apply()这两个方法都是函数对象的方法&#xff0c;需要通过函数对象来调用&#xff0c;当对函数调用call()和apply()都会调用函数执行&#xff0c;在调用call()和apply()可以将一个对象指定为第一个参数&#xff0c;此时这个对象将会成为函数执行时的this&#xff0c;call()方法可以将实参在对象之后依次传递&#xff0c;apply()方法需要将实参封装到一个数组中统一传递&#xff0c;如下演示&#xff1a;</p> 
<p><strong>call()方法演示&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;a &#61; &#34;</span> <span class="token operator">&#43;</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;b &#61; &#34;</span> <span class="token operator">&#43;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;fun &#61; &#34;</span> <span class="token operator">&#43;</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;obj&#34;</span><span class="token punctuation">,</span>
    sayName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/9367eeccb7a3dc02fd5827257e5ade96.png" alt="image-20201018124051021" /></p> 
<blockquote> 
 <p>注意&#xff1a;默认fun()函数调用&#xff0c;this指向的是window对象&#xff0c;你可以使用call()调用函数&#xff0c;在调用的时候传入一个对象&#xff0c;这个对象就是this所指向的对象&#xff0c;也就是说&#xff0c;可以自己指定this的指向&#xff0c;然后从第二个参数开始&#xff0c;实参将会依次传递</p> 
</blockquote> 
<p><strong>apply()方法演示&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;a &#61; &#34;</span> <span class="token operator">&#43;</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;b &#61; &#34;</span> <span class="token operator">&#43;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;fun &#61; &#34;</span> <span class="token operator">&#43;</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;obj&#34;</span><span class="token punctuation">,</span>
    sayName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/23760ffdfa7792bce72a94e90b62c3f1.png" alt="image-20201018123915931" /></p> 
<blockquote> 
 <p>注意&#xff1a;默认fun()函数调用&#xff0c;this指向的是window对象&#xff0c;你可以使用apply()调用函数&#xff0c;在调用的时候传入一个对象&#xff0c;这个对象就是this所指向的对象&#xff0c;也就是说&#xff0c;可以自己指定this的指向&#xff0c;然后从第二个参数开始&#xff0c;需要制定一个实参数组进行参数传递</p> 
</blockquote> 
<h3><a id="322this_2114"></a>3.2.2、this指向</h3> 
<ul><li>以函数形式调用时&#xff0c;this永远都是window</li><li>以方法的形式调用时&#xff0c;this是调用方法的对象</li><li>以构造函数的形式调用时&#xff0c;this是新创建的那个对象</li><li>使用call和apply调用时&#xff0c;this是传入的那个指定对象</li></ul> 
<h3><a id="323arguments_2121"></a>3.2.3、arguments参数</h3> 
<p>在调用函数时&#xff0c;浏览器每次都会传递进两个隐含的参数&#xff1a;</p> 
<ol><li>函数的上下文对象&#xff1a; <strong>this</strong></li><li>封装实参的对象&#xff1a; <strong>arguments</strong></li></ol> 
<p>this对象我们已经学习过了&#xff0c;那arguments对象是什么呢&#xff1f;</p> 
<p>arguments是一个类数组对象&#xff0c;它也可以通过索引来操作数据&#xff0c;也可以获取长度&#xff0c;在调用函数时&#xff0c;我们所传递的实参都会在arguments中保存&#xff0c;比如&#xff1a;arguments.length 可以用来获取实参的长度&#xff0c;我们即使不定义形参&#xff0c;也可以通过arguments来使用实参&#xff0c;只不过比较麻烦&#xff0c;例如&#xff1a;</p> 
<ul><li>arguments[0]&#xff1a;表示第一个实参</li><li>arguments[1]&#xff1a;表示第二个实参</li><li>…</li></ul> 
<p>它里边有一个属性叫做callee&#xff0c;这个属性对应一个函数对象&#xff0c;就是当前正在指向的函数的对象。</p> 
<p><strong>arguments对象演示&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">// 通过下标获取第一个参数</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 通过下标获取第二个参数</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取实参的个数</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 看看它的函数对象</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee <span class="token operator">&#61;&#61;</span> fun<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">&#34;Hello&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;World&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/3b55a97ff8f86bdbea0bae14b0298a06.png" alt="image-20201018125309350" /></p> 
<h2><a id="33Date_2158"></a>3.3、Date对象</h2> 
<p>在JavaScript中使用Date对象来表示一个时间&#xff0c;如果直接使用构造函数创建一个Date对象&#xff0c;则会封装为当前代码执行的时间。</p> 
<p><strong>案例演示&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> date <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前日期对象的年份(四位数字年份)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前日期对象的月份(0 ~ 11)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前日期对象的日数(1 ~ 31)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前日期对象的小时(0 ~ 23)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前日期对象的分钟(0 ~ 59)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前日期对象的秒钟(0 ~ 59)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前日期对象的毫秒(0 ~ 999)</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/ee5fd11e5e77b473d3380597b79a4c29.png" alt="image-20201018130252223" /></p> 
<p><strong>更多方法&#xff1a;</strong> <a href="https://www.w3school.com.cn/js/jsref_obj_date.asp">参考网站</a></p> 
<h2><a id="34Math_2181"></a>3.4、Math对象</h2> 
<p>Math和其它的对象不同&#xff0c;它不是一个构造函数&#xff0c;它属于一个工具类不用创建对象&#xff0c;它里边封装了数学运算相关的属性和方法。</p> 
<p><strong>案例演示&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">/*固定值*/</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;PI &#61; &#34;</span> <span class="token operator">&#43;</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;E  &#61; &#34;</span> <span class="token operator">&#43;</span> Math<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*正数*/</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//可以用来计算一个数的绝对值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//可以对一个数进行向上取整&#xff0c;小数位只有有值就自动进1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1.99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//可以对一个数进行向下取整&#xff0c;小数部分会被舍掉</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1.4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//可以对一个数进行四舍五入取整</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*负数*/</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//可以用来计算一个数的绝对值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//可以对一个数进行向上取整&#xff0c;小数部分会被舍掉</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//可以对一个数进行向下取整&#xff0c;小数位只有有值就自动进1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//可以对一个数进行四舍五入取整</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*随机数*/</span>
<span class="token comment">//Math.random()&#xff1a;可以用来生成一个0-1之间的随机数</span>
<span class="token comment">//生成一个0-x之间的随机数&#xff1a;Math.round(Math.random()*x)</span>
<span class="token comment">//生成一个x-y之间的随机数&#xff1a;Math.round(Math.random()*(y-x)&#43;x)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//生成一个0-10之间的随机数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&#43;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//生成一个1-10之间的随机数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*数学运算*/</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//Math.pow(x,y)&#xff1a;返回x的y次幂</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//Math.sqrt(x) &#xff1a;返回x的平方根</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/e533a1267ab2c8fe8d2497baa2cb23fb.png" alt="image-20201018132005284" /></p> 
<p><strong>更多方法&#xff1a;</strong> <a href="https://www.w3school.com.cn/jsref/jsref_obj_math.asp">参考网站</a></p> 
<h2><a id="35String_2220"></a>3.5、String对象</h2> 
<h3><a id="351_2222"></a>3.5.1、概述</h3> 
<p>在JS中为我们提供了三个包装类&#xff0c;通过这三个包装类可以将基本数据类型的数据转换为对象</p> 
<ul><li>String()&#xff1a;可以将基本数据类型字符串转换为String对象</li><li>Number()&#xff1a;可以将基本数据类型的数字转换为Number对象</li><li>Boolean()&#xff1a;可以将基本数据类型的布尔值转换为Boolean对象</li></ul> 
<p>但是注意&#xff1a;我们在实际应用中不会使用基本数据类型的对象&#xff0c;如果使用基本数据类型的对象&#xff0c;在做一些比较时可能会带来一些不可预期的结果&#xff0c;在这一章节中&#xff0c;我们重点介绍String()对象的属性和方法。</p> 
<h3><a id="352_2232"></a>3.5.2、字符串属性</h3> 
<p><strong>constructor属性演示&#xff1a;返回创建字符串对象的原型函数</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;Hello,World!&#34;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/96b81bd4968fcb14ad0575f7d55f1010.png" alt="image-20201018152739858" /></p> 
<p><strong>length属性演示&#xff1a;可以用来获取字符串的长度</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;Hello,World!&#34;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/c0f40802f9a0e11f45574f494c15381c.png" alt="image-20201018152511480" /></p> 
<h3><a id="353_2252"></a>3.5.3、字符串方法</h3> 
<p><strong>charAt()方法演示&#xff1a;该方法可以根据索引获取指定位置的字符</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;Hello,World!&#34;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/762781eebb3617228550594503fc4316.png" alt="image-20201018153002150" /></p> 
<p><strong>charCodeAt()方法演示&#xff1a;该方法获取指定位置字符的字符编码&#xff08;Unicode编码&#xff09;</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;Hello,World!&#34;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/ad3be8e9fb9508f9c930501166be335d.png" alt="image-20201018153218872" /></p> 
<p><strong>concat()方法演示&#xff1a;该方法可以用来连接两个或多个字符串</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;Hello,World!&#34;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&#34;你好&#xff0c;&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;世界&#xff01;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/33dde050d46ecb020361b5c926db7d6b.png" alt="image-20201018153504935" /></p> 
<p><strong>indexof()方法演示&#xff1a;该方法可以检索一个字符串中是否含有指定内容&#xff0c;如果字符串中含有该内容&#xff0c;则会返回其第一次出现的索引&#xff0c;如果没有找到指定的内容&#xff0c;则返回-1&#xff0c;可以指定一个第二个参数&#xff0c;指定开始查找的位置</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;Hello,World!&#34;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#34;o&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#34;o&#34;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/9f06bce7729598899f4b2185ea999f32.png" alt="image-20201018160212146" /></p> 
<p><strong>lastIndexOf()方法演示&#xff1a;该方法的用法和indexOf()一样&#xff0c;不同的是indexOf是从前往后找&#xff0c;而lastIndexOf是从后往前找&#xff0c;也可以指定开始查找的位置</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;Hello,World!&#34;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&#34;o&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&#34;o&#34;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><strong>slice()方法演示&#xff1a;可以从字符串中截取指定的内容&#xff0c;不会影响原字符串&#xff0c;而是将截取到内容返回</strong></p> 
<p>参数&#xff1a;</p> 
<ul><li>第一个参数&#xff1a;开始位置的索引&#xff08;包括开始位置&#xff09;</li><li>第二个参数&#xff1a;结束位置的索引&#xff08;不包括结束位置&#xff09;&#xff0c;如果省略第二个参数&#xff0c;则会截取到后边所有的</li></ul> 
<blockquote> 
 <p>注意&#xff1a;也可以传递一个负数作为参数&#xff0c;负数的话将会从后边计算</p> 
</blockquote> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;Hello,World!&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
result <span class="token operator">&#61;</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
result <span class="token operator">&#61;</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/224c58a44617a2687c8a7b1192d0c10d.png" alt="image-20201018160909634" /></p> 
<p><strong>substring()方法演示&#xff1a;可以用来截取一个字符串&#xff0c;它和slice()类似</strong></p> 
<p>参数&#xff1a;</p> 
<ul><li>第一个参数&#xff1a;开始截取位置的索引&#xff08;包括开始位置&#xff09;</li><li>第二个参数&#xff1a;结束位置的索引&#xff08;不包括结束位置&#xff09;&#xff0c;如果省略第二个参数&#xff0c;则会截取到后边所有的</li></ul> 
<blockquote> 
 <p>注意&#xff1a;不同的是这个方法不能接受负值作为参数&#xff0c;如果传递了一个负值&#xff0c;则默认使用0&#xff0c;而且它还自动调整参数的位置&#xff0c;如果第二个参数小于第一个&#xff0c;则自动交换</p> 
</blockquote> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;Hello,World!&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
result <span class="token operator">&#61;</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
result <span class="token operator">&#61;</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/3fd21d1ce6e521c3d809c43cffee13f0.png" alt="image-20201018160942481" /></p> 
<p><strong>substr()方法演示&#xff1a;该方法用来截取字符串</strong></p> 
<p>参数&#xff1a;</p> 
<ul><li>第一个参数&#xff1a;截取开始位置的索引</li><li>第二个参数&#xff1a;截取的长度</li></ul> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;Hello,World!&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/a2e08ece31ebafc8158b8361b12626ba.png" alt="image-20201018161859192" /></p> 
<p><strong>split()方法演示&#xff1a;该方法可以将一个字符串拆分为一个数组&#xff0c;需要一个字符串作为参数&#xff0c;将会根据该字符串去拆分数组</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;Hello,World!&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#34;,&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/e3d890ba555951588bb43b629ecf1966.png" alt="image-20201018162029011" /></p> 
<p><strong>toUpperCase()方法演示&#xff1a;将一个字符串转换为大写并返回</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;Hello,World!&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/422f98ce2a511c228816c8043c8095b3.png" alt="image-20201018162118218" /></p> 
<p><strong>toLowerCase()方法演示&#xff1a;将一个字符串转换为小写并返回</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;Hello,World!&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/2dfc8bed3884f0db0360d80d76ce1b05.png" alt="image-20201018162241087" /></p> 
<h2><a id="36RegExp_2386"></a>3.6、RegExp对象</h2> 
<h3><a id="361_2388"></a>3.6.1、概述</h3> 
<p>正则表达式用于定义一些字符串的规则&#xff0c;计算机可以根据正则表达式&#xff0c;来检查一个字符串是否符合规则&#xff0c;获取将字符串中符合规则的内容提取出来。</p> 
<p>使用typeof检查正则对象&#xff0c;会返回object。</p> 
<h3><a id="362_2394"></a>3.6.2、创建正则对象</h3> 
<h4><a id="3621_2396"></a>3.6.2.1、使用对象创建</h4> 
<p><strong>语法格式&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> 变量名 <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#34;正则表达式&#34;</span><span class="token punctuation">,</span><span class="token string">&#34;匹配模式&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><strong>匹配模式&#xff1a;</strong></p> 
<ul><li>i&#xff1a;忽略大小写</li><li>g&#xff1a;全局匹配模式</li><li>ig&#xff1a;忽略大小写且全局匹配模式</li></ul> 
<p><strong>案例演示&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">// 这个正则表达式可以来检查一个字符串中是否含有a</span>
<span class="token keyword">var</span> reg <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#34;ab&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;i&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;Abc&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/3de3a4f311d8e818a57dddae72dcd497.png" alt="image-20201018163156692" /></p> 
<h4><a id="3622_2422"></a>3.6.2.2、使用字面量创建</h4> 
<p><strong>语法格式&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> 变量名 <span class="token operator">&#61;</span> <span class="token operator">/</span>正则表达式<span class="token operator">/</span>匹配模式<span class="token punctuation">;</span>
</code></pre> 
<p><strong>匹配模式&#xff1a;</strong></p> 
<ul><li>i&#xff1a;忽略大小写</li><li>g&#xff1a;全局匹配模式</li><li>m&#xff1a;执行多行匹配</li></ul> 
<blockquote> 
 <p>注意&#xff1a;可以为一个正则表达式设置多个匹配模式&#xff0c;且顺序无所谓</p> 
</blockquote> 
<p><strong>案例演示&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">// 这个正则表达式可以来检查一个字符串中是否含有a</span>
<span class="token keyword">var</span> reg <span class="token operator">&#61;</span> <span class="token regex">/a/i</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;Abc&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/3de3a4f311d8e818a57dddae72dcd497.png" alt="image-20201018163156692" /></p> 
<h3><a id="363_2450"></a>3.6.3、正则进阶</h3> 
<p><strong>需求信息&#xff1a;创建一个正则表达式&#xff0c;检查一个字符串中是否有a或b</strong></p> 
<p><strong>语法格式&#xff1a;使用 | 表示或者的意思</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">// 这个正则表达式可以来检查一个字符串中是否含有a</span>
<span class="token keyword">var</span> reg <span class="token operator">&#61;</span> <span class="token regex">/a|b|c/</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;Abc&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/c377efe675435e89e278d9a0dc1ff3d3.png" alt="image-20201018164941099" /></p> 
<p>试想一下&#xff0c;如果我们现在要是想要检查一个字符串是否含有小写字母&#xff0c;那我们是不是可以<code>reg &#61; /a|b|c|d|e|f|g ... /;</code>这么写&#xff0c;但是你会发现&#xff0c;好啰嗦啊&#xff0c;怎么这么麻烦呢&#xff0c;有没有一种更简单的方式&#xff0c;答案是肯定的。</p> 
<p><strong>需求信息&#xff1a;创建一个正则表达式&#xff0c;检查一个字符串中是否有字母</strong></p> 
<p><strong>语法格式&#xff1a;[ ] 里的内容也是或的关系</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">// 这个正则表达式可以来检查一个字符串中是否含有字母</span>
<span class="token keyword">var</span> reg <span class="token operator">&#61;</span> <span class="token regex">/[A-z]/</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;Abc&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/f1a2578a46f59e6d39637b115f799062.png" alt="image-20201018171936882" /></p> 
<p><strong>常见组合&#xff1a;</strong></p> 
<ul><li>[a-z]&#xff1a;任意小写字母</li><li>[A-Z]&#xff1a;任意大写字母</li><li>[A-z]&#xff1a;任意字母</li><li>[0-9]&#xff1a;任意数字</li></ul> 
<p><strong>需求信息&#xff1a;创建一个正则表达式&#xff0c;检查一个字符串中是否含有 abc 或 adc 或 aec</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">// 这个正则表达式可以来检查一个字符串中是否含有abc或adc或aec</span>
<span class="token keyword">var</span> reg <span class="token operator">&#61;</span> <span class="token regex">/a[bde]c/</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;abc123&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p>那现在我们已经学会了判断是否包含&#xff0c;那要是判断除了某些字符序列该咋整&#xff0c;只需要这么写<code>[^字符序列]</code></p> 
<p><strong>常见组合&#xff1a;</strong></p> 
<ul><li>[^a-z]&#xff1a;除了任意小写字母</li><li>[^A-Z]&#xff1a;除了任意大写字母</li><li>[^A-z]&#xff1a;除了任意字母</li><li>[^0-9]&#xff1a;除了任意数字</li></ul> 
<p><strong>需求信息&#xff1a;创建一个正则表达式&#xff0c;检查一个字符串中是否除了数字还有其它字母</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">// 这个正则表达式可以来检查一个字符串中是否除了数字还有其它字母</span>
<span class="token keyword">var</span> reg <span class="token operator">&#61;</span> <span class="token regex">/[^0-9]/</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;0123456789&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<h3><a id="364_2518"></a>3.6.4、正则方法</h3> 
<p>这些正则方法其实都是字符串的方法&#xff0c;但是它的参数需要传递正则表达式&#xff0c;在这里&#xff0c;我就先称为正则方法。</p> 
<p><strong>split()方法演示&#xff1a;该方法可以将一个字符串拆分为一个数组&#xff0c;方法中可以传递一个正则表达式作为参数&#xff0c;这样方法将会根据正则表达式去拆分字符串&#xff0c;这个方法即使不指定全局匹配&#xff0c;也会全都插分</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;1a2b3c4d5e6f7&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/[A-z]/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/63fc37cd99f403812856c9c60ddb2c08.png" alt="image-20201018212920528" /></p> 
<p><strong>search()方法演示&#xff1a;该方法可以搜索字符串中是否含有指定内容&#xff0c;如果搜索到指定内容&#xff0c;则会返回第一次出现的索引&#xff0c;如果没有搜索到返回-1&#xff0c;它可以接受一个正则表达式作为参数&#xff0c;然后会根据正则表达式去检索字符串&#xff0c;serach()只会查找第一个&#xff0c;即使设置全局匹配也没用</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;hello abc hello aec afc&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex">/a[bef]c/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/8ba6eb1153172af98f7b11e8f3b0b0f9.png" alt="image-20201018213217017" /></p> 
<p><strong>match()方法演示&#xff1a;该方法可以根据正则表达式&#xff0c;从一个字符串中将符合条件的内容提取出来&#xff0c;默认情况下我们的match()只会找到第一个符合要求的内容&#xff0c;找到以后就停止检索&#xff0c;我们可以设置正则表达式为全局匹配模式&#xff0c;这样就会匹配到所有的内容&#xff0c;可以为一个正则表达式设置多个匹配模式&#xff0c;且顺序无所谓&#xff0c;match()会将匹配到的内容封装到一个数组中返回&#xff0c;即使只查询到一个结果</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;1a2a3a4a5e6f7A8B9C&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-z]/ig</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/691bd30df6aa462310da2ffecac54eb7.png" alt="image-20201018213447809" /></p> 
<p><strong>replace()方法演示&#xff1a;该方法可以将字符串中指定内容替换为新的内容&#xff0c;默认只会替换第一个&#xff0c;但是可以设置全局匹配替换全部</strong></p> 
<p>参数&#xff1a;</p> 
<ul><li>第一个参数&#xff1a;被替换的内容&#xff0c;可以接受一个正则表达式作为参数</li><li>第二个参数&#xff1a;新的内容</li></ul> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;1a2a3a4a5e6f7A8B9C&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">&#61;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[a-z]/gi</span><span class="token punctuation">,</span> <span class="token string">&#34;&#64;_&#64;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/588f6ab348d21f0bcd080929ca09d10c.png" alt="image-20201018213653322" /></p> 
<h3><a id="365_2567"></a>3.6.5、正则量词</h3> 
<p>通过量词可以设置一个内容出现的次数&#xff0c;量词只对它前边的一个内容起作用&#xff0c;如果有多个内容可以使用 <code>()</code> 括起来&#xff0c;常见量词如下&#xff1a;</p> 
<ul><li><code>{n}</code> &#xff1a;正好出现n次</li><li><code>{m,}</code> &#xff1a;出现m次及以上</li><li><code>{m,n}</code> &#xff1a;出现m-n次</li><li><code>&#43;</code> &#xff1a;至少一个&#xff0c;相当于{1,}</li><li><code>*</code> &#xff1a;0个或多个&#xff0c;相当于{0,}</li><li><code>?</code> &#xff1a;0个或1个&#xff0c;相当于{0,1}</li></ul> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;abbc&#34;</span><span class="token punctuation">;</span>

reg <span class="token operator">&#61;</span> <span class="token regex">/(ab){3}/</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
reg <span class="token operator">&#61;</span> <span class="token regex">/b{3}/</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
reg <span class="token operator">&#61;</span> <span class="token regex">/ab{1,3}c/</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
reg <span class="token operator">&#61;</span> <span class="token regex">/ab{3,}c/</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
reg <span class="token operator">&#61;</span> <span class="token regex">/ab&#43;c/</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
reg <span class="token operator">&#61;</span> <span class="token regex">/ab*c/</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
reg <span class="token operator">&#61;</span> <span class="token regex">/ab?c/</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/fdb8c9ee6adea6a14e18374c788f85e7.png" alt="image-20201018214346309" /></p> 
<h3><a id="366_2606"></a>3.6.6、正则高阶</h3> 
<p>如果我们要检查或者说判断是否以某个字符或者字符序列开头或者结尾就会使用<code>^</code>和<code>$</code>。</p> 
<ul><li><code>^</code> &#xff1a;表示开头&#xff0c;注意它在<code>[^字符序列]</code>表达的意思不一样</li><li><code>$</code> &#xff1a;表示结尾</li></ul> 
<p><strong>需求描述&#xff1a;检查一个字符串中是否以a开头</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;abcabca&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg <span class="token operator">&#61;</span> <span class="token regex">/^a/</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/5c5989022efc8ce11868c4804fc8fc77.png" alt="image-20201018214857304" /></p> 
<p><strong>需求描述&#xff1a;检查一个字符串中是否以a结尾</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;abcabca&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg <span class="token operator">&#61;</span> <span class="token regex">/a$/</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/9a455bcd1ce063d8fa63dd522febef83.png" alt="image-20201018214953184" /></p> 
<p>那如果我们想要检查一个字符串中是否含有<code>.</code>和<code>\</code>就会使用转义字符</p> 
<ul><li><code>\.</code> &#xff1a;表示<code>.</code></li><li><code>\\</code> &#xff1a;表示<code>\</code></li></ul> 
<blockquote> 
 <p>注意&#xff1a;使用构造函数时&#xff0c;由于它的参数是一个字符串&#xff0c;而<code>\</code>是字符串中转义字符&#xff0c;如果要使用<code>\</code>则需要使用<code>\\</code>来代替</p> 
</blockquote> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> reg1 <span class="token operator">&#61;</span> <span class="token regex">/\./</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg2 <span class="token operator">&#61;</span> <span class="token regex">/\\/</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg3 <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#34;\\.&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg4 <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#34;\\\\&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p>除了以上两种特殊的字符&#xff0c;其实还有很多如下所示&#xff1a;</p> 
<ul><li><code>\w</code> &#xff1a;任意字母、数字、_&#xff0c;相当于[A-z0-9_]</li><li><code>\W</code> &#xff1a;除了字母、数字、_&#xff0c;相当于[^A-z0-9_]</li><li><code>\d</code> &#xff1a;任意的数字&#xff0c;相当于<code>[0-9]</code></li><li><code>\D</code> &#xff1a;除了任意的数字&#xff0c;相当于<code>[^0-9]</code></li><li><code>\s</code> &#xff1a;空格</li><li><code>\S</code> &#xff1a;除了空格</li><li><code>\b</code> &#xff1a;单词边界</li><li><code>\B</code> &#xff1a;除了单词边界</li></ul> 
<p>这里边我们就演示最后四个&#xff0c;其它的都比较简单&#xff0c;后边的案例也会涉及&#xff0c;这里就不演示了</p> 
<p><strong>需求描述&#xff1a;创建一个正则表达式&#xff0c;去除掉字符串中的前后的空格</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;  hello child  &#34;</span>
<span class="token keyword">var</span> reg <span class="token operator">&#61;</span> <span class="token regex">/^\s*|\s*$/g</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
str <span class="token operator">&#61;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#34;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/2a12f2a885901b15c8d1bf8cab4cf0d1.png" alt="image-20201018220522294" /></p> 
<p><strong>需求描述&#xff1a;创建一个正则表达式&#xff0c;检查一个字符串中是否含有单词child</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;hello child&#34;</span>
<span class="token keyword">var</span> reg <span class="token operator">&#61;</span> <span class="token regex">/\bchild\b/</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/5722c7e9902b36d90565949787051b76.png" alt="image-20201018220305875" /></p> 
<h3><a id="367_2682"></a>3.6.7、正则案例</h3> 
<h4><a id="3671_2684"></a>3.6.7.1、检查手机号</h4> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> phoneStr <span class="token operator">&#61;</span> <span class="token string">&#34;15131494600&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> phoneReg <span class="token operator">&#61;</span> <span class="token regex">/^1[3-9][0-9]{9}$/</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>phoneReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>phoneStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/8add452c5bd9cef4daaba4ee1cb67bb1.png" alt="image-20201018220305875" /></p> 
<h4><a id="3672_2694"></a>3.6.7.2、检查邮箱号</h4> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> emailStr <span class="token operator">&#61;</span> <span class="token string">&#34;abc.def&#64;163.com&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> emailReg <span class="token operator">&#61;</span> <span class="token regex">/^\w{3,}(\.\w&#43;)*&#64;[A-z0-9]&#43;(\.[A-z]{2,5}){1,2}$/</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>emailReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>emailStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/5ffafe5f8f29c55fd80f9b07fb079c09.png" alt="image-20201018220717578" /></p> 
<h1><a id="_JavaScript_DOM_2704"></a>第四章 JavaScript DOM</h1> 
<h2><a id="41DOM_2706"></a>4.1、DOM概述</h2> 
<p>当网页被加载时&#xff0c;浏览器会创建页面的文档对象模型&#xff08;<strong>D</strong>ocument <strong>O</strong>bject <strong>M</strong>odel&#xff09;。</p> 
<p>HTML <strong>DOM</strong> 模型被结构化为 <strong>对象树</strong> &#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/910bb72bbde0f438991f02a6cda866d7.png" alt="image-20201019104459658" /></p> 
<p>通过这个对象模型&#xff0c;JavaScript 获得创建动态 HTML 的所有力量&#xff1a;</p> 
<ul><li>JavaScript 能改变页面中的所有 HTML 元素</li><li>JavaScript 能改变页面中的所有 HTML 属性</li><li>JavaScript 能改变页面中的所有 CSS 样式</li><li>JavaScript 能删除已有的 HTML 元素和属性</li><li>JavaScript 能添加新的 HTML 元素和属性</li><li>JavaScript 能对页面中所有已有的 HTML 事件作出反应</li><li>JavaScript 能在页面中创建新的 HTML 事件</li></ul> 
<p>换言之&#xff1a;HTML DOM 是关于如何获取、更改、添加或删除 HTML 元素的标准。</p> 
<h2><a id="42DOM_2726"></a>4.2、DOM文档节点</h2> 
<h3><a id="421_2728"></a>4.2.1、节点概述</h3> 
<p>节点Node&#xff0c;是构成我们网页的最基本的组成部分&#xff0c;网页中的每一个部分都可以称为是一个节点。</p> 
<p>比如&#xff1a;html标签、属性、文本、注释、整个文档等都是一个节点。</p> 
<p>虽然都是节点&#xff0c;但是实际上它们的具体类型是不同的。</p> 
<p>比如&#xff1a;标签我们称为元素节点、属性称为属性节点、文本称为 文本节点、文档称为文档节点。</p> 
<p>节点的类型不同&#xff0c;属性和方法也都不尽相同。</p> 
<p>节点&#xff1a;Node——构成HTML文档最基本的单元。</p> 
<p>常用节点分为四类&#xff1a;</p> 
<ul><li>文档节点&#xff1a;整个HTML文档</li><li>元素节点&#xff1a;HTML文档中的HTML标签</li><li>属性节点&#xff1a;元素的属性</li><li>文本节点&#xff1a;HTML标签中的文本内容</li></ul> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/6c58b926da64501f486305b5afe3d9f8.png" alt="image-20201019115515595" /></p> 
<h3><a id="422_2751"></a>4.2.2、节点属性</h3> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/2271dc3f0f61e890fe4cb76817fc6942.png" alt="image-20201019115655478" /></p> 
<h3><a id="423_2755"></a>4.2.3、文档节点</h3> 
<p>文档节点&#xff08;Document&#xff09;代表的是整个HTML文 档&#xff0c;网页中的所有节点都是它的子节点。</p> 
<p>document对象作为window对象的属性存在的&#xff0c;我们不用获取可以直接使用。</p> 
<p>通过该对象我们可以在整个文档访问内查找节点对象&#xff0c;并可以通过该对象创建各种节点对象。</p> 
<h3><a id="424_2763"></a>4.2.4、元素节点</h3> 
<p>HTML中的各种标签都是元素节点&#xff08;Element&#xff09;&#xff0c;这也是我们最常用的一个节点。</p> 
<p>浏览器会将页面中所有的标签都转换为一个元素节点&#xff0c; 我们可以通过document的方法来获取元素节点。</p> 
<p>例如&#xff1a;<code>document.getElementById()</code>&#xff0c;根据id属性值获取一个元素节点对象。</p> 
<h3><a id="425_2771"></a>4.2.5、属性节点</h3> 
<p>属性节点&#xff08;Attribute&#xff09;表示的是标签中的一个一个的属 性&#xff0c;这里要注意的是属性节点并非是元素节点的子节点&#xff0c;而是元素节点的一部分。可以通过元素节点来获取指定的属性节点。</p> 
<p>例如&#xff1a;<code>元素节点.getAttributeNode(&#34;属性名&#34;)</code>&#xff0c;根据元素节点的属性名获取一个属性节点对象。</p> 
<blockquote> 
 <p>注意&#xff1a;我们一般不使用属性节点。</p> 
</blockquote> 
<h3><a id="426_2779"></a>4.2.6、文本节点</h3> 
<p>文本节点&#xff08;Text&#xff09;表示的是HTML标签以外的文本内容&#xff0c;任意非HTML的文本都是文本节点&#xff0c;它包括可以字面解释的纯文本内容。文本节点一般是作为元素节点的子节点存在的。获取文本节点时&#xff0c;一般先要获取元素节点&#xff0c;在通过元素节点获取文本节点。</p> 
<p>例如&#xff1a;<code>元素节点.firstChild;</code>&#xff0c;获取元素节点的第一个子节点&#xff0c;一般为文本节点。</p> 
<h2><a id="43DOM_2785"></a>4.3、DOM文档操作</h2> 
<p>文档对象代表您的网页,&#xff0c;如果您希望访问 HTML 页面中的任何元素&#xff0c;那么您总是从访问 document 对象开始。</p> 
<p>下面是一些如何使用 document 对象来访问和操作 HTML 的实例。</p> 
<h3><a id="431_HTML__2791"></a>4.3.1、查找 HTML 元素</h3> 
<h4><a id="4311_2793"></a>4.3.1.1、方法介绍</h4> 
<table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">document.getElementById(<em>id</em>)</td><td align="left">通过元素 id 来查找元素。</td></tr><tr><td align="left">document.getElementsByTagName(<em>name</em>)</td><td align="left">通过标签名来查找元素。</td></tr><tr><td align="left">document.getElementsByClassName(<em>name</em>)</td><td align="left">通过类名来查找元素。</td></tr><tr><td align="left">document.querySelector(<em>CSS选择器</em>)</td><td align="left">通过CSS选择器选择一个元素。</td></tr><tr><td align="left">document.querySelectorAll(<em>CSS选择器</em>)</td><td align="left">通过CSS选择器选择多个元素。</td></tr></tbody></table> 
<h4><a id="4312_2803"></a>4.3.1.2、方法演示</h4> 
<p><strong>需求描述&#xff1a;创建一个按钮&#xff0c;通过id获取按钮节点对象</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>btn<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>我是按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> btn <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;btn&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/a4a12435040d0fb10c21046d3da4f685.png" alt="image-20201019140936584" /></p> 
<p><strong>需求描述&#xff1a;创建一个按钮&#xff0c;通过标签名获取按钮节点对象数组</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>我是按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> btn <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#34;button&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/e9e294078eb1d88399cf087561187bc4.png" alt="image-20201019141202534" /></p> 
<p><strong>需求描述&#xff1a;创建一个按钮&#xff0c;通过类名获取按钮节点对象数组</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>btn<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>我是按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> btn <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&#34;btn&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/cbf99da44967f7bd855435581c483059.png" alt="image-20201019141405002" /></p> 
<p><strong>需求描述&#xff1a;创建一个按钮&#xff0c;通过CSS选择器选择该按钮</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>btn<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>我是按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> btn <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#34;.btn&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/1f0792d8e76b9363a509ad6ac7d85244.png" alt="image-20201020090857926" /></p> 
<p><strong>需求描述&#xff1a;创建一个无序列表&#xff0c;通过CSS选择器选择该列表的所有li</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>list<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> list <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#34;.list li&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/80f710098d194f71233b1fcfb324f4e2.png" alt="image-20201020091354415" /></p> 
<h3><a id="432_HTML__2925"></a>4.3.2、获取 HTML 的值</h3> 
<h4><a id="4321_2927"></a>4.3.2.1、方法介绍</h4> 
<table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">元素节点.innerText</td><td align="left">获取 HTML 元素的 inner Text。</td></tr><tr><td align="left">元素节点.innerHTML</td><td align="left">获取 HTML 元素的 inner HTML。</td></tr><tr><td align="left">元素节点.属性</td><td align="left">获取 HTML 元素的属性值。</td></tr><tr><td align="left">元素节点.getAttribute(<em>attribute</em>)</td><td align="left">获取 HTML 元素的属性值。</td></tr><tr><td align="left">元素节点.style.样式</td><td align="left">获取 HTML 元素的行内样式值。</td></tr></tbody></table> 
<h4><a id="4322_2937"></a>4.3.2.2、方法演示</h4> 
<p><strong>需求描述&#xff1a;创建一个按钮&#xff0c;然后获取按钮的文本内容</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>btn<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>我是按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> btn <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;btn&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>btn<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/d836aa32b6a43979de51338534ba2bf9.png" alt="image-20201020093332082" /></p> 
<p><strong>需求描述&#xff1a;创建一个div&#xff0c;然后在div中插入一个h1标题&#xff0c;获取div中的html代码</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>box<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>我是Box中的大标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> box <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;box&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/4a8f1dd5b26a043cd7b9078c0cfd0421.png" alt="image-20201020093459855" /></p> 
<p><strong>需求描述&#xff1a;创建一个超链接&#xff0c;默认为空&#xff0c;设置href属性为<code>https://www.baidu.com</code> &#xff0c;使用JavaScript代码读取href属性</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>a<span class="token punctuation">&#34;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>https://www.baidu.com<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>打开百度&#xff0c;你就知道&#xff01;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> a <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;a&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/8758c3b09d1558dac07d0732a14a629b.png" alt="image-20201020093633259" /></p> 
<p><strong>需求描述&#xff1a;创建一个超链接&#xff0c;默认为空&#xff0c;设置href属性为<code>https://www.baidu.com</code> &#xff0c;使用JavaScript代码读取href属性</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>a<span class="token punctuation">&#34;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>https://www.baidu.com<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>打开百度&#xff0c;你就知道&#xff01;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> a <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;a&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#34;href&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/e7a6fe98a043b1c21f89becc7beae27a.png" alt="image-20201020093817197" /></p> 
<p><strong>需求描述&#xff1a;创建一个正方形div&#xff0c;默认颜色为红色&#xff0c;使用JavaScript代码获取div的宽度</strong></p> 
<blockquote> 
 <p>注意&#xff1a;如果CSS的样式名中含有-&#xff0c;这种名称在JS中是不合法的比如background-color&#xff0c;需要将这种样式名修改为驼峰命名法&#xff0c;去掉-&#xff0c;然后将-后的字母大写&#xff0c;我们通过style属性设置的样式都是行内样式&#xff0c;同样的获取也是行内样式&#xff0c;而行内样式有较高的优先级&#xff0c;所以通过JS修改的样式往往会立即显示&#xff0c;但是如果在样式中写了!important&#xff0c;则此时样式会有最高的优先级&#xff0c;即使通过JS也不能覆盖该样式&#xff0c;此时将会导致JS修改样式失效&#xff0c;所以尽量不要为样式添加!important</p> 
</blockquote> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">&#61;&#34;</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">&#34;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>box<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> box <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;box&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/3ee1de03ba68d6321c0b6922c74ebd52.png" alt="image-20201020094411123" /></p> 
<p><strong>拓展知识1&#xff1a;</strong></p> 
<p>通过style属性设置和读取的都是内联样式&#xff0c;无法读取样式表中的样式或者说正在应用的样式&#xff0c;如果想要读取当前正在应用的样式属性我们可以使用<code>元素.currentStyle.样式名</code>来获取元素的当前显示的样式&#xff0c;它可以用来读取当前元素正在显示的样式&#xff0c;如果当前元素没有设置该样式&#xff0c;则获取它的默认值&#xff0c;但是currentStyle只有IE浏览器支持&#xff0c;其它的浏览器都不支持&#xff0c;在其它浏览器中可以使用getComputedStyle()这个方法来获取元素当前的样式&#xff0c;这个方法是window的方法&#xff0c;可以直接使用&#xff0c;但是需要两个参数&#xff1a;</p> 
<ul><li>第一个参数&#xff1a;要获取样式的元素</li><li>第二个参数&#xff1a;可以传递一个伪元素&#xff0c;一般都传null</li></ul> 
<p>该方法会返回一个对象&#xff0c;对象中封装了当前元素对应的样式&#xff0c;可以通过 <code>对象.样式名</code> 来读取样式&#xff0c;如果获取的样式没有设置&#xff0c;则会获取到真实的值&#xff0c;而不是默认值&#xff0c;比如&#xff1a;没有设置width&#xff0c;它不会获取到auto&#xff0c;而是一个长度&#xff0c;但是该方法不支持IE8及以下的浏览器。通过currentStyle和getComputedStyle()读取到的样式都是只读的&#xff0c;不能修改&#xff0c;如果要修改必须通过style属性&#xff0c;因此&#xff0c;我们可以写一个适配各个浏览器的读取元素样式的方法。</p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style language-css">
        <span class="token comment">/*样式表的样式*/</span>
        <span class="token selector">#box</span> <span class="token punctuation">{<!-- --></span>
            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">&#61;&#34;</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span><span class="token punctuation">&#34;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>box<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token comment">/*通用的获取元素样式的方法*/</span>
    <span class="token keyword">function</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>getComputedStyle<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token comment">//正常浏览器的方式&#xff0c;具有getComputedStyle()方法</span>
            <span class="token keyword">return</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
            <span class="token comment">//IE8的方式&#xff0c;没有getComputedStyle()方法</span>
            <span class="token keyword">return</span> obj<span class="token punctuation">.</span>currentStyle<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">var</span> box <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;box&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getStyle</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span> <span class="token string">&#34;width&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getStyle</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span> <span class="token string">&#34;height&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getStyle</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span> <span class="token string">&#34;background-color&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p>谷歌浏览器&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/a2fb2f2ff61d0469329039464d23bfe7.png" alt="image-20201020100255039" /></p> 
<p>火狐浏览器&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/0a114c32d9776f919ba9506fb2eb818b.png" alt="image-20201020100316096" /></p> 
<p>IE9-IE11 浏览器&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/6739e07782087f92acbb30a595ccc6b8.png" alt="image-20201020100443311" /></p> 
<p>IE5-IE8 浏览器&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/7df8d96f441bf30cb7c20dc10624c4b0.png" alt="image-20201020100934400" /></p> 
<p>有同学会说&#xff0c;在IE5-IE8 浏览器中&#xff0c;老师这不是还不一样吗&#xff1f;因此我们建议设置颜色数值一般采用rgb或者rgba&#xff0c;最好不要采用英文单词的这种颜色值&#xff0c;这样最终展示出来的效果就一致了。</p> 
<p><strong>拓展知识2&#xff1a;编写一段兼容性代码&#xff0c;用来获取任意标签的文本内容</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>https://www.baidu.com<span class="token punctuation">&#34;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>a<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>打开百度&#xff0c;你就知道&#xff01;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> a <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;a&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getInnerText</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*获取任意标签的内容*/</span>
    <span class="token keyword">function</span> <span class="token function">getInnerText</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token comment">// 判断浏览器是否支持textContent,如果支持&#xff0c;则使用textContent获取内容&#xff0c;否则使用innerText获取内容。</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> element<span class="token punctuation">.</span>textContent <span class="token operator">&#61;&#61;</span> <span class="token string">&#34;undefined&#34;</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token keyword">return</span> element<span class="token punctuation">.</span>innerText<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
            <span class="token keyword">return</span> element<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p>谷歌浏览器&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/3ca6eddc64116c4fa953a9ce64da0b11.png" alt="image-20201021141646565" /></p> 
<p>火狐浏览器&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/65e9ac0e97150902e3cd508ba236db81.png" alt="image-20201021141729927" /></p> 
<p>IE5-IE11浏览器&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/53431bc5beb1b82d241e2666a56f28e4.png" alt="image-20201021141805607" /></p> 
<h3><a id="433_HTML__3170"></a>4.3.3、改变 HTML 的值</h3> 
<h4><a id="4331_3172"></a>4.3.3.1、方法介绍</h4> 
<table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">元素节点.innerText &#61; <em>new text content</em></td><td align="left">改变元素的 inner Text。</td></tr><tr><td align="left">元素节点.innerHTML &#61; <em>new html content</em></td><td align="left">改变元素的 inner HTML。</td></tr><tr><td align="left">元素节点.属性 &#61; <em>new value</em></td><td align="left">改变 HTML 元素的属性值。</td></tr><tr><td align="left">元素节点.setAttribute(<em>attribute</em>, <em>value</em>)</td><td align="left">改变 HTML 元素的属性值。</td></tr><tr><td align="left">元素节点.style.样式 &#61; <em>new style</em></td><td align="left">改变 HTML 元素的行内样式值。</td></tr></tbody></table> 
<h4><a id="4332_3182"></a>4.3.3.2、方法演示</h4> 
<p><strong>需求描述&#xff1a;创建一个按钮&#xff0c;然后改变按钮的文本内容</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>btn<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>我是按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> btn <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;btn&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    btn<span class="token punctuation">.</span>innerText <span class="token operator">&#61;</span> <span class="token string">&#34;我是JavaScript的按钮&#34;</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/56582292e6ee61fccb1dc8c90e55972c.png" alt="image-20201019142137016" /></p> 
<p><strong>需求描述&#xff1a;创建一个div&#xff0c;然后在div中插入一个h1标题</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>box<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> box <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;box&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    box<span class="token punctuation">.</span>innerHTML <span class="token operator">&#61;</span> <span class="token string">&#34;&lt;h1&gt;我是Box中的大标题&lt;/h1&gt;&#34;</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/a010c647556b98b0de90a75c1ff08cdc.png" alt="image-20201019152023559" /></p> 
<p>**需求描述&#xff1a;创建一个超链接&#xff0c;默认为空&#xff0c;使用JavaScript代码设置href属性为<code>https://www.baidu.com</code> **</p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>a<span class="token punctuation">&#34;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span><span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>打开百度&#xff0c;你就知道&#xff01;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> a <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;a&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    a<span class="token punctuation">.</span>href<span class="token operator">&#61;</span><span class="token string">&#34;https://www.baidu.com&#34;</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/71fb6639e98948a6ca3ee290f44f8012.png" alt="image-20201019152337340" /></p> 
<p>**需求描述&#xff1a;创建一个超链接&#xff0c;默认为空&#xff0c;使用JavaScript代码设置href属性为<code>https://www.baidu.com</code> **</p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>a<span class="token punctuation">&#34;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span><span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>打开百度&#xff0c;你就知道&#xff01;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> a <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;a&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    a<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#34;href&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;https://www.baidu.com&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/b600ef7b34cbc27bea3ad887b22e1c38.png" alt="image-20201019152509296" /></p> 
<p><strong>需求描述&#xff1a;创建一个正方形div&#xff0c;默认颜色为红色&#xff0c;使用JavaScript代码改变为绿色</strong></p> 
<blockquote> 
 <p>注意&#xff1a;如果CSS的样式名中含有-&#xff0c;这种名称在JS中是不合法的比如background-color&#xff0c;需要将这种样式名修改为驼峰命名法&#xff0c;去掉-&#xff0c;然后将-后的字母大写&#xff0c;我们通过style属性设置的样式都是行内样式&#xff0c;同样的获取也是行内样式&#xff0c;而行内样式有较高的优先级&#xff0c;所以通过JS修改的样式往往会立即显示&#xff0c;但是如果在样式中写了!important&#xff0c;则此时样式会有最高的优先级&#xff0c;即使通过JS也不能覆盖该样式&#xff0c;此时将会导致JS修改样式失效&#xff0c;所以尽量不要为样式添加!important</p> 
</blockquote> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">&#61;&#34;</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">&#34;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>box<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> box <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;box&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">&#61;</span> <span class="token string">&#34;green&#34;</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/0564f9033a71ffc937e9f87f1a65c378.png" alt="image-20201019152811146" /></p> 
<p><strong>拓展知识1&#xff1a;</strong></p> 
<p>修改节点的内容除了常用的innerHTML和innerText之外&#xff0c;还有insertAdjacentHTML和insertAdjacentText方法&#xff0c;可以在指定的地方插入内容。insertAdjacentText方法与insertAdjacentHTML方法类似&#xff0c;只不过是插入纯文本&#xff0c;参数相同。</p> 
<p>语法说明&#xff1a;</p> 
<pre><code class="prism language-javascript">object<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span>where<span class="token punctuation">,</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>
object<span class="token punctuation">.</span><span class="token function">insertAdjacentText</span><span class="token punctuation">(</span>where<span class="token punctuation">,</span>text<span class="token punctuation">)</span>
</code></pre> 
<p>参数说明&#xff1a;</p> 
<ul><li> <p>where&#xff1a;</p> 
  <ul><li>beforeBegin&#xff1a;插入到开始标签的前面</li><li>beforeEnd&#xff1a;插入到结束标签的前面</li><li>afterBegin&#xff1a;插入到开始标签的后面</li><li>afterEnd&#xff1a;插入到结束标签的后面</li></ul> <p><img src="https://img-blog.csdnimg.cn/img_convert/dae7b01cf5aa68e8b71b939b4aea1a9b.png" alt="img" /></p> </li><li> <p>html&#xff1a;一段html代码</p> </li><li> <p>text&#xff1a;一段文本值</p> </li></ul> 
<p>注意事项&#xff1a;</p> 
<ol><li>这两个方法必须等文档加载好后才能执行&#xff0c;否则会出错。</li><li>insertAdjacentText只能插入普通文本&#xff0c;insertAdjacentHTML插入html代码。</li><li>使用insertAdjacentHTML方法插入script脚本文件时&#xff0c;必须在script元素上定义defer属性。</li><li>使用insertAdjacentHTML方法插入html代码后&#xff0c;页面上的元素集合将发生变化。</li><li>insertAdjacentHTML方法不适用于单个的空的元素标签(如img&#xff0c;input等)。</li></ol> 
<p>案例演示&#xff1a;</p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>insert<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>你是我的小丫小苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> div <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;insert&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    div<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">&#39;beforeBegin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;你是我的小丫小苹果&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/c05be7bed36cf98940ef9a6b9bbd46c5.png" alt="image-20201020115614268" /></p> 
<p><strong>拓展知识2&#xff1a;编写一段兼容性代码&#xff0c;用来设置任意标签的文本内容</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>https://www.baidu.com<span class="token punctuation">&#34;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>a<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>打开百度&#xff0c;你就知道&#xff01;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> a <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;a&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">setInnerText</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">&#34;你要打开百度吗&#xff1f;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getInnerText</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*获取任意标签的内容*/</span>
    <span class="token keyword">function</span> <span class="token function">getInnerText</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token comment">// 判断浏览器是否支持textContent,如果支持&#xff0c;则使用textContent获取内容&#xff0c;否则使用innerText获取内容。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> element<span class="token punctuation">.</span>textContent <span class="token operator">&#61;&#61;</span> <span class="token string">&#34;undefined&#34;</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token keyword">return</span> element<span class="token punctuation">.</span>innerText<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
            <span class="token keyword">return</span> element<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/*设置任意标签的内容*/</span>
    <span class="token keyword">function</span> <span class="token function">setInnerText</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> text<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token comment">// 判断浏览器是否支持textContent,如果支持&#xff0c;则使用textContent设置内容&#xff0c;否则使用innerText设置内容。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> element<span class="token punctuation">.</span>textContent <span class="token operator">&#61;&#61;</span> <span class="token string">&#34;undefined&#34;</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token keyword">return</span> element<span class="token punctuation">.</span>innerText <span class="token operator">&#61;</span> text<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
            <span class="token keyword">return</span> element<span class="token punctuation">.</span>textContent <span class="token operator">&#61;</span> text<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p>谷歌浏览器&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/92617ad540982bffb28242c851b98e0d.png" alt="image-20201021142036915" /></p> 
<p>火狐浏览器&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/2a5fd2976d0c0c248d7781e77f4758ea.png" alt="image-20201021142051365" /></p> 
<p>IE5-IE11浏览器&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/554e2179110d1e9d1c6c3944ae928f88.png" alt="image-20201021142124568" /></p> 
<h3><a id="434_HTML__3421"></a>4.3.4、修改 HTML 元素</h3> 
<h4><a id="4341_3423"></a>4.3.4.1、方法介绍</h4> 
<table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">document.createElement(<em>element</em>)</td><td align="left">创建 HTML 元素节点。</td></tr><tr><td align="left">document.createAttribute(<em>attribute</em>)</td><td align="left">创建 HTML 属性节点。</td></tr><tr><td align="left">document.createTextNode(<em>text</em>)</td><td align="left">创建 HTML 文本节点。</td></tr><tr><td align="left">元素节点.removeChild(<em>element</em>)</td><td align="left">删除 HTML 元素。</td></tr><tr><td align="left">元素节点.appendChild(<em>element</em>)</td><td align="left">添加 HTML 元素。</td></tr><tr><td align="left">元素节点.replaceChild(<em>element</em>)</td><td align="left">替换 HTML 元素。</td></tr><tr><td align="left">元素节点.insertBefore(<em>element</em>)</td><td align="left">在指定的子节点前面插入新的子节点。</td></tr></tbody></table> 
<h4><a id="4342_3435"></a>4.3.4.2、方法演示</h4> 
<p><strong>案例演示1&#xff1a;创建一个ul列表&#xff0c;然后在该列表中追加4个li标签</strong></p> 
<p>第一种方法&#xff1a;</p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> ul <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#34;ul&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> li1 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#34;li&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> text1 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&#34;列表项1&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    li1<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> li2 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#34;li&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> text2 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&#34;列表项2&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    li2<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> li3 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#34;li&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> text3 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&#34;列表项3&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    li3<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li3<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> li4 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#34;li&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> text4 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&#34;列表项4&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    li4<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li4<span class="token punctuation">)</span><span class="token punctuation">;</span>

    document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#34;body&#34;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ul<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/f807b292838456cc317d127c135fca49.png" alt="image-20201020111240435" /></p> 
<p>第二种方法&#xff1a;</p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> ul <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#34;ul&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> li1 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#34;li&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    li1<span class="token punctuation">.</span>innerHTML <span class="token operator">&#61;</span> <span class="token string">&#34;列表项1&#34;</span><span class="token punctuation">;</span>
    ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> li2 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#34;li&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    li2<span class="token punctuation">.</span>innerHTML <span class="token operator">&#61;</span> <span class="token string">&#34;列表项2&#34;</span><span class="token punctuation">;</span>
    ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> li3 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#34;li&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    li3<span class="token punctuation">.</span>innerHTML <span class="token operator">&#61;</span> <span class="token string">&#34;列表项3&#34;</span><span class="token punctuation">;</span>
    ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li3<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> li4 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#34;li&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    li4<span class="token punctuation">.</span>innerHTML <span class="token operator">&#61;</span> <span class="token string">&#34;列表项4&#34;</span><span class="token punctuation">;</span>
    ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li4<span class="token punctuation">)</span><span class="token punctuation">;</span>

    document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#34;body&#34;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ul<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/4e1853b78d8f391e2bb2ee86a16bc733.png" alt="image-20201020111408190" /></p> 
<p>第三种方法&#xff1a;</p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> ul <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#34;ul&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> li1 <span class="token operator">&#61;</span> <span class="token string">&#34;&lt;li&gt;列表项1&lt;/li&gt;&#34;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> li2 <span class="token operator">&#61;</span> <span class="token string">&#34;&lt;li&gt;列表项2&lt;/li&gt;&#34;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> li3 <span class="token operator">&#61;</span> <span class="token string">&#34;&lt;li&gt;列表项3&lt;/li&gt;&#34;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> li4 <span class="token operator">&#61;</span> <span class="token string">&#34;&lt;li&gt;列表项4&lt;/li&gt;&#34;</span><span class="token punctuation">;</span>
    ul<span class="token punctuation">.</span>innerHTML <span class="token operator">&#61;</span> li1 <span class="token operator">&#43;</span> li2 <span class="token operator">&#43;</span> li3 <span class="token operator">&#43;</span> li4<span class="token punctuation">;</span>

    document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#34;body&#34;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ul<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/812211288b9c0fef95fadb038fdf1c84.png" alt="image-20201020111719891" /></p> 
<p><strong>案例演示2&#xff1a;创建一个ul列表&#xff0c;里边有四个li子元素&#xff0c;删除第一个li&#xff0c;替换最后一个li</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>ul<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>first<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>last<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>列表项4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> ul <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;ul&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> first <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;first&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> last <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;last&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*删除第一个*/</span>
    ul<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*替换最后一个*/</span>
    <span class="token keyword">var</span> replaceLi <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#34;li&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    replaceLi<span class="token punctuation">.</span>innerHTML <span class="token operator">&#61;</span> <span class="token string">&#34;列表4的替换&#34;</span><span class="token punctuation">;</span>
    ul<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>replaceLi<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/235c25b41f1db4ad92f3f7e9397a3dc8.png" alt="image-20201020113211173" /></p> 
<p><strong>案例演示3&#xff1a;创建一个ul列表&#xff0c;里边有四个li子元素&#xff0c;在第一个li前边插入一个id为zero的li</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>ul<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>first<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>列表项4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> ul <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;ul&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> first <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;first&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> zero <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#34;li&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    zero<span class="token punctuation">.</span>innerHTML <span class="token operator">&#61;</span> <span class="token string">&#34;列表0的新增&#34;</span><span class="token punctuation">;</span>
    
    ul<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>zero<span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/836f305b817ee0ea7c0368405b20835c.png" alt="image-20201020115016443" /></p> 
<p><strong>拓展知识&#xff1a;</strong></p> 
<p>动态判断、添加、删除、切换样式&#xff0c;支持IE5-IE11&#xff0c;谷歌浏览器、火狐浏览器等</p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style language-css">
        <span class="token selector">.b1</span> <span class="token punctuation">{<!-- --></span>
            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token selector">.b2</span> <span class="token punctuation">{<!-- --></span>
            <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>btn0<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>判断b2样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>btn1<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>添加b2样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>btn2<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>删除b2样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>btn3<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>切换b2样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>box<span class="token punctuation">&#34;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>b1<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> btn0 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;btn0&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> btn1 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;btn1&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> btn2 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;btn2&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> btn3 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;btn3&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> box <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;box&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    btn0<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">hasClass</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span> <span class="token string">&#34;b2&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    btn1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token function">addClass</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span> <span class="token string">&#34;b2&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    btn2<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token function">removeClass</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span> <span class="token string">&#34;b2&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    btn3<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token function">toggleClass</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span> <span class="token string">&#34;b2&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">/*
     * 判断一个元素中是否含有指定的class属性值
     * 如果有该class&#xff0c;则返回true&#xff0c;没有则返回false
     */</span>
    <span class="token keyword">function</span> <span class="token function">hasClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cn<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">var</span> reg <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#34;\\b&#34;</span> <span class="token operator">&#43;</span> cn <span class="token operator">&#43;</span> <span class="token string">&#34;\\b&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/*
     * 向一个元素中添加指定的class属性值
     * 参数:
     * 	obj 要添加class属性的元素
     *  cn 要添加的class值
     */</span>
    <span class="token keyword">function</span> <span class="token function">addClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cn<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token comment">// 检查obj中是否含有cn</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            obj<span class="token punctuation">.</span>className <span class="token operator">&#43;&#61;</span> <span class="token string">&#34; &#34;</span> <span class="token operator">&#43;</span> cn<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/*
     * 删除一个元素中的指定的class属性
     */</span>
    <span class="token keyword">function</span> <span class="token function">removeClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cn<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">var</span> reg <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#34;\\b&#34;</span> <span class="token operator">&#43;</span> cn <span class="token operator">&#43;</span> <span class="token string">&#34;\\b&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        obj<span class="token punctuation">.</span>className <span class="token operator">&#61;</span> obj<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#34;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/*
     * toggleClass可以用来切换一个类
     * 	如果元素中具有该类&#xff0c;则删除
     * 	如果元素中没有该类&#xff0c;则添加
     */</span>
    <span class="token keyword">function</span> <span class="token function">toggleClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cn<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token comment">// 判断obj中是否含有cn</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token comment">// 存在&#xff0c;则删除</span>
            <span class="token function">removeClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
            <span class="token comment">// 没有&#xff0c;则添加</span>
            <span class="token function">addClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/3ce11a8d4ac93137688af293a74c89ab.png" alt="image-20201022124939559" /></p> 
<h3><a id="435_HTML__3731"></a>4.3.5、查找 HTML 父子</h3> 
<h4><a id="4351_3733"></a>4.3.5.1、方法介绍</h4> 
<table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>元素节点.parentNode</td><td>返回元素的父节点。</td></tr><tr><td>元素节点.parentElement</td><td>返回元素的父元素。</td></tr><tr><td>元素节点.childNodes</td><td>返回元素的一个子节点的数组&#xff08;包含空白文本Text节点&#xff09;。</td></tr><tr><td>元素节点.children</td><td>返回元素的一个子元素的集合&#xff08;不包含空白文本Text节点&#xff09;。</td></tr><tr><td>元素节点.firstChild</td><td>返回元素的第一个子节点&#xff08;包含空白文本Text节点&#xff09;。</td></tr><tr><td>元素节点.firstElementChild</td><td>返回元素的第一个子元素&#xff08;不包含空白文本Text节点&#xff09;。</td></tr><tr><td>元素节点.lastChild</td><td>返回元素的最后一个子节点&#xff08;包含空白文本Text节点&#xff09;。</td></tr><tr><td>元素节点.lastElementChild</td><td>返回元素的最后一个子元素&#xff08;不包含空白文本Text节点&#xff09;。</td></tr><tr><td>元素节点.previousSibling</td><td>返回某个元素紧接之前节点&#xff08;包含空白文本Text节点&#xff09;。</td></tr><tr><td>元素节点.previousElementSibling</td><td>返回指定元素的前一个兄弟元素&#xff08;相同节点树层中的前一个元素节点&#xff09;。</td></tr><tr><td>元素节点.nextSibling</td><td>返回某个元素紧接之后节点&#xff08;包含空白文本Text节点&#xff09;。</td></tr><tr><td>元素节点.nextElementSibling</td><td>返回指定元素的后一个兄弟元素&#xff08;相同节点树层中的下一个元素节点&#xff09;。</td></tr></tbody></table> 
<h4><a id="4352_3750"></a>4.3.5.2、方法演示</h4> 
<p><strong>案例演示&#xff1a;</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>box<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>ul<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>https://www.baidu.com<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>我是超链接1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>two<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>https://www.baidu.com<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>我是超链接2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>https://www.baidu.com<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>我是超链接3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>https://www.baidu.com<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>我是超链接4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> box <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;box&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> ul <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;ul&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> two <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;two&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>parentElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>lastChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>lastElementChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span>previousSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/7529554c9039548d1963311ac4759040.png" alt="image-20201020202807593" /></p> 
<p><strong>兼容性方法&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">/*获取任意一个父级元素的第一个子元素*/</span>
<span class="token keyword">function</span> <span class="token function">getfirstElementChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token keyword">return</span> element<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
		<span class="token keyword">var</span> node <span class="token operator">&#61;</span> element<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">!&#61;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			node <span class="token operator">&#61;</span> node<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> node<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*获取任意一个父级元素的最后一个子元素*/</span>
<span class="token keyword">function</span> <span class="token function">getLastElementChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>lastElementChild<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token keyword">return</span> element<span class="token punctuation">.</span>lastElementChild<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
		<span class="token keyword">var</span> node <span class="token operator">&#61;</span> element<span class="token punctuation">.</span>lastChild<span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">!&#61;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			node <span class="token operator">&#61;</span> node<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> node<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*获取任意一个子元素的前一个兄弟元素*/</span>
<span class="token keyword">function</span> <span class="token function">getPreviousElementSibling</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token keyword">return</span> element<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
		<span class="token keyword">var</span> node <span class="token operator">&#61;</span> element<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">!&#61;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			node <span class="token operator">&#61;</span> node<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> node<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*获取任意一个子元素的后一个兄弟元素*/</span>
<span class="token keyword">function</span> <span class="token function">getNextElementSibling</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		<span class="token keyword">return</span> element<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
		<span class="token keyword">var</span> node <span class="token operator">&#61;</span> element<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">!&#61;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
			node <span class="token operator">&#61;</span> node<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> node<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
<p><strong>案例演示&#xff1a;</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>container<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>前面的P标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>加粗文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>https://www.baidu.com<span class="token punctuation">&#34;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>a<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>百度一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>斜体文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>最后的P标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token comment">/*第一个子元素*/</span>
    <span class="token keyword">var</span> firstNode <span class="token operator">&#61;</span> <span class="token function">getfirstElementChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;container&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstNode<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*最后一个子元素*/</span>
    <span class="token keyword">var</span> lastNode <span class="token operator">&#61;</span> <span class="token function">getLastElementChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;container&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastNode<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*指定元素的前一个子元素*/</span>
    <span class="token keyword">var</span> node1 <span class="token operator">&#61;</span> <span class="token function">getPreviousElementSibling</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;a&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*指定元素的后一个子元素*/</span>
    <span class="token keyword">var</span> node2 <span class="token operator">&#61;</span> <span class="token function">getNextElementSibling</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;a&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node2<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*获取任意一个父级元素的第一个子元素*/</span>
    <span class="token keyword">function</span> <span class="token function">getfirstElementChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token keyword">return</span> element<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
            <span class="token keyword">var</span> node <span class="token operator">&#61;</span> element<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">!&#61;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
                node <span class="token operator">&#61;</span> node<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> node<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/*获取任意一个父级元素的最后一个子元素*/</span>
    <span class="token keyword">function</span> <span class="token function">getLastElementChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>lastElementChild<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token keyword">return</span> element<span class="token punctuation">.</span>lastElementChild<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
            <span class="token keyword">var</span> node <span class="token operator">&#61;</span> element<span class="token punctuation">.</span>lastChild<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">!&#61;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
                node <span class="token operator">&#61;</span> node<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> node<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/*获取任意一个子元素的前一个兄弟元素*/</span>
    <span class="token keyword">function</span> <span class="token function">getPreviousElementSibling</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token keyword">return</span> element<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
            <span class="token keyword">var</span> node <span class="token operator">&#61;</span> element<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">!&#61;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
                node <span class="token operator">&#61;</span> node<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> node<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/*获取任意一个子元素的后一个兄弟元素*/</span>
    <span class="token keyword">function</span> <span class="token function">getNextElementSibling</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token keyword">return</span> element<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
            <span class="token keyword">var</span> node <span class="token operator">&#61;</span> element<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">!&#61;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
                node <span class="token operator">&#61;</span> node<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> node<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p>谷歌浏览器&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/500bbd1a5ea8cd5a53d0b99ff9b131c7.png" alt="image-20201021144241079" /></p> 
<p>火狐浏览器&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/4acbcf607aa870893bf658ef282a6e4a.png" alt="image-20201021144301183" /></p> 
<p>IE5-IE11浏览器&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/ea8d2c26b705c310c80e275715336d8d.png" alt="image-20201021144609631" /></p> 
<h2><a id="44DOM_3959"></a>4.4、DOM文档事件</h2> 
<h3><a id="441_3961"></a>4.4.1、事件概述</h3> 
<p>HTML事件可以触发浏览器中的行为&#xff0c;比方说当用户点击某个 HTML 元素时启动一段 JavaScript。</p> 
<h3><a id="442_3965"></a>4.4.2、窗口事件</h3> 
<p>由窗口触发该事件 (同样适用于 &lt;body&gt; 标签)&#xff1a;</p> 
<table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">onblur</td><td align="left">当窗口失去焦点时运行脚本。</td></tr><tr><td align="left">onfocus</td><td align="left">当窗口获得焦点时运行脚本。</td></tr><tr><td align="left">onload</td><td align="left">当文档加载之后运行脚本。</td></tr><tr><td align="left">onresize</td><td align="left">当调整窗口大小时运行脚本。</td></tr><tr><td align="left">onstorage</td><td align="left">当 Web Storage 区域更新时&#xff08;存储空间中的数据发生变化时&#xff09;运行脚本。</td></tr></tbody></table> 
<p><strong>案例演示1&#xff1a;当窗口失去焦点时&#xff0c;输出“窗口失去焦点”</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    window<span class="token punctuation">.</span><span class="token function-variable function">onblur</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;窗口失去焦点&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/a85355ebaabbd206e59b7061c5eacf7c.png" alt="image-20201021081411240" /></p> 
<p><strong>案例演示2&#xff1a;当窗口获取焦点时&#xff0c;输出“窗口获取焦点”</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    window<span class="token punctuation">.</span><span class="token function-variable function">onfocus</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;窗口获取焦点&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/c6064b12922f00dd1242c07ec2ff4d6d.png" alt="image-20201021081456060" /></p> 
<p><strong>案例演示3&#xff1a;当页面文档加载完成后&#xff0c;输出&#34;Hello, World&#34;</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;Hello,World&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/00f5813669d977f3a6dc43df69d0752d.png" alt="image-20201019153100531" /></p> 
<p><strong>案例演示4&#xff1a;当调整窗口大小时&#xff0c;输出&#34;窗口大小正在改变&#34;</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    window<span class="token punctuation">.</span><span class="token function-variable function">onresize</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;窗口大小正在改变&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/ec744b7827119eca9d85dca8b3fddd2c.png" alt="image-20201019153423408" /></p> 
<h3><a id="443_4069"></a>4.4.3、表单事件</h3> 
<p>表单事件在HTML表单中触发 (适用于所有 HTML 元素&#xff0c;但该HTML元素需在form表单内)&#xff1a;</p> 
<table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">onblur</td><td align="left">当元素失去焦点时运行脚本。</td></tr><tr><td align="left">onfocus</td><td align="left">当元素获得焦点时运行脚本。</td></tr><tr><td align="left">onchange</td><td align="left">当元素改变时运行脚本。</td></tr><tr><td align="left">oninput</td><td align="left">当元素获得用户输入时运行脚本。</td></tr><tr><td align="left">oninvalid</td><td align="left">当元素无效时运行脚本。</td></tr><tr><td align="left">onselect</td><td align="left">当选取元素时运行脚本。</td></tr><tr><td align="left">onsubmit</td><td align="left">当提交表单时运行脚本。</td></tr></tbody></table> 
<p><strong>案例演示1&#xff1a;当文本框获取焦点&#xff0c;文本框背景为红色&#xff0c;当文本框失去焦点&#xff0c;文本框背景为黄色</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>text<span class="token punctuation">&#34;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>text<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> textInput <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;text&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 当文本框获取焦点&#xff0c;文本框背景为红色 */</span>
    textInput<span class="token punctuation">.</span><span class="token function-variable function">onfocus</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">&#61;</span> <span class="token string">&#34;red&#34;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">/* 当文本框失去焦点&#xff0c;文本框背景为绿色 */</span>
    textInput<span class="token punctuation">.</span><span class="token function-variable function">onblur</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">&#61;</span> <span class="token string">&#34;green&#34;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<blockquote> 
 <p>注意&#xff1a;这里为什么要用this&#xff0c;你不用this也可以&#xff0c;就直接<code>textInput.style.background &#61; &#34;red&#34;;</code>也不是不可以的&#xff0c;但是方法的调用规则就是谁调用this&#xff0c;this就指向谁&#xff0c;这样我们就可以简化代码了</p> 
</blockquote> 
<p><strong>案例演示2&#xff1a;当文本框内容改变时&#xff0c;鼠标离开文本框&#xff0c;自动将文本框的内容输出到控制台</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>text<span class="token punctuation">&#34;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>text<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> textInput <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;text&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 当文本框内容改变时&#xff0c;鼠标离开文本框&#xff0c;自动将文本框的内容输出到控制台 */</span>
    textInput<span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/d4c9ff58b0e1bcea5aaa206660627031.png" alt="image-20201019155326750" /></p> 
<p><strong>案例演示3&#xff1a;当文本框内容改变时&#xff0c;立即将改变的内容输出到控制台</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>text<span class="token punctuation">&#34;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>text<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> textInput <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;text&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 当文本框内容改变时&#xff0c;立即将改变的内容输出到控制台 */</span>
    textInput<span class="token punctuation">.</span><span class="token function-variable function">oninput</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/298382000b56c6aadf01a9764c8761f6.png" alt="image-20201021111352033" /></p> 
<p><strong>案例演示4&#xff1a;如果单击“submit”&#xff0c;则不填写文本字段&#xff0c;将发生警报消息</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>text<span class="token punctuation">&#34;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>text<span class="token punctuation">&#34;</span></span> <span class="token attr-name">required</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>submit<span class="token punctuation">&#34;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>submit<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> textInput <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;text&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 如果单击“submit”&#xff0c;则不填写文本字段&#xff0c;将发生警报消息 */</span>
    textInput<span class="token punctuation">.</span><span class="token function-variable function">oninvalid</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;请您完善表单内容&#xff01;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/d6f51bce499dc388317f06cccb0e7e38.png" alt="image-20201021111647136" /></p> 
<p><strong>案例演示5&#xff1a;当选中文本框的内容时&#xff0c;输出“您已经选择了文本框内容&#xff01;”</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>text<span class="token punctuation">&#34;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>text<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> textInput <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;text&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 当选中文本框的内容时&#xff0c;输出“您已经选择了文本框内容&#xff01;” */</span>
    textInput<span class="token punctuation">.</span><span class="token function-variable function">onselect</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;您已经选择了文本框内容&#xff01;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/001f570b9680ae5b7d55dcacb7860061.png" alt="image-20201021112207508" /></p> 
<p><strong>案例演示6&#xff1a;当提交表单的时候&#xff0c;在控制台输出“表单提交”</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>myform<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>submit<span class="token punctuation">&#34;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>submit<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> myform <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;myform&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 当提交表单的时候&#xff0c;在控制台输出“表单提交” */</span>
    myform<span class="token punctuation">.</span><span class="token function-variable function">onsubmit</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;表单提交&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">/* 用来阻止表单提交的&#xff0c;你不写它会跳转请求 */</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/98d3c1ca8f329bfce30b42a26d83efbe.png" alt="image-20201021112810436" /></p> 
<h3><a id="444_4264"></a>4.4.4、键盘事件</h3> 
<p>通过键盘触发事件&#xff0c;类似用户的行为&#xff1a;</p> 
<table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">onkeydown</td><td align="left">当按下按键时运行脚本。</td></tr><tr><td align="left">onkeyup</td><td align="left">当松开按键时运行脚本。</td></tr><tr><td align="left">onkeypress</td><td align="left">当按下并松开按键时运行脚本。</td></tr></tbody></table> 
<p><strong>案例演示1&#xff1a;当键盘按下判断当前的按键是不是 a &#xff0c;如果是就输出true&#xff0c;否则输出false</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token comment">/* 当键盘按下判断当前的按键是不是 a &#xff0c;如果是就输出true&#xff0c;否则输出false */</span>
    window<span class="token punctuation">.</span><span class="token function-variable function">onkeydown</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token comment">/* 解决兼容性问题 */</span>
        event <span class="token operator">&#61;</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode <span class="token operator">&#61;&#61;</span> <span class="token number">65</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;true&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;false&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/f596c9f32c2ef61465bde0ff255fa652.png" alt="image-20201019160028364" /></p> 
<p><strong>案例演示2&#xff1a;使div可以根据不同的方向键向不同的方向移动</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>box<span class="token punctuation">&#34;</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">&#61;&#34;</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span><span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> box <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;box&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//为document绑定一个按键按下的事件</span>
    document<span class="token punctuation">.</span><span class="token function-variable function">onkeydown</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        event <span class="token operator">&#61;</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>

        <span class="token comment">// 定义移动速度</span>
        <span class="token keyword">var</span> speed <span class="token operator">&#61;</span> <span class="token number">10</span><span class="token punctuation">;</span>

        <span class="token comment">// 选择移动方向</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token keyword">case</span> <span class="token number">37</span><span class="token punctuation">:</span>
                box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">&#61;</span> box<span class="token punctuation">.</span>offsetLeft <span class="token operator">-</span> speed <span class="token operator">&#43;</span> <span class="token string">&#34;px&#34;</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">39</span><span class="token punctuation">:</span>
                box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">&#61;</span> box<span class="token punctuation">.</span>offsetLeft <span class="token operator">&#43;</span> speed <span class="token operator">&#43;</span> <span class="token string">&#34;px&#34;</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">38</span><span class="token punctuation">:</span>
                box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">&#61;</span> box<span class="token punctuation">.</span>offsetTop <span class="token operator">-</span> speed <span class="token operator">&#43;</span> <span class="token string">&#34;px&#34;</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">40</span><span class="token punctuation">:</span>
                box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">&#61;</span> box<span class="token punctuation">.</span>offsetTop <span class="token operator">&#43;</span> speed <span class="token operator">&#43;</span> <span class="token string">&#34;px&#34;</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/6dcd6c4ddbb7e445435bdb5695352fc7.png" alt="image-20201021121141325" /></p> 
<p><strong>拓展知识&#xff1a;</strong></p> 
<p>当事件的响应函数被触发时&#xff0c;浏览器每次都会将一个事件对象作为实参传递进响应函数。</p> 
<p>Event 对象代表事件的状态&#xff0c;比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标的状态。</p> 
<p>在IE8中&#xff0c;响应函数被触发时&#xff0c;浏览器不会传递事件对象&#xff0c;在IE8及以下的浏览器中&#xff0c;是将事件对象作为window对象的属性保存的。</p> 
<p>解决事件对象的兼容性问题&#xff1a;<code>event &#61; event || window.event;</code></p> 
<p><strong>键鼠属性&#xff1a;</strong></p> 
<table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_ctrlkey.asp">ctrlKey</a></td><td align="left">返回当事件被触发时&#xff0c;“CTRL” 键是否被按下。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_altkey.asp">altKey</a></td><td align="left">返回当事件被触发时&#xff0c;“ALT” 是否被按下。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_shiftkey.asp">shiftKey</a></td><td align="left">返回当事件被触发时&#xff0c;“SHIFT” 键是否被按下。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_clientx.asp">clientX</a></td><td align="left">返回当事件被触发时&#xff0c;鼠标指针的水平坐标。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_clienty.asp">clientY</a></td><td align="left">返回当事件被触发时&#xff0c;鼠标指针的垂直坐标。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_screenx.asp">screenX</a></td><td align="left">返回当某个事件被触发时&#xff0c;鼠标指针的水平坐标。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_screeny.asp">screenY</a></td><td align="left">返回当某个事件被触发时&#xff0c;鼠标指针的垂直坐标。</td></tr></tbody></table> 
<h3><a id="445_4373"></a>4.4.5、鼠标事件</h3> 
<p>通过鼠标触发事件&#xff0c;类似用户的行为&#xff1a;</p> 
<table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">onclick</td><td align="left">当单击鼠标时运行脚本。</td></tr><tr><td align="left">ondblclick</td><td align="left">当双击鼠标时运行脚本。</td></tr><tr><td align="left">onmousedown</td><td align="left">当按下鼠标按钮时运行脚本。</td></tr><tr><td align="left">onmouseup</td><td align="left">当松开鼠标按钮时运行脚本。</td></tr><tr><td align="left">onmousemove</td><td align="left">当鼠标指针移动时运行脚本。</td></tr><tr><td align="left">onmouseover</td><td align="left">当鼠标指针移至元素之上时运行脚本&#xff0c;不可以阻止冒泡。</td></tr><tr><td align="left">onmouseout</td><td align="left">当鼠标指针移出元素时运行脚本&#xff0c;不可以阻止冒泡。</td></tr><tr><td align="left">onmouseenter</td><td align="left">当鼠标指针移至元素之上时运行脚本&#xff0c;可以阻止冒泡。</td></tr><tr><td align="left">onmouseleave</td><td align="left">当鼠标指针移出元素时运行脚本&#xff0c;可以阻止冒泡。</td></tr><tr><td align="left">onmousewheel</td><td align="left">当转动鼠标滚轮时运行脚本。</td></tr><tr><td align="left">onscroll</td><td align="left">当滚动元素的滚动条时运行脚本。</td></tr></tbody></table> 
<p><strong>案例演示1&#xff1a;创建一个正方形div&#xff0c;默认颜色为黑色&#xff0c;当鼠标移入div&#xff0c;背景颜色变为红色&#xff0c;当鼠标移出div&#xff0c;背景颜色变为绿色</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>box<span class="token punctuation">&#34;</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">&#61;&#34;</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span></span><span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> box <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;box&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 当鼠标移入div&#xff0c;背景颜色变为红色 */</span>
    box<span class="token punctuation">.</span><span class="token function-variable function">onmouseenter</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">&#61;</span> <span class="token string">&#34;red&#34;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">/* 当鼠标移出div&#xff0c;背景颜色变为绿色 */</span>
    box<span class="token punctuation">.</span><span class="token function-variable function">onmouseleave</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">&#61;</span> <span class="token string">&#34;green&#34;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/037cf65cf7cde9f4375a4ccadd933cc5.png" alt="image-20201021121332681" /></p> 
<p><strong>案例演示2&#xff1a;编写一个通用的拖拽元素函数&#xff0c;创建两个div&#xff0c;进行拖拽演示&#xff0c;要求兼容IE8、火狐、谷歌等主流浏览器</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>box1<span class="token punctuation">&#34;</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">&#61;&#34;</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span><span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>box2<span class="token punctuation">&#34;</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">&#61;&#34;</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span><span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> box1 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;box1&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> box2 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;box2&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">drag</span><span class="token punctuation">(</span>box1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">drag</span><span class="token punctuation">(</span>box2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*
     * 提取一个专门用来设置拖拽的函数
     * 参数&#xff1a;开启拖拽的元素
     */</span>
    <span class="token keyword">function</span> <span class="token function">drag</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token comment">//当鼠标在被拖拽元素上按下时&#xff0c;开始拖拽</span>
        obj<span class="token punctuation">.</span><span class="token function-variable function">onmousedown</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token comment">// 解决事件的兼容性问题</span>
            event <span class="token operator">&#61;</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>

            <span class="token comment">// 设置obj捕获所有鼠标按下的事件</span>
            <span class="token comment">/**
             * setCapture()&#xff1a;
             * 只有IE支持&#xff0c;但是在火狐中调用时不会报错&#xff0c;
             * 而如果使用chrome调用&#xff0c;它也会报错
             */</span>
            obj<span class="token punctuation">.</span>setCapture <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span><span class="token function">setCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// obj的偏移量 鼠标.clentX - 元素.offsetLeft</span>
            <span class="token comment">// obj的偏移量 鼠标.clentY - 元素.offsetTop</span>
            <span class="token keyword">var</span> ol <span class="token operator">&#61;</span> event<span class="token punctuation">.</span>clientX <span class="token operator">-</span> obj<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>
            <span class="token keyword">var</span> ot <span class="token operator">&#61;</span> event<span class="token punctuation">.</span>clientY <span class="token operator">-</span> obj<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>

            <span class="token comment">// 为document绑定一个鼠标移动事件</span>
            document<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
                <span class="token comment">// 解决事件的兼容性问题</span>
                event <span class="token operator">&#61;</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
                <span class="token comment">// 当鼠标移动时被拖拽元素跟随鼠标移动</span>
                <span class="token comment">// 获取鼠标的坐标</span>
                <span class="token keyword">var</span> left <span class="token operator">&#61;</span> event<span class="token punctuation">.</span>clientX <span class="token operator">-</span> ol<span class="token punctuation">;</span>
                <span class="token keyword">var</span> top <span class="token operator">&#61;</span> event<span class="token punctuation">.</span>clientY <span class="token operator">-</span> ot<span class="token punctuation">;</span>
                <span class="token comment">// 修改obj的位置</span>
                obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">&#61;</span> left <span class="token operator">&#43;</span> <span class="token string">&#34;px&#34;</span><span class="token punctuation">;</span>
                obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">&#61;</span> top <span class="token operator">&#43;</span> <span class="token string">&#34;px&#34;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            <span class="token comment">// 为document绑定一个鼠标松开事件</span>
            document<span class="token punctuation">.</span><span class="token function-variable function">onmouseup</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
                <span class="token comment">// 取消document的onmousemove事件</span>
                document<span class="token punctuation">.</span>onmousemove <span class="token operator">&#61;</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token comment">// 取消document的onmouseup事件</span>
                document<span class="token punctuation">.</span>onmouseup <span class="token operator">&#61;</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token comment">// 当鼠标松开时&#xff0c;取消对事件的捕获</span>
                obj<span class="token punctuation">.</span>releaseCapture <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span><span class="token function">releaseCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            <span class="token comment">/*
             * 当我们拖拽一个网页中的内容时&#xff0c;浏览器会默认去搜索引擎中搜索内容&#xff0c;
             * 此时会导致拖拽功能的异常&#xff0c;这个是浏览器提供的默认行为&#xff0c;
             * 如果不希望发生这个行为&#xff0c;则可以通过return false来取消默认行为&#xff0c;
             * 但是这招对IE8不起作用
             */</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/1ed4299c0d5122603c08a22f9a09dc99.png" alt="image-20201021120652857" /></p> 
<h3><a id="446_4506"></a>4.4.6、媒体事件</h3> 
<p>通过视频&#xff08;videos&#xff09;&#xff0c;图像&#xff08;images&#xff09;或音频&#xff08;audio&#xff09; 触发该事件。</p> 
<table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">onabort</td><td align="left">当发生中止事件时运行脚本。</td></tr><tr><td align="left">oncanplay</td><td align="left">当媒介能够开始播放但可能因缓冲而需要停止时运行脚本。</td></tr><tr><td align="left">oncanplaythrough</td><td align="left">当媒介能够无需因缓冲而停止即可播放至结尾时运行脚本。</td></tr><tr><td align="left">ondurationchange</td><td align="left">当媒介长度改变时运行脚本。</td></tr><tr><td align="left">onemptied</td><td align="left">当媒介资源元素突然为空时&#xff08;网络错误、加载错误等&#xff09;运行脚本。</td></tr><tr><td align="left">onended</td><td align="left">当媒介已抵达结尾时运行脚本。</td></tr><tr><td align="left">onerror</td><td align="left">当在元素加载期间发生错误时运行脚本。</td></tr><tr><td align="left">onloadeddata</td><td align="left">当加载媒介数据时运行脚本。</td></tr><tr><td align="left">onloadedmetadata</td><td align="left">当媒介元素的持续时间以及其它媒介数据已加载时运行脚本。</td></tr><tr><td align="left">onloadstart</td><td align="left">当浏览器开始加载媒介数据时运行脚本。</td></tr><tr><td align="left">onpause</td><td align="left">当媒介数据暂停时运行脚本。</td></tr><tr><td align="left">onplay</td><td align="left">当媒介数据将要开始播放时运行脚本。</td></tr><tr><td align="left">onplaying</td><td align="left">当媒介数据已开始播放时运行脚本。</td></tr><tr><td align="left">onprogress</td><td align="left">当浏览器正在取媒介数据时运行脚本。</td></tr><tr><td align="left">onratechange</td><td align="left">当媒介数据的播放速率改变时运行脚本。</td></tr><tr><td align="left">onreadystatechange</td><td align="left">当就绪状态&#xff08;ready-state&#xff09;改变时运行脚本。</td></tr><tr><td align="left">onseeked</td><td align="left">当媒介元素的定位属性不再为真且定位已结束时运行脚本。</td></tr><tr><td align="left">onseeking</td><td align="left">当媒介元素的定位属性为真且定位已开始时运行脚本。</td></tr><tr><td align="left">onstalled</td><td align="left">当取回媒介数据过程中&#xff08;延迟&#xff09;存在错误时运行脚本。</td></tr><tr><td align="left">onsuspend</td><td align="left">当浏览器已在取媒介数据但在取回整个媒介文件之前停止时运行脚本。</td></tr><tr><td align="left">ontimeupdate</td><td align="left">当媒介改变其播放位置时运行脚本。</td></tr><tr><td align="left">onvolumechange</td><td align="left">当媒介改变音量亦或当音量被设置为静音时运行脚本。</td></tr><tr><td align="left">onwaiting</td><td align="left">当媒介已停止播放但打算继续播放时运行脚本。</td></tr></tbody></table> 
<h3><a id="447_4536"></a>4.4.7、其它事件</h3> 
<table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">onshow</td><td align="left">当 &lt;menu&gt; 元素在上下文显示时触发。</td></tr><tr><td align="left">ontoggle</td><td align="left">当用户打开或关闭 &lt;details&gt; 元素时触发。</td></tr></tbody></table> 
<h3><a id="448_4543"></a>4.4.8、事件冒泡</h3> 
<p>事件的冒泡&#xff08;Bubble&#xff09;&#xff1a;所谓的冒泡指的就是事件的向上传导&#xff0c;当后代元素上的事件被触发时&#xff0c;其祖先元素的相同事件也会被触发&#xff0c;在开发中大部分情况冒泡都是有用的&#xff0c;如果不希望发生事件冒泡可以通过事件对象来取消冒泡。</p> 
<p><strong>案例演示1&#xff1a;创建两个div&#xff0c;叠放在一起&#xff0c;分别绑定单击事件&#xff0c;点击最里边的div&#xff0c;会触发两个div的单击事件</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style language-css">
        <span class="token selector">#div1</span> <span class="token punctuation">{<!-- --></span>
            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
            <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token selector">#div2</span> <span class="token punctuation">{<!-- --></span>
            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
            <span class="token property">background</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>div1<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    我是DIV1
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>div2<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
        我是DIV2
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> div1 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;div1&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> div2 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;div2&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 为div1绑定单击事件</span>
    div1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;div1 的单击事件触发了&#xff01;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 为div2绑定单击事件</span>
    div2<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;div2 的单击事件触发了&#xff01;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/ba87c18f487c6526af5a8a97a10c68bc.png" alt="image-20201021135641651" /></p> 
<p><strong>案例演示2&#xff1a;创建两个div&#xff0c;叠放在一起&#xff0c;分别绑定单击事件&#xff0c;点击最里边的div&#xff0c;不会触发两个div的单击事件&#xff0c;只会触发自己的单击事件&#xff0c;这时候我们可以取消事件冒泡</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style language-css">
        <span class="token selector">#div1</span> <span class="token punctuation">{<!-- --></span>
            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
            <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token selector">#div2</span> <span class="token punctuation">{<!-- --></span>
            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
            <span class="token property">background</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>div1<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    我是DIV1
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>div2<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
        我是DIV2
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> div1 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;div1&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> div2 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;div2&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 为div1绑定单击事件</span>
    div1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;div1 的单击事件触发了&#xff01;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">stopBubble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 为div2绑定单击事件</span>
    div2<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;div2 的单击事件触发了&#xff01;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">stopBubble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 取消事件冒泡</span>
    <span class="token keyword">function</span> <span class="token function">stopBubble</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token comment">// 如果提供了事件对象&#xff0c;则这是一个非IE浏览器</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token comment">// 因此它支持W3C的stopPropagation()方法</span>
            event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
            <span class="token comment">// 否则&#xff0c;我们需要使用IE的方式来取消事件冒泡</span>
            window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>cancelBubble <span class="token operator">&#61;</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/808bc3dd4059e2806c1d0ff5a9de8ac4.png" alt="image-20201021140430458" /></p> 
<p><strong>案例演示3&#xff1a;当点击a标签的时候&#xff0c;阻止a标签的默认跳转事件&#xff0c;采用事件阻止</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style language-css">
        <span class="token selector">#div1</span> <span class="token punctuation">{<!-- --></span>
            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
            <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token selector">#div2</span> <span class="token punctuation">{<!-- --></span>
            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
            <span class="token property">background</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>https://www.baidu.com<span class="token punctuation">&#34;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>a<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>打开百度&#xff0c;你就知道&#xff01;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> a <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;a&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 为a绑定单击事件</span>
    a<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token function">stopDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 阻止浏览器的默认行为</span>
    <span class="token keyword">function</span> <span class="token function">stopDefault</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>preventDefault<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token comment">// 阻止默认浏览器动作(W3C)</span>
            event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
            <span class="token comment">// IE中阻止函数器默认动作的方式</span>
            window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>returnValue <span class="token operator">&#61;</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/bfb4c4a79727ce4a694cf954081825ea.png" alt="image-20201021140928214" /></p> 
<h3><a id="449_4715"></a>4.4.9、事件委派</h3> 
<p>我们希望只绑定一次事件&#xff0c;即可应用到多个的元素上&#xff0c;即使元素是后添加的&#xff0c;我们可以尝试将其绑定给元素的共同的祖先元素&#xff0c;也就是事件的委派。事件的委派&#xff0c;是指将事件统一绑定给元素的共同的祖先元素&#xff0c;这样当后代元素上的事件触发时&#xff0c;会一直冒泡到祖先元素&#xff0c;从而通过祖先元素的响应函数来处理事件。事件委派是利用了事件冒泡&#xff0c;通过委派可以减少事件绑定的次数&#xff0c;提高程序的性能。</p> 
<p><strong>案例演示&#xff1a;为ul列表中的所有a标签都绑定单击事件</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>u1<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>javascript:;<span class="token punctuation">&#34;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>link<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>超链接一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>javascript:;<span class="token punctuation">&#34;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>link<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>超链接二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>javascript:;<span class="token punctuation">&#34;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>link<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>超链接三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> u1 <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;u1&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 为ul绑定一个单击响应函数</span>
    u1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        event <span class="token operator">&#61;</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
        <span class="token comment">// 如果触发事件的对象是我们期望的元素&#xff0c;则执行&#xff0c;否则不执行</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>className <span class="token operator">&#61;&#61;</span> <span class="token string">&#34;link&#34;</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;我是ul的单击响应函数&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/c91cf2da0f845694fe0be4e024e376d4.png" alt="image-20201021134924509" /></p> 
<h3><a id="4410_4754"></a>4.4.10、事件绑定</h3> 
<p>我们以前绑定事件代码只能一个事件绑定一个函数&#xff0c;那我们要是想一个事件对应多个函数&#xff0c;并且不存在兼容性的问题该如何解决呢&#xff1f;</p> 
<p>接下来&#xff0c;我会直接提供两个已经编写好的事件绑定和事件解绑的兼容性代码&#xff0c;如下&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token comment">/*为元素绑定事件兼容性代码*/</span>
<span class="token keyword">function</span> <span class="token function">addEventListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		element<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&#34;on&#34;</span> <span class="token operator">&#43;</span> type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
		element<span class="token punctuation">[</span><span class="token string">&#34;on&#34;</span> <span class="token operator">&#43;</span> type<span class="token punctuation">]</span> <span class="token operator">&#61;</span> fn<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*为元素解绑事件兼容性代码*/</span>
<span class="token keyword">function</span> <span class="token function">removeEventListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> fnName<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fnName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>detachEvent<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
		element<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">&#34;on&#34;</span> <span class="token operator">&#43;</span> type<span class="token punctuation">,</span> fnName<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
		element<span class="token punctuation">[</span><span class="token string">&#34;on&#34;</span> <span class="token operator">&#43;</span> type<span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
<p><strong>案例演示&#xff1a;为按钮1的单击事件绑定两个函数&#xff0c;然后点击按钮2取消按钮1的单机事件绑定函数f1</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>btn1<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>按钮1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>btn2<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>按钮2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;output1 ...&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;output2 ...&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 为按钮1的单击事件绑定两个函数</span>
    <span class="token function">addEventListener</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;btn1&#34;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#34;click&#34;</span><span class="token punctuation">,</span> f1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">addEventListener</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;btn1&#34;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#34;click&#34;</span><span class="token punctuation">,</span> f2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 点击按钮2取消按钮1的单机事件绑定函数f1</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;btn2&#34;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token function">removeEventListener</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;btn1&#34;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#34;click&#34;</span><span class="token punctuation">,</span> f1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">/*为元素绑定事件兼容性代码*/</span>
    <span class="token keyword">function</span> <span class="token function">addEventListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            element<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&#34;on&#34;</span> <span class="token operator">&#43;</span> type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
            element<span class="token punctuation">[</span><span class="token string">&#34;on&#34;</span> <span class="token operator">&#43;</span> type<span class="token punctuation">]</span> <span class="token operator">&#61;</span> fn<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/*为元素解绑事件兼容性代码*/</span>
    <span class="token keyword">function</span> <span class="token function">removeEventListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> fnName<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fnName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>detachEvent<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            element<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">&#34;on&#34;</span> <span class="token operator">&#43;</span> type<span class="token punctuation">,</span> fnName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
            element<span class="token punctuation">[</span><span class="token string">&#34;on&#34;</span> <span class="token operator">&#43;</span> type<span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p>谷歌浏览器&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/565bee515261af37f290f515562dd05a.png" alt="image-20201021143905794" /></p> 
<p>火狐浏览器&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/6bf58432640db9359ac8d4d5ccfb3260.png" alt="image-20201021143929547" /></p> 
<p>IE8-IE11浏览器&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/3165e958579ea6d89a76a30a2aea4eb5.png" alt="image-20201021144005993" /></p> 
<h3><a id="4411_4854"></a>4.4.11、事件传播</h3> 
<p>事件的传播&#xff1a;关于事件的传播网景公司和微软公司有不同的理解</p> 
<p>微软公司认为事件应该是由内向外传播&#xff0c;也就是当事件触发时&#xff0c;应该先触发当前元素上的事件&#xff0c;然后再向当前元素的祖先元素上传播&#xff0c;也就说事件应该在冒泡阶段执行。</p> 
<p>网景公司认为事件应该是由外向内传播的&#xff0c;也就是当前事件触发时&#xff0c;应该先触发当前元素的最外层的祖先元素的事件&#xff0c;然后在向内传播给后代元素。</p> 
<p>W3C综合了两个公司的方案&#xff0c;将事件传播分成了三个阶段&#xff1a;</p> 
<ol><li>捕获阶段&#xff1a;在捕获阶段时从最外层的祖先元素&#xff0c;向目标元素进行事件的捕获&#xff0c;但是默认此时不会触发事件</li><li>目标阶段&#xff1a;事件捕获到目标元素&#xff0c;捕获结束开始在目标元素上触发事件</li><li>冒泡阶段&#xff1a;事件从目标元素向它的祖先元素传递&#xff0c;依次触发祖先元素上的事件</li></ol> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/606369d19295725d727fd8a04285f3e2.png" alt="image-20201021145200137" /></p> 
<blockquote> 
 <p>注意&#xff1a;如果希望在捕获阶段就触发事件&#xff0c;可以将addEventListener()的第三个参数设置为true&#xff0c;一般情况下我们不会希望在捕获阶段触发事件&#xff0c;所以这个参数一般都是false&#xff0c;并且注意&#xff0c;IE8及以下的浏览器中没有捕获阶段&#xff0c;我们可以使用<code>event.stopPropagation();</code>取消事件传播。</p> 
</blockquote> 
<h1><a id="_JavaScript_BOM_4872"></a>第五章 JavaScript BOM</h1> 
<h2><a id="51BOM_4874"></a>5.1、BOM概述</h2> 
<p>浏览器对象模型&#xff08;BOM&#xff09;使 JavaScript 有能力与浏览器&#34;对话&#34;。</p> 
<p>浏览器对象模型&#xff08;<strong>B</strong>rowser <strong>O</strong>bject <strong>M</strong>odel (BOM)&#xff09;尚无正式标准。</p> 
<p>由于现代浏览器已经&#xff08;几乎&#xff09;实现了 JavaScript 交互性方面的相同方法和属性&#xff0c;因此常被认为是BOM的方法和属性。</p> 
<p>浏览器对象模型&#xff08;BOM&#xff09;可以使我们通过JS来操作浏览器&#xff0c;在BOM中为我们提供了一组对象&#xff0c;用来完成对浏览器的操作&#xff0c;常见的BOM对象如下&#xff1a;</p> 
<ul><li>Window&#xff1a;代表的是整个浏览器的窗口&#xff0c;同时window也是网页中的全局对象</li><li>Navigator&#xff1a;代表的当前浏览器的信息&#xff0c;通过该对象可以来识别不同的浏览器</li><li>Location&#xff1a;代表当前浏览器的地址栏信息&#xff0c;通过Location可以获取地址栏信息&#xff0c;或者操作浏览器跳转页面</li><li>History&#xff1a;代表浏览器的历史记录&#xff0c;可以通过该对象来操作浏览器的历史记录&#xff0c;由于隐私原因&#xff0c;该对象不能获取到具体的历史记录&#xff0c;只能操作浏览器向前或向后翻页&#xff0c;而且该操作只在当次访问时有效</li><li>Screen&#xff1a;代表用户的屏幕的信息&#xff0c;通过该对象可以获取到用户的显示器的相关的信息</li></ul> 
<p>这些BOM对象在浏览器中都是作为window对象的属性保存的&#xff0c;可以通过window对象来使用&#xff0c;也可以直接使用。</p> 
<h2><a id="52Window_4892"></a>5.2、Window对象</h2> 
<h3><a id="521_4894"></a>5.2.1、弹出框</h3> 
<p><strong>JavaScript 有三种类型的弹出框&#xff1a;警告框、确认框和提示框。</strong></p> 
<h4><a id="5211_4898"></a>5.2.1.1、警告框</h4> 
<p>如果要确保信息传递给用户&#xff0c;通常会使用警告框。当警告框弹出时&#xff0c;用户将需要单击“确定”来继续。</p> 
<p><strong>语法</strong></p> 
<pre><code class="prism language-javascript">window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#34;sometext&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<blockquote> 
 <p>注意&#xff1a;window.alert() 方法可以不带 window 前缀来写。</p> 
</blockquote> 
<p><strong>实例</strong></p> 
<pre><code class="prism language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#34;我是一个警告框&#xff01;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<h4><a id="5212_4916"></a>5.2.1.2、确认框</h4> 
<p>如果您希望用户验证或接受某个东西&#xff0c;则通常使用“确认”框。</p> 
<p>当确认框弹出时&#xff0c;用户将不得不单击“确定”或“取消”来继续进行。</p> 
<p>如果用户单击“确定”&#xff0c;该框返回 true。如果用户单击“取消”&#xff0c;该框返回 false。</p> 
<p><strong>语法</strong></p> 
<pre><code class="prism language-javascript">window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">&#34;sometext&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<blockquote> 
 <p>注意&#xff1a;window.confirm() 方法可以不带 window 前缀来编写。</p> 
</blockquote> 
<p><strong>实例</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> r <span class="token operator">&#61;</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">&#34;请按按钮&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&#61;&#61;</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    x <span class="token operator">&#61;</span> <span class="token string">&#34;您按了确认&#xff01;&#34;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
    x <span class="token operator">&#61;</span> <span class="token string">&#34;您按了取消&#xff01;&#34;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h4><a id="5213_4943"></a>5.2.1.3、提示框</h4> 
<p>如果您希望用户在进入页面前输入值&#xff0c;通常会使用提示框。</p> 
<p>当提示框弹出时&#xff0c;用户将不得不输入值后单击“确定”或点击“取消”来继续进行。</p> 
<p>如果用户单击“确定”&#xff0c;该框返回输入值。如果用户单击“取消”&#xff0c;该框返回 NULL。</p> 
<p><strong>语法</strong></p> 
<pre><code class="prism language-javascript">window<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#34;sometext&#34;</span><span class="token punctuation">,</span><span class="token string">&#34;defaultText&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p>window.prompt() 方法可以不带 window 前缀来编写。</p> 
<p><strong>实例</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> person <span class="token operator">&#61;</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#34;请输入您的姓名&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;比尔盖茨&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>person <span class="token operator">!&#61;</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="522_4968"></a>5.2.2、定时事件</h3> 
<p><strong>JavaScript 可以在时间间隔内执行&#xff0c;这就是所谓的定时事件&#xff08; Timing Events&#xff09;。</strong></p> 
<p>window 对象允许以指定的时间间隔执行代码&#xff0c;这些时间间隔称为定时事件。</p> 
<p>通过 JavaScript 使用的有两个关键的方法&#xff1a;</p> 
<ul><li> <p>setTimeout(<em>function</em>, <em>milliseconds</em>)</p> <p>在等待指定的毫秒数后执行函数。</p> </li><li> <p>setInterval(<em>function</em>, <em>milliseconds</em>)</p> <p>等同于 setTimeout()&#xff0c;但持续重复执行该函数。</p> </li></ul> 
<p>setTimeout() 和 setInterval() 都属于 window 对象的方法。</p> 
<h4><a id="5221_4986"></a>5.2.2.1、延时器</h4> 
<p><strong>setTimeout() 方法&#xff1a;延时器</strong></p> 
<pre><code class="prism language-javascript">window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">,</span> milliseconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<blockquote> 
 <p>注意&#xff1a;window.setTimeout() 方法可以不带 window 前缀来编写。</p> 
</blockquote> 
<ul><li>第一个参数是要执行的函数。</li><li>第二个参数指示执行之前的毫秒数。</li></ul> 
<p><strong>案例演示&#xff1a;单击按钮&#xff0c;等待 3 秒&#xff0c;然后控制台会输出 &#34;Hello&#34;</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>btn<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> btn <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;btn&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token comment">// 创建延时器</span>
        <span class="token keyword">var</span> timer <span class="token operator">&#61;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;Hello&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 清除延时器</span>
        <span class="token comment">// clearTimeout(timer);        </span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<h4><a id="5222_5029"></a>5.2.2.2、定时器</h4> 
<p><strong>setInterval() 方法&#xff1a;定时器</strong></p> 
<p>setInterval() 方法在每个给定的时间间隔重复给定的函数。</p> 
<pre><code class="prism language-javascript">window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">,</span> milliseconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<blockquote> 
 <p>注意&#xff1a;window.setInterval() 方法可以不带 window 前缀来写。</p> 
</blockquote> 
<ul><li>第一个参数是要执行的函数。</li><li>第二个参数每个执行之间的时间间隔的长度。</li></ul> 
<p><strong>案例演示&#xff1a;单击按钮&#xff0c;每隔一秒向控制台输出 &#34;Hello&#34;</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>btn<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> btn <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;btn&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token comment">// 创建定时器</span>
        <span class="token keyword">var</span> timer <span class="token operator">&#61;</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;Hello&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 清除定时器</span>
        <span class="token comment">// clearInterval(timer);</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><strong>拓展知识&#xff1a;</strong></p> 
<p>做一个通用移动函数来实现小汽车&#xff08;黑色方块&#xff09;移动的效果</p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style language-css">
        <span class="token comment">/*控制器样式*/</span>
        <span class="token selector">.controller</span> <span class="token punctuation">{<!-- --></span>
            <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
            <span class="token property">line-height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token selector">.controller button</span> <span class="token punctuation">{<!-- --></span>
            <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
            <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
            <span class="token property">margin</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>
            <span class="token property">padding</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
            <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
            <span class="token property">line-height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> #E9E9E9<span class="token punctuation">;</span>
            <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>
            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
            <span class="token property">-webkit-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
            <span class="token property">-moz-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
            <span class="token property">border</span><span class="token punctuation">:</span> 2px solid #F0F0F0<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token selector">.controller button:hover</span> <span class="token punctuation">{<!-- --></span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> #F9F9F9<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token comment">/*公路样式*/</span>
        <span class="token selector">.road</span> <span class="token punctuation">{<!-- --></span>
            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
            <span class="token property">margin-top</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
            <span class="token property">background</span><span class="token punctuation">:</span> #3DB1FF<span class="token punctuation">;</span>
            <span class="token property">opacity</span><span class="token punctuation">:</span> .90<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token selector">.road800</span> <span class="token punctuation">{<!-- --></span>
            <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
            <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
            <span class="token property">top</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>
            <span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>
            <span class="token property">z-index</span><span class="token punctuation">:</span> 1000<span class="token punctuation">;</span>
            <span class="token property">opacity</span><span class="token punctuation">:</span> .75<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token selector">.road1200</span> <span class="token punctuation">{<!-- --></span>
            <span class="token property">width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
            <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>
            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
            <span class="token property">top</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>
            <span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>
            <span class="token property">z-index</span><span class="token punctuation">:</span> 500<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token comment">/*小汽车样式*/</span>
        <span class="token selector">div#car</span> <span class="token punctuation">{<!-- --></span>
            <span class="token property">width</span><span class="token punctuation">:</span> 135px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
            <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
            <span class="token property">top</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>
            <span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>
            <span class="token property">z-index</span><span class="token punctuation">:</span> 1500<span class="token punctuation">;</span>
            <span class="token property">-webkit-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
            <span class="token property">-moz-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
            <span class="token comment">/*border: 1px solid #F0F0F0;*/</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>controller<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>btn1<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>移动到800PX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>btn2<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>移动到1200PX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>btn3<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>回家<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>road<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>road800<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>road1200<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>car<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;btn1&#34;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token function">move</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;car&#34;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;btn2&#34;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token function">move</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;car&#34;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;btn3&#34;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token function">move</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;car&#34;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">/*移动函数*/</span>
    <span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token comment">// 先清理定时器</span>
        <span class="token function">clearInterval</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>timeId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 一会要清理定时器(只产生一个定时器)</span>
        element<span class="token punctuation">.</span>timeId <span class="token operator">&#61;</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token comment">// 获取对象当前的位置</span>
            <span class="token keyword">var</span> current <span class="token operator">&#61;</span> element<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>
            <span class="token comment">// 每次移动多少像素</span>
            <span class="token keyword">var</span> step <span class="token operator">&#61;</span> <span class="token number">10</span><span class="token punctuation">;</span>
            <span class="token comment">// 判断是往正方向走还是往相反方向走</span>
            step <span class="token operator">&#61;</span> current <span class="token operator">&lt;</span> target <span class="token operator">?</span> step <span class="token punctuation">:</span> <span class="token operator">-</span>step<span class="token punctuation">;</span>
            <span class="token comment">// 每次移动后的距离</span>
            current <span class="token operator">&#43;&#61;</span> step<span class="token punctuation">;</span>
            <span class="token comment">// 判断当前移动后的位置是否到达目标位置</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>target <span class="token operator">-</span> current<span class="token punctuation">)</span> <span class="token operator">&gt;</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
                element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">&#61;</span> current <span class="token operator">&#43;</span> <span class="token string">&#34;px&#34;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
                <span class="token comment">// 清理定时器</span>
                <span class="token function">clearInterval</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>timeId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">&#61;</span> target <span class="token operator">&#43;</span> <span class="token string">&#34;px&#34;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/ca0829497172a492ca72738eaea27612.png" alt="image-20201022093955689" /></p> 
<h3><a id="523_5223"></a>5.2.3、常用窗口属性</h3> 
<p>两个属性可用用于确定浏览器窗口的尺寸。</p> 
<p>这两个属性都以像素返回尺寸&#xff1a;</p> 
<ul><li>window.innerHeight - 浏览器窗口的内高度&#xff08;以像素计&#xff09;</li><li>window.innerWidth - 浏览器窗口的内宽度&#xff08;以像素计&#xff09;</li></ul> 
<p>浏览器窗口&#xff08;浏览器视口&#xff09;不包括工具栏和滚动条。</p> 
<p>对于 Internet Explorer 8, 7, 6, 5&#xff1a;</p> 
<ul><li>document.documentElement.clientHeight</li><li>document.documentElement.clientWidth</li></ul> 
<p>或</p> 
<ul><li>document.body.clientHeight</li><li>document.body.clientWidth</li></ul> 
<p>一个实用的 JavaScript 解决方案&#xff08;包括所有浏览器&#xff09;&#xff1a;该例显示浏览器窗口的高度和宽度&#xff08;不包括工具栏和滚动条&#xff09;</p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">var</span> w <span class="token operator">&#61;</span> window<span class="token punctuation">.</span>innerWidth
        <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth
        <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>

    <span class="token keyword">var</span> h <span class="token operator">&#61;</span> window<span class="token punctuation">.</span>innerHeight
        <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight
        <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<h3><a id="524_5272"></a>5.2.4、其它窗口方法</h3> 
<ul><li> <p><strong>window.open() &#xff1a;打开新的窗口</strong></p> <p>语法介绍&#xff1a;</p> <pre><code class="prism language-javascript">window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>specs<span class="token punctuation">,</span>replace<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> <p>参数介绍&#xff1a;</p> <p><img src="https://img-blog.csdnimg.cn/img_convert/786bc5b7eacc1a8aba149c0741484aee.png" alt="image-20201022094734710" /></p> <p>案例演示&#xff1a;</p> <pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>openWin()<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>打开窗口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">function</span> <span class="token function">openWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        myWindow <span class="token operator">&#61;</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;width&#61;200,height&#61;100&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#34;&lt;p&gt;这是新建窗口&lt;/p&gt;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> </li><li> <p><strong>window.close() &#xff1a;关闭当前窗口</strong></p> <p>语法介绍&#xff1a;</p> <pre><code class="prism language-javascript">window<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> <p>案例演示&#xff1a;</p> <pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>openWin()<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>打开窗口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>closeWin()<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>关闭窗口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">function</span> <span class="token function">openWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        myWindow <span class="token operator">&#61;</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;width&#61;200,height&#61;100&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#34;&lt;p&gt;这是新建窗口&lt;/p&gt;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">closeWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        myWindow<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> </li><li> <p><strong>window.moveTo() &#xff1a;移动当前窗口</strong></p> <p>语法介绍&#xff1a;</p> <pre><code class="prism language-javascript">window<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> <p>案例演示&#xff1a;</p> <pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>openWin()<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>打开窗口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>moveWin()<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>移动窗口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">function</span> <span class="token function">openWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        myWindow <span class="token operator">&#61;</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;width&#61;200,height&#61;100&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#34;&lt;p&gt;这是新建窗口&lt;/p&gt;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">moveWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        myWindow<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myWindow<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> </li><li> <p><strong>window.resizeTo() &#xff1a;调整当前窗口</strong></p> <p>语法介绍&#xff1a;</p> <pre><code class="prism language-javascript">window<span class="token punctuation">.</span><span class="token function">resizeTo</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> <p>案例演示&#xff1a;</p> <pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>openWin()<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>打开窗口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>resizeWin()<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>调整窗口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">function</span> <span class="token function">openWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        myWindow <span class="token operator">&#61;</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;width&#61;200,height&#61;100&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#34;&lt;p&gt;这是新建窗口&lt;/p&gt;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">resizeWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        myWindow<span class="token punctuation">.</span><span class="token function">resizeTo</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myWindow<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> </li></ul> 
<h2><a id="53Navigator_5419"></a>5.3、Navigator对象</h2> 
<p>Navigator代表的当前浏览器的信息&#xff0c;通过该对象可以来识别不同的浏览器&#xff0c;由于历史原因&#xff0c;Navigator对象中的大部分属性都已经不能帮助我们识别浏览器了&#xff0c;一般我们只会使用userAgent来判断浏览器的信息&#xff0c;userAgent是一个字符串&#xff0c;这个字符串中包含有用来描述浏览器信息的内容&#xff0c;不同的浏览器会有不同的userAgent&#xff0c;如下代码&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> ua <span class="token operator">&#61;</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p>谷歌浏览器&#xff1a;</p> 
<ul><li>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36</li></ul> 
<p>火狐浏览器&#xff1a;</p> 
<ul><li>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:81.0) Gecko/20100101 Firefox/81.0</li></ul> 
<p>IE11浏览器&#xff1a;</p> 
<ul><li>Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; rv:11.0) like Gecko</li></ul> 
<p>IE10浏览器&#xff1a;</p> 
<ul><li>Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)</li></ul> 
<p>IE9浏览器&#xff1a;</p> 
<ul><li>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)</li></ul> 
<p>IE8浏览器&#xff1a;</p> 
<ul><li>Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)</li></ul> 
<p>IE7浏览器&#xff1a;</p> 
<ul><li>Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)</li></ul> 
<p>于是乎&#xff0c;我们就可以实现对浏览器类型的判断&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> ua <span class="token operator">&#61;</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/firefox/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#34;你是火狐浏览器&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/chrome/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#34;你是谷歌浏览器&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/msie/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#34;你是IE5-IE10浏览器&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#34;ActiveXObject&#34;</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#34;你是IE11浏览器&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<blockquote> 
 <p>注意&#xff1a;在IE11中已经将微软和IE相关的标识都已经去除了&#xff0c;所以我们基本已经不能通过UserAgent来识别一个浏览器是否是IE了&#xff0c;如果通过UserAgent不能判断&#xff0c;还可以通过一些浏览器中特有的对象&#xff0c;来判断浏览器的信息&#xff0c;比如&#xff1a;ActiveXObject</p> 
</blockquote> 
<h2><a id="54Location_5473"></a>5.4、Location对象</h2> 
<p>Location对象中封装了浏览器的地址栏的信息&#xff0c;如果直接打印location&#xff0c;则可以获取到地址栏的信息&#xff08;当前页面的完整路径&#xff09;</p> 
<h3><a id="541_5477"></a>5.4.1、常用属性</h3> 
<p>常用属性&#xff1a;</p> 
<pre><code class="prism language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//输出location对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//输出当前地址的全路径地址</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出当前地址的来源</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出当前地址的协议</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hostname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出当前地址的主机名</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//输出当前地址的主机</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//输出当前地址的端口号</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出当前地址的路径部分</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出当前地址的?后边的参数部分</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/8d92b74a6a79761ba5256a6e533464fb.png" alt="image-20201022115026894" /></p> 
<p>修改地址&#xff1a;</p> 
<pre><code class="prism language-javascript">location <span class="token operator">&#61;</span> <span class="token string">&#34;https://www.baidu.com&#34;</span><span class="token punctuation">;</span>
</code></pre> 
<pre><code class="prism language-javascript">location<span class="token punctuation">.</span>href <span class="token operator">&#61;</span> <span class="token string">&#34;https://www.baidu.com&#34;</span><span class="token punctuation">;</span>
</code></pre> 
<h3><a id="542_5505"></a>5.4.2、常用方法</h3> 
<p>assign()&#xff1a;用来跳转到其它的页面&#xff0c;作用和直接修改location一样</p> 
<pre><code class="prism language-javascript">location<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">&#34;https://www.baidu.com&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p>reload()&#xff1a;用于重新加载当前页面&#xff0c;作用和刷新按钮一样&#xff0c;如果在方法中传递一个true&#xff0c;作为参数&#xff0c;则会强制清空缓存刷新页面</p> 
<pre><code class="prism language-javascript">location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p>replace()&#xff1a;可以使用一个新的页面替换当前页面&#xff0c;调用完毕也会跳转页面&#xff0c;它不会生成历史记录&#xff0c;不能使用回退按钮回退</p> 
<pre><code class="prism language-javascript">location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#34;https://www.baidu.com&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<h2><a id="55History_5525"></a>5.5、History对象</h2> 
<p>History对象可以用来操作浏览器向前或向后翻页</p> 
<h3><a id="551_5529"></a>5.5.1、常用属性</h3> 
<pre><code class="prism language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>history<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//输出history对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//可以获取到当成访问的链接数量</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/3075d1de3bdaf4848f9da17f494d8d8e.png" alt="image-20201022114945012" /></p> 
<h3><a id="552_5538"></a>5.5.2、常用方法</h3> 
<p>back()&#xff1a;可以回退到上一个页面&#xff0c;作用和浏览器的回退按钮一样</p> 
<pre><code class="prism language-javascript">history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p>forward()&#xff1a;可以跳转到下一个页面&#xff0c;作用和浏览器的前进按钮一样</p> 
<pre><code class="prism language-javascript">history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p>go()&#xff1a;可以用来跳转到指定的页面&#xff0c;它需要一个整数作为参数</p> 
<ul><li>1&#xff1a;表示向前跳转一个页面&#xff0c;相当于forward()</li><li>2&#xff1a;表示向前跳转两个页面</li><li>-1&#xff1a;表示向后跳转一个页面&#xff0c;相当于back()</li><li>-2&#xff1a;表示向后跳转两个页面</li></ul> 
<pre><code class="prism language-javascript">history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<h2><a id="56Screen_5563"></a>5.6、Screen对象</h2> 
<p>Screen 对象包含有关客户端显示屏幕的信息。</p> 
<blockquote> 
 <p>注意&#xff1a;没有应用于 screen 对象的公开标准&#xff0c;不过所有浏览器都支持该对象。</p> 
</blockquote> 
<h3><a id="561Screen_5569"></a>5.6.1、Screen对象描述</h3> 
<p>每个 Window 对象的 screen 属性都引用一个 Screen 对象。Screen 对象中存放着有关显示浏览器屏幕的信息。JavaScript 程序将利用这些信息来优化它们的输出&#xff0c;以达到用户的显示要求。例如&#xff0c;一个程序可以根据显示器的尺寸选择使用大图像还是使用小图像&#xff0c;它还可以根据显示器的颜色深度选择使用 16 位色还是使用 8 位色的图形。另外&#xff0c;JavaScript 程序还能根据有关屏幕尺寸的信息将新的浏览器窗口定位在屏幕中间。</p> 
<h3><a id="562Screen_5573"></a>5.6.2、Screen对象属性</h3> 
<table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/prop_screen_availheight.asp">availHeight</a></td><td align="left">返回显示屏幕的高度 (除 Windows 任务栏之外)。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/prop_screen_availwidth.asp">availWidth</a></td><td align="left">返回显示屏幕的宽度 (除 Windows 任务栏之外)。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/prop_screen_bufferdepth.asp">bufferDepth</a></td><td align="left">设置或返回调色板的比特深度。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/prop_screen_colordepth.asp">colorDepth</a></td><td align="left">返回目标设备或缓冲器上的调色板的比特深度。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/prop_screen_devicexdpi.asp">deviceXDPI</a></td><td align="left">返回显示屏幕的每英寸水平点数。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/prop_screen_deviceydpi.asp">deviceYDPI</a></td><td align="left">返回显示屏幕的每英寸垂直点数。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/prop_screen_fontsmoothingenabled.asp">fontSmoothingEnabled</a></td><td align="left">返回用户是否在显示控制面板中启用了字体平滑。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/prop_screen_height.asp">height</a></td><td align="left">返回显示屏幕的高度。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/prop_screen_logicalxdpi.asp">logicalXDPI</a></td><td align="left">返回显示屏幕每英寸的水平方向的常规点数。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/prop_screen_logicalydpi.asp">logicalYDPI</a></td><td align="left">返回显示屏幕每英寸的垂直方向的常规点数。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/prop_screen_pixeldepth.asp">pixelDepth</a></td><td align="left">返回显示屏幕的颜色分辨率&#xff08;比特每像素&#xff09;。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/prop_screen_updateinterval.asp">updateInterval</a></td><td align="left">设置或返回屏幕的刷新率。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/prop_screen_width.asp">width</a></td><td align="left">返回显示器屏幕的宽度。</td></tr></tbody></table> 
<h1><a id="_JavaScript_5591"></a>第六章 JavaScript高级语法</h1> 
<h2><a id="61Exception_5593"></a>6.1、Exception</h2> 
<h3><a id="611_5595"></a>6.1.1、异常概述</h3> 
<p>在ES3之前JavaScript代码执行的过程中&#xff0c;一旦出现错误&#xff0c;整个JavaScript代码都会停止执行&#xff0c;这样就显的代码非常的不健壮。</p> 
<p>在Java或C#等一些高级语言中&#xff0c;都提供了异常处理机制&#xff0c;可以处理出现的异常&#xff0c;而不会停止整个应用程序。</p> 
<p>从ES3开始&#xff0c;JavaScript也提供了类似的异常处理机制&#xff0c;从而让JavaScript代码变的更健壮&#xff0c;即使执行的过程中出现了异常&#xff0c;也可以让程序具有了一部分的异常恢复能力。</p> 
<p>当错误发生时&#xff0c;JavaScript 提供了错误信息的内置 error 对象。</p> 
<p>error 对象提供两个有用的属性&#xff1a;<code>name</code> 和 <code>message</code> 。</p> 
<p><strong>Error 对象属性</strong></p> 
<table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">name</td><td align="left">设置或返回错误名</td></tr><tr><td align="left">message</td><td align="left">设置或返回错误消息&#xff08;一条字符串&#xff09;</td></tr></tbody></table> 
<p><strong>Error Name Values</strong></p> 
<p>error 的 name 属性可返回六个不同的值&#xff1a;</p> 
<table><thead><tr><th align="left">错误名</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">EvalError</td><td align="left">已在 eval() 函数中发生的错误</td></tr><tr><td align="left">RangeError</td><td align="left">已发生超出数字范围的错误</td></tr><tr><td align="left">ReferenceError</td><td align="left">已发生非法引用</td></tr><tr><td align="left">SyntaxError</td><td align="left">已发生语法错误</td></tr><tr><td align="left">TypeError</td><td align="left">已发生类型错误</td></tr><tr><td align="left">URIError</td><td align="left">在 encodeURI() 中已发生的错误</td></tr></tbody></table> 
<h3><a id="612_5627"></a>6.1.2、异常捕捉</h3> 
<p>ES3开始引入了 try-catch 语句&#xff0c;是 JavaScript 中处理异常的标准方式。</p> 
<p>语法格式&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">// 可能发生异常的代码</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">// 发生错误执行的代码</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">// 无论是否出错都会执行的代码</span>
<span class="token punctuation">}</span>
</code></pre> 
<p>在 try…catch 中&#xff0c;try 中一旦出现错误则其它语句不能执行&#xff0c;如果不出现错误则 catch 中的语句不会执行。</p> 
<p>Javascript 参考其它编程语言&#xff0c;也提供了一种 finally 语句&#xff1a;不管 try 中的语句有没有错误&#xff0c;在最后都会执行 finally 中的语句。也就是说&#xff0c;try 中语句不发生错误执行完毕后会执行 finally 中的语句&#xff0c;try 中的语句发生错误&#xff0c;则执行 catch中的语句&#xff0c;catch 中的语句执行完毕后也会执行 finally 中的语句。</p> 
<p>案例演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;a未定义肯定报错&#xff0c;你看不见我&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">// 发生错误执行的代码</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">// 无论是否出错都会执行的代码</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;finally 执行了 ...&#34;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/6d678270bcee5c15d0e826cb9c4adb5d.png" alt="image-20201023080345639" /></p> 
<p>在JavaScript中&#xff0c;如果添加了 finally 语句&#xff0c;则 catch 语句可以省略。但是如果没有 catch 语句&#xff0c;则一旦发生错误就无法捕获这个错误&#xff0c;所以在执行完 finally 中的语句后&#xff0c;程序就会立即停止了。所以&#xff0c;在实际使用中&#xff0c;最好一直带着 catch 语句。如果你写了 catch 语句&#xff0c;则finally 语句也是可以省略的。</p> 
<h3><a id="613_5666"></a>6.1.3、异常演示</h3> 
<h4><a id="6131Eval__5668"></a>6.1.3.1、Eval 错误</h4> 
<p>EvalError 指示 eval() 函数中的错误。更新版本的 JavaScript 不会抛出任何 EvalError&#xff0c;请使用 SyntaxError 代替。</p> 
<p>案例演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&#34;alert(&#39;Hello)&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 缺少 &#39; 会产生错误</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/3c0561b704e79191f5e4ceda413e1d73.png" alt="image-20201023081303304" /></p> 
<h4><a id="6132_5684"></a>6.1.3.2、范围错误</h4> 
<p>RangeError 会在您使用了合法值的范围之外的数字时抛出。</p> 
<p>案例演示&#xff1a;您不能将数字的有效位数设置为 500。</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> num <span class="token operator">&#61;</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>
    num<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 数无法拥有 500 个有效数</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/adaaaf76a0a8ef4a9d70b8bbb5109297.png" alt="image-20201023081001501" /></p> 
<h4><a id="6133_5701"></a>6.1.3.3、引用错误</h4> 
<p>假如您使用&#xff08;引用&#xff09;了尚未声明的变量&#xff0c;则 ReferenceError 会被抛出&#xff1a;</p> 
<p>案例演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> x<span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>
    x <span class="token operator">&#61;</span> y <span class="token operator">&#43;</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// y 无法被引用&#xff08;使用&#xff09;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/3a0ccee2ef764c308a9279d68a32fc16.png" alt="image-20201023081145369" /></p> 
<h4><a id="6134_5718"></a>6.1.3.4、语法错误</h4> 
<p>假如您计算带语法错误的代码&#xff0c;会 SyntaxError 被抛出&#xff1a;</p> 
<p>案例演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&#34;alert(&#39;Hello)&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 缺少 &#39; 会产生错误</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/3c0561b704e79191f5e4ceda413e1d73.png" alt="image-20201023081303304" /></p> 
<h4><a id="6135_5734"></a>6.1.3.5、类型错误</h4> 
<p>假如您使用的值不在期望值的范围之内&#xff0c;则 TypeError 被抛出&#xff1a;</p> 
<p>案例演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> num <span class="token operator">&#61;</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>
    num<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 您无法将数字转换为大写</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/f9f32b39e9d5fe8c4c8abe4a5baa2d20.png" alt="image-20201023081357388" /></p> 
<h4><a id="6136URI__5751"></a>6.1.3.6、URI 错误</h4> 
<p>假如您在 URI 函数中使用非法字符&#xff0c;则 URIError 被抛出&#xff1a;</p> 
<p>案例演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token string">&#34;%%%&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 您无法对这些百分号进行 URI 编码</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/d20e2e247438b6abbcb0ebb86a85d1da.png" alt="image-20201023081458426" /></p> 
<h3><a id="614_5767"></a>6.1.4、异常抛出</h3> 
<p>在大部分的代码执行过程中&#xff0c;都是出现错误的时候&#xff0c;由浏览器(javascript引擎)抛出异常&#xff0c;然后程序或者停止执行或被try…catch 捕获。</p> 
<p>然而有时候我们在检测到一些不合理的情况发生的时候也可以主动抛出错误&#xff0c;请使用 throw 关键字抛出来主动抛出异常。</p> 
<p>注意事项&#xff1a;</p> 
<ol><li>thow后面就是我们要抛出的异常对象&#xff0c;在以前的时候都是出现错误的时候浏览器抛出异常对象&#xff0c;只是现在是我们自己主动抛出的异常对象。</li><li>只要有异常对象抛出&#xff0c;不管是浏览器抛出的&#xff0c;还是代码主动抛出&#xff0c;都会让程序停止执行。如果想让程序继续执行&#xff0c;则有也可以用try…catch来捕获。</li><li>每一个错误类型都可以传入一个参数&#xff0c;表示实际的错误信息。</li><li>我们可以在适当的时候抛出任何我们想抛出的异常类型。<code>throw new SyntaxError(&#34;语法错误...&#34;);</code></li></ol> 
<h4><a id="6141_5780"></a>6.1.4.1、主动抛出内置异常</h4> 
<pre><code class="prism language-javascript"><span class="token comment">/*该函数接收一个数字&#xff0c;返回它的平方。*/</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> num <span class="token operator">&#61;&#61;</span> <span class="token string">&#34;number&#34;</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">return</span> num <span class="token operator">*</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#34;您输入的是一个非法数字&#xff01;&#34;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">&#34;abc&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/e007286652aaaa25c0a3cfc3cdf4bdaa.png" alt="image-20201023082421480" /></p> 
<h4><a id="6142_5798"></a>6.1.4.2、主动抛出自定义异常</h4> 
<p>我们不仅仅可以抛出js内置的错误类型的对象&#xff0c;也可以自定义错误类型&#xff0c;然后抛出自定义错误类型的对象。</p> 
<p>如果要自定义错误类型&#xff0c;只需要继承任何一个自定义错误类型都可以&#xff0c;一般直接继承Error即可。</p> 
<pre><code class="prism language-javascript"><span class="token comment">/*自定义错误*/</span>
<span class="token keyword">function</span> <span class="token function">MyError</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">&#61;</span> <span class="token string">&#34;注意&#xff1a;这是自定义的错误&#34;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">&#61;</span> <span class="token string">&#34;自定义错误&#34;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
MyError<span class="token punctuation">.</span>prototype <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyError</span><span class="token punctuation">(</span><span class="token string">&#34;注意&#xff1a;这是自定义错误类型&#34;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/8c8dd5b1b84a1446075ad73a3f9e8414.png" alt="image-20201023082719743" /></p> 
<h2><a id="62JSON_5821"></a>6.2、JSON</h2> 
<h3><a id="621JSON_5823"></a>6.2.1、JSON概述</h3> 
<p>JSON&#xff1a;JavaScript Object Notation&#xff08;JavaScript 对象标记法&#xff09;&#xff0c;它是一种存储和交换数据的语法。</p> 
<p>当数据在浏览器与服务器之间进行交换时&#xff0c;这些数据只能是文本&#xff0c;JSON 属于文本并且我们能够把任何 JavaScript 对象转换为 JSON&#xff0c;然后将 JSON 发送到服务器。我们也能把从服务器接收到的任何 JSON 转换为 JavaScript 对象。以这样的方式&#xff0c;我们能够把数据作为 JavaScript 对象来处理&#xff0c;无需复杂的解析和转译。</p> 
<h3><a id="622JSON_5829"></a>6.2.2、JSON语法</h3> 
<p>在json中&#xff0c;每一个数据项&#xff0c;都是由一个键值对&#xff08;或者说是名值对&#xff09;组成的&#xff0c;但是键必须是字符串&#xff0c;且由双引号包围&#xff0c;而值必须是以下数据类型之一&#xff1a;</p> 
<ul><li>字符串&#xff08;在 JSON 中&#xff0c;字符串值必须由双引号编写&#xff09;</li><li>数字</li><li>对象&#xff08;JSON 对象&#xff09;</li><li>数组</li><li>布尔</li><li>null</li></ul> 
<p>JSON 的值不可以是以下数据类型之一&#xff1a;</p> 
<ul><li>函数</li><li>日期</li><li>undefined</li></ul> 
<p>因为 JSON 语法由 JavaScript 对象标记法衍生而来&#xff0c;所以很少需要其它额外的软件来处理 JavaScript 中的 JSON。</p> 
<p>通过 JavaScript&#xff0c;您能够创建对象并向其分配数据&#xff0c;就像这样&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> person <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span><span class="token string">&#34;name&#34;</span><span class="token punctuation">:</span> <span class="token string">&#34;zhangsan&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;age&#34;</span><span class="token punctuation">:</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token string">&#34;city&#34;</span><span class="token punctuation">:</span> <span class="token string">&#34;BeiJing&#34;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/d3060f7c44592e4b2e269ec2f290155a.png" alt="image-20201023091704109" /></p> 
<h3><a id="623JSON_5857"></a>6.2.3、JSON数据类型</h3> 
<h4><a id="6231JSON__5859"></a>6.2.3.1、JSON 字符串</h4> 
<p>JSON 中的字符串必须用双引号包围。</p> 
<pre><code class="prism language-json"><span class="token punctuation">{<!-- --></span><span class="token string">&#34;name&#34;</span><span class="token punctuation">:</span> <span class="token string">&#34;John&#34;</span><span class="token punctuation">}</span>
</code></pre> 
<h4><a id="6232JSON__5867"></a>6.2.3.2、JSON 数字</h4> 
<p>JSON 中的数字必须是整数或浮点数。</p> 
<pre><code class="prism language-json"><span class="token punctuation">{<!-- --></span><span class="token string">&#34;age&#34;</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span>
</code></pre> 
<h4><a id="6233JSON__5875"></a>6.2.3.3、JSON 对象</h4> 
<p>JSON 中的值可以是对象&#xff0c;JSON 中作为值的对象必须遵守与 JSON 对象相同的规则。</p> 
<pre><code class="prism language-json"><span class="token punctuation">{<!-- --></span>
    <span class="token string">&#34;employee&#34;</span><span class="token punctuation">:</span> <span class="token punctuation">{<!-- --></span><span class="token string">&#34;name&#34;</span><span class="token punctuation">:</span> <span class="token string">&#34;Bill Gates&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;age&#34;</span><span class="token punctuation">:</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token string">&#34;city&#34;</span><span class="token punctuation">:</span> <span class="token string">&#34;Seattle&#34;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
<h4><a id="6234JSON__5885"></a>6.2.3.4、JSON 数组</h4> 
<p>JSON 中的值可以是数组。</p> 
<pre><code class="prism language-json"><span class="token punctuation">{<!-- --></span>
    <span class="token string">&#34;employees&#34;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#34;Bill&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;Steve&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;David&#34;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre> 
<h4><a id="6235JSON__5895"></a>6.2.3.5、JSON 布尔</h4> 
<p>JSON 中的值可以是 true/false。</p> 
<pre><code class="prism language-json"><span class="token punctuation">{<!-- --></span><span class="token string">&#34;sale&#34;</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>
</code></pre> 
<h4><a id="6236JSON_null_5903"></a>6.2.3.6、JSON null</h4> 
<p>JSON 中的值可以是 null。</p> 
<pre><code class="prism language-json"><span class="token punctuation">{<!-- --></span><span class="token string">&#34;middlename&#34;</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span>
</code></pre> 
<h3><a id="624JSONJS_5911"></a>6.2.4、JSON字符串转JS对象</h3> 
<p>JSON.parse()&#xff1a;可以将以JSON字符串转换为JS对象&#xff0c;它需要一个JSON字符串作为参数&#xff0c;会将该字符串转换为JS对象并返回</p> 
<p>案例演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> jsonStr <span class="token operator">&#61;</span> <span class="token string">&#39;{&#34;name&#34;:&#34;孙悟空&#34;,&#34;age&#34;:18,&#34;gender&#34;:&#34;男&#34;}&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">&#61;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/75043196321febfa7ff2044a01c36251.png" alt="image-20201023093124404" /></p> 
<blockquote> 
 <p>注意 &#xff1a;JSON这个对象在IE7及以下的浏览器中不支持&#xff0c;所以在这些浏览器中调用时会报错</p> 
</blockquote> 
<h3><a id="625JSJSON_5927"></a>6.2.5、JS对象转JSON字符串</h3> 
<p>JSON.stringify()&#xff1a;可以将一个JS对象转换为JSON字符串&#xff0c;需要一个js对象作为参数&#xff0c;会返回一个JSON字符串</p> 
<p>案例演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> obj <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>name<span class="token punctuation">:</span> <span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token string">&#34;男&#34;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> jsonStr <span class="token operator">&#61;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/f7dc872335de8f09109ea0c9b9f798b4.png" alt="image-20201023093346336" /></p> 
<blockquote> 
 <p>注意 &#xff1a;JSON这个对象在IE7及以下的浏览器中不支持&#xff0c;所以在这些浏览器中调用时会报错</p> 
</blockquote> 
<h2><a id="63AJAX_5943"></a>6.3、AJAX</h2> 
<h3><a id="631AJAX_5945"></a>6.3.1、AJAX概述</h3> 
<p>传统的web交互是用户触发一个http请求服务器&#xff0c;然后服务器收到之后&#xff0c;在做出响应到用户&#xff0c;并且返回一个新的页面&#xff0c;每当服务器处理客户端提交的请求时&#xff0c;客户都只能空闲等待&#xff0c;并且哪怕只是一次很小的交互、只需从服务器端得到很简单的一个数据&#xff0c;都要返回一个完整的HTML页&#xff0c;而用户每次都要浪费时间和带宽去重新读取整个页面。这个做法浪费了许多带宽&#xff0c;由于每次应用的交互都需要向服务器发送请求&#xff0c;应用的响应时间就依赖于服务器的响应时间&#xff0c;这导致了用户界面的响应比本地应用慢得多。</p> 
<p>AJAX 的出现,刚好解决了传统方法的缺陷&#xff0c;AJAX 是一种用于创建快速动态网页的技术&#xff0c;通过在后台与服务器进行少量数据交换&#xff0c;AJAX 可以使网页实现异步更新&#xff0c;这意味着可以在不重新加载整个网页的情况下&#xff0c;对网页的某部分进行更新。</p> 
<h3><a id="632AJAXXMLHttpRequest_5951"></a>6.3.2、AJAX的XMLHttpRequest对象</h3> 
<p><strong>AJAX 的核心是 XMLHttpRequest 对象。</strong> 所有现代浏览器都支持 XMLHttpRequest 对象。</p> 
<p>XMLHttpRequest 对象用于幕后同服务器交换数据&#xff0c;这意味着可以更新网页的部分&#xff0c;而不需要重新加载整个页面。</p> 
<p>所有现代浏览器&#xff08;Chrom、IE7&#43;、Firefox、Safari 以及 Opera&#xff09;都有内建的 XMLHttpRequest 对象。</p> 
<p>创建 XMLHttpRequest 的语法是&#xff1a;</p> 
<pre><code class="prism language-javascript">variable <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p>老版本的 Internet Explorer&#xff08;IE5 和 IE6&#xff09;使用 ActiveX 对象&#xff1a;</p> 
<pre><code class="prism language-javascript">variable <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">&#34;Microsoft.XMLHTTP&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p>为了应对所有浏览器&#xff0c;包括 IE5 和 IE6&#xff0c;请检查浏览器是否支持 XMLHttpRequest 对象。如果支持&#xff0c;创建 XMLHttpRequest 对象&#xff0c;如果不支持&#xff0c;则创建 ActiveX 对象&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> xhttp<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    xhttp <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">// code for IE6, IE5</span>
    xhttp <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">&#34;Microsoft.XMLHTTP&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<p>但是需要注意的是&#xff0c;出于安全原因&#xff0c;现代浏览器不允许跨域访问&#xff0c;这意味着尝试加载的网页和 XML 文件都必须位于相同服务器上。</p> 
<h3><a id="633AJAXXMLHttpRequest_5985"></a>6.3.3、AJAX的XMLHttpRequest对象方法</h3> 
<table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">new XMLHttpRequest()</td><td align="left">创建新的 XMLHttpRequest 对象</td></tr><tr><td align="left">abort()</td><td align="left">取消当前请求</td></tr><tr><td align="left">getAllResponseHeaders()</td><td align="left">返回头部信息</td></tr><tr><td align="left">getResponseHeader()</td><td align="left">返回特定的头部信息</td></tr><tr><td align="left">open(<em>method</em>, <em>url</em>, <em>async</em>, <em>user</em>, <em>psw</em>)</td><td align="left">规定请求method&#xff1a;请求类型 GET 或 POST<br />url&#xff1a;文件位置<br />async&#xff1a;true&#xff08;异步&#xff09;或 false&#xff08;同步&#xff09;<br />user&#xff1a;可选的用户名称<br />psw&#xff1a;可选的密码</td></tr><tr><td align="left">send()</td><td align="left">将请求发送到服务器&#xff0c;用于 GET 请求</td></tr><tr><td align="left">send(<em>string</em>)</td><td align="left">将请求发送到服务器&#xff0c;用于 POST 请求</td></tr><tr><td align="left">setRequestHeader()</td><td align="left">向要发送的报头添加标签/值对</td></tr></tbody></table> 
<h3><a id="634AJAXXMLHttpRequest_5998"></a>6.3.4、AJAX的XMLHttpRequest对象属性</h3> 
<table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">onreadystatechange</td><td align="left">定义当 readyState 属性发生变化时被调用的函数</td></tr><tr><td align="left">readyState</td><td align="left">保存 XMLHttpRequest 的状态。<br />0&#xff1a;请求未初始化<br />1&#xff1a;服务器连接已建立<br />2&#xff1a;请求已收到<br />3&#xff1a;正在处理请求<br />4&#xff1a;请求已完成且响应已就绪</td></tr><tr><td align="left">responseText</td><td align="left">以字符串返回响应数据</td></tr><tr><td align="left">responseXML</td><td align="left">以 XML 数据返回响应数据</td></tr><tr><td align="left">status</td><td align="left">返回请求的状态号<br />200: &#34;OK&#34;<br />403: &#34;Forbidden&#34;<br />404: &#34;Not Found&#34;<br />如需完整列表请访问 <a href="https://www.w3school.com.cn/tags/ref_httpmessages.asp">Http 消息参考手册</a></td></tr><tr><td align="left">statusText</td><td align="left">返回状态文本&#xff08;比如 “OK” 或 “Not Found”&#xff09;</td></tr></tbody></table> 
<h3><a id="635AJAXGET_6009"></a>6.3.5、AJAX的GET请求</h3> 
<p>工程结构&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/369e3788b030c8f9aede3b3109f53da5.png" alt="image-20201023095114457" /></p> 
<p>users.json</p> 
<pre><code class="prism language-json"><span class="token punctuation">[</span>
  <span class="token punctuation">{<!-- --></span><span class="token string">&#34;name&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">&#34;gender&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;男&#34;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{<!-- --></span><span class="token string">&#34;name&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">&#34;gender&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;男&#34;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{<!-- --></span><span class="token string">&#34;name&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;唐僧&#34;</span><span class="token punctuation">,</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">&#34;gender&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;男&#34;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{<!-- --></span><span class="token string">&#34;name&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;沙和尚&#34;</span><span class="token punctuation">,</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">&#34;gender&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;男&#34;</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre> 
<p>index.html</p> 
<pre><code class="prism language-javascript"><span class="token comment">//步骤一&#xff1a;创建异步对象</span>
<span class="token keyword">var</span> ajax <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//步骤二&#xff1a;设置请求的url参数&#xff0c;参数一是请求的类型&#xff0c;参数二是请求的url</span>
ajax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#34;get&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;users.json&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//步骤三&#xff1a;发送请求</span>
ajax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//步骤四&#xff1a;注册事件 onreadystatechange 状态改变就会调用</span>
ajax<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>readyState <span class="token operator">&#61;&#61;</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> ajax<span class="token punctuation">.</span>status <span class="token operator">&#61;&#61;</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token comment">//步骤五&#xff1a;如果能够进到这个判断&#xff0c;说明数据完美的回来了&#xff0c;并且请求的页面是存在的</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入响应的内容</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre> 
<p>控制台&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/d2fdee85bfbd29ccc214af02a2d17e62.png" alt="image-20201023095301891" /></p> 
<h3><a id="636AJAXPOST_6048"></a>6.3.6、AJAX的POST请求</h3> 
<p>工程结构&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/369e3788b030c8f9aede3b3109f53da5.png" alt="image-20201023095114457" /></p> 
<p>users.json</p> 
<pre><code class="prism language-json"><span class="token punctuation">[</span>
  <span class="token punctuation">{<!-- --></span><span class="token string">&#34;name&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">&#34;gender&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;男&#34;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{<!-- --></span><span class="token string">&#34;name&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">&#34;gender&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;男&#34;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{<!-- --></span><span class="token string">&#34;name&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;唐僧&#34;</span><span class="token punctuation">,</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">&#34;gender&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;男&#34;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{<!-- --></span><span class="token string">&#34;name&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;沙和尚&#34;</span><span class="token punctuation">,</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">&#34;gender&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;男&#34;</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre> 
<p>index.html</p> 
<pre><code class="prism language-javascript"><span class="token comment">//步骤一&#xff1a;创建异步对象</span>
<span class="token keyword">var</span> ajax <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//步骤二&#xff1a;设置请求的类型及url&#xff0c;注意&#xff1a;post请求一定要添加请求头才行不然会报错</span>
ajax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#34;post&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;users.json&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ajax<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#34;Content-type&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;application/x-www-form-urlencoded&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//步骤三&#xff1a;发送请求</span>
ajax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//步骤四&#xff1a;注册事件 onreadystatechange 状态改变就会调用</span>
ajax<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">//步骤五&#xff1a;如果能够进到这个判断&#xff0c;说明数据完美的回来了&#xff0c;并且请求的页面是存在的</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>readyState <span class="token operator">&#61;&#61;</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> ajax<span class="token punctuation">.</span>status <span class="token operator">&#61;&#61;</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入响应的内容</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre> 
<p>控制台&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/d2fdee85bfbd29ccc214af02a2d17e62.png" alt="image-20201023095301891" /></p> 
<h3><a id="637AJAX_6088"></a>6.3.7、AJAX的请求整合</h3> 
<p>工程结构&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/369e3788b030c8f9aede3b3109f53da5.png" alt="image-20201023095114457" /></p> 
<p>users.json</p> 
<pre><code class="prism language-json"><span class="token punctuation">[</span>
  <span class="token punctuation">{<!-- --></span><span class="token string">&#34;name&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">&#34;gender&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;男&#34;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{<!-- --></span><span class="token string">&#34;name&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">&#34;gender&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;男&#34;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{<!-- --></span><span class="token string">&#34;name&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;唐僧&#34;</span><span class="token punctuation">,</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">&#34;gender&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;男&#34;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{<!-- --></span><span class="token string">&#34;name&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;沙和尚&#34;</span><span class="token punctuation">,</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">&#34;gender&#34;</span><span class="token punctuation">:</span><span class="token string">&#34;男&#34;</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre> 
<p>index.html</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> Ajax <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">var</span> xhr <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">&#61;&#61;</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&#61;&#61;</span> <span class="token number">200</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&#61;&#61;</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
                fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    post<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">var</span> xhr <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#34;POST&#34;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#34;Content-Type&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;application/x-www-form-urlencoded&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">&#61;&#61;</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&#61;&#61;</span> <span class="token number">200</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&#61;&#61;</span> <span class="token number">304</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
                fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 演示GET请求</span>
Ajax<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">&#34;users.json&#34;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 演示POST请求</span>
Ajax<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#34;users.json&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;&#34;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p>控制台&#xff1a;</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/a785d39e7cd471f4a580cf2667357a8e.png" alt="image-20201023100152816" /></p> 
<h2><a id="64Cookie_6147"></a>6.4、Cookie</h2> 
<h3><a id="641Cookie_6149"></a>6.4.1、Cookie概述</h3> 
<p>Cookie 是一些数据&#xff0c;存储于你电脑上的文本文件中&#xff0c;当 web 服务器向浏览器发送 web 页面时&#xff0c;在连接关闭后&#xff0c;服务端不会记录用户的信息&#xff0c;Cookie 的作用就是用于解决 “如何记录客户端的用户信息”&#xff1a;</p> 
<ul><li>当用户访问 web 页面时&#xff0c;它的名字可以记录在 cookie 中。</li><li>在用户下一次访问该页面时&#xff0c;可以在 cookie 中读取用户访问记录。</li></ul> 
<p>Cookie 以名/值对形式存储&#xff0c;如下所示&#xff1a;</p> 
<pre><code>username&#61;zhangsan
</code></pre> 
<p>当浏览器从服务器上请求 web 页面时&#xff0c; 属于该页面的 cookie 会被添加到该请求中&#xff0c;服务端通过这种方式来获取用户的信息。</p> 
<p>JavaScript 可以使用 <strong>document.cookie</strong> 属性来创建 、读取、及删除 Cookie。</p> 
<h3><a id="642Cookie_6166"></a>6.4.2、Cookie创建</h3> 
<p>JavaScript 中&#xff0c;创建 cookie 如下所示&#xff1a;</p> 
<pre><code class="prism language-javascript">document<span class="token punctuation">.</span>cookie <span class="token operator">&#61;</span> <span class="token string">&#34;username&#61;zhangsan&#34;</span><span class="token punctuation">;</span>
</code></pre> 
<p>您还可以为 cookie 添加一个过期时间&#xff08;以 UTC 或 GMT 时间&#xff09;。默认情况下&#xff0c;cookie 在浏览器关闭时删除。</p> 
<pre><code class="prism language-javascript">document<span class="token punctuation">.</span>cookie <span class="token operator">&#61;</span> <span class="token string">&#34;username&#61;zhangsan; expires&#61;Thu, 18 Dec 2043 12:00:00 GMT&#34;</span><span class="token punctuation">;</span>
</code></pre> 
<p>您可以使用 path 参数告诉浏览器 cookie 的路径。默认情况下&#xff0c;cookie 属于当前页面。</p> 
<pre><code class="prism language-javascript">document<span class="token punctuation">.</span>cookie <span class="token operator">&#61;</span> <span class="token string">&#34;username&#61;zhangsan; expires&#61;Thu, 18 Dec 2043 12:00:00 GMT; path&#61;/&#34;</span><span class="token punctuation">;</span>
</code></pre> 
<h3><a id="643Cookie_6186"></a>6.4.3、Cookie读取</h3> 
<p>JavaScript 中&#xff0c;读取 cookie 如下所示&#xff1a;</p> 
<p>document.cookie 将以字符串的方式返回所有的 cookie&#xff0c;类型格式&#xff1a; cookie1&#61;value; cookie2&#61;value; cookie3&#61;value;</p> 
<pre><code class="prism language-javascript">document<span class="token punctuation">.</span>cookie <span class="token operator">&#61;</span> <span class="token string">&#34;username&#61;zhangsan&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> cookies <span class="token operator">&#61;</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/7f5f050ac3395ad2d8e04a83f52b9f17.png" alt="image-20201023124113003" /></p> 
<h3><a id="644Cookie_6200"></a>6.4.4、Cookie修改</h3> 
<p>JavaScript 中&#xff0c;修改 cookie 如下所示&#xff1a;</p> 
<p>使用 document.cookie 将旧的 cookie 将被覆盖就是修改。</p> 
<pre><code class="prism language-javascript">document<span class="token punctuation">.</span>cookie <span class="token operator">&#61;</span> <span class="token string">&#34;username&#61;zhangsan&#34;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">&#61;</span> <span class="token string">&#34;username&#61;lisi&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> cookies <span class="token operator">&#61;</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/fe094b63b05824c69ed5147e180b298b.png" alt="image-20201023124645689" /></p> 
<h3><a id="645Cookie_6215"></a>6.4.5、Cookie删除</h3> 
<p>JavaScript 中&#xff0c;删除 cookie 如下所示&#xff1a;</p> 
<p>删除 cookie 非常简单&#xff0c;您只需要设置 expires 参数为以前的时间即可&#xff0c;如下所示&#xff0c;设置为 Thu, 01 Jan 1970 00:00:00 GMT:</p> 
<pre><code class="prism language-javascript">document<span class="token punctuation">.</span>cookie <span class="token operator">&#61;</span> <span class="token string">&#34;username&#61;zhangsan&#34;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">&#61;</span> <span class="token string">&#34;username&#61;; expires&#61;Thu, 01 Jan 1970 00:00:00 GMT&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> cookies <span class="token operator">&#61;</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/ed1e94b6c81dc809c2dd0a8436ed2c6f.png" alt="image-20201023124936436" /></p> 
<h3><a id="646Cookie_6230"></a>6.4.6、Cookie值设置函数</h3> 
<pre><code class="prism language-javascript"><span class="token comment">/**
 * Cookie值设置函数
 * &#64;param cname     cookie名称
 * &#64;param cvalue    cookie值
 * &#64;param exdays    过期天数
 */</span>
<span class="token keyword">function</span> <span class="token function">setCookie</span><span class="token punctuation">(</span>cname<span class="token punctuation">,</span> cvalue<span class="token punctuation">,</span> exdays<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">var</span> d <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&#43;</span> <span class="token punctuation">(</span>exdays <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> expires <span class="token operator">&#61;</span> <span class="token string">&#34;expires&#61;&#34;</span> <span class="token operator">&#43;</span> d<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>cookie <span class="token operator">&#61;</span> cname <span class="token operator">&#43;</span> <span class="token string">&#34;&#61;&#34;</span> <span class="token operator">&#43;</span> cvalue <span class="token operator">&#43;</span> <span class="token string">&#34;; &#34;</span> <span class="token operator">&#43;</span> expires<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="647Cookie_6247"></a>6.4.7、Cookie值获取函数</h3> 
<pre><code class="prism language-javascript"><span class="token comment">/**
 * Cookie值获取函数
 * &#64;param cname     cookie名称
 * &#64;returns {string}
 */</span>
<span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>cname<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">var</span> name <span class="token operator">&#61;</span> cname <span class="token operator">&#43;</span> <span class="token string">&#34;&#61;&#34;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> ca <span class="token operator">&#61;</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">&#61;</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ca<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">&#43;&#43;</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">var</span> c <span class="token operator">&#61;</span> ca<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&#61;&#61;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>length<span class="token punctuation">,</span> c<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">&#34;&#34;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h2><a id="65WebStorage_6266"></a>6.5、WebStorage</h2> 
<h3><a id="651WebStorage_6268"></a>6.5.1、WebStorage概述</h3> 
<p>WebStorage是HTML5中本地存储的解决方案之一&#xff0c;在HTML5的WebStorage概念引入之前除去IE User Data、Flash Cookie、Google Gears等看名字就不靠谱的解决方案&#xff0c;浏览器兼容的本地存储方案只有使用Cookie。有同学可能会问&#xff0c;既然有了Cookie本地存储&#xff0c;为什么还要引入WebStorage的概念&#xff1f;那就要说一说Cookie的缺陷了&#xff1a;</p> 
<ol><li>数据大小&#xff1a;作为存储容器&#xff0c;Cookie的大小限制在4KB左右这是非常坑爹的&#xff0c;尤其对于现在复杂的业务逻辑需求&#xff0c;4KB的容量除了存储一些配置字段还简单单值信息&#xff0c;对于绝大部分开发者来说真的不知指望什么了。</li><li>安全性问题&#xff1a;由于在HTTP请求中的Cookie是明文传递的&#xff08;HTTPS不是&#xff09;&#xff0c;带来的安全性问题还是很大的。</li><li>网络负担&#xff1a;我们知道Cookie会被附加在每个HTTP请求中&#xff0c;在HttpRequest和HttpResponse的header中都是要被传输的&#xff0c;所以无形中增加了一些不必要的流量损失。</li></ol> 
<p>虽然WebStorage是HTML5新增的本地存储解决方案之一&#xff0c;但并不是为了取代Cookie而制定的标准&#xff0c;Cookie作为HTTP协议的一部分用来处理客户端和服务器通信是不可或缺的&#xff0c;session正是依赖于实现的客户端状态保持。WebStorage的意图在于解决本来不应该Cookie做&#xff0c;却不得不用Cookie的本地存储的应用场景。</p> 
<h3><a id="652WebStorage_6278"></a>6.5.2、WebStorage分类</h3> 
<p>Web Storage又分为两种&#xff1a; sessionStorage 和localStorage &#xff0c;即这两个是Storage的一个实例。从字面意思就可以很清楚的看出来&#xff0c;sessionStorage将数据保存在session中&#xff0c;浏览器关闭也就没了&#xff1b;而localStorage则一直将数据保存在客户端本地&#xff1b; 不管是sessionStorage&#xff0c;还是localStorage&#xff0c;使用的API都相同。</p> 
<p>localStorage和sessionStorage只能存储字符串类型&#xff0c;对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理&#xff0c;低版本IE可以使用<a href="https://github.com/douglascrockford/JSON-js/blob/master/json2.js">json2.js</a></p> 
<h3><a id="653localStorage_6284"></a>6.5.3、localStorage方法</h3> 
<p><strong>对象介绍&#xff1a;</strong></p> 
<p>localStorage在本地永久性存储数据&#xff0c;除非显式将其删除或清空。</p> 
<p><strong>常见方法&#xff1a;</strong></p> 
<ul><li>保存单个数据&#xff1a;localStorage.setItem(key,value);</li><li>读取单个数据&#xff1a;localStorage.getItem(key);</li><li>删除单个数据&#xff1a;localStorage.removeItem(key);</li><li>删除所有数据&#xff1a;localStorage.clear();</li><li>获取某个索引的key&#xff1a;localStorage.key(index);</li></ul> 
<p><strong>案例演示&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">// 保存数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#34;username&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;zhangsan&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 读取单个数据</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#34;username&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 删除单个数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#34;username&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#34;username&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 保存两个数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#34;sex&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;男&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;age&#61;&#34;</span> <span class="token operator">&#43;</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;sex&#61;&#34;</span> <span class="token operator">&#43;</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#34;sex&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用for-in循环来迭代localStorage中的键值对、属性和方法&#xff1a;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> localStorage<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">&#43;</span> <span class="token string">&#34;&#61;&#34;</span> <span class="token operator">&#43;</span> localStorage<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用for循环来迭代localStorage中的键值对&#xff1a;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">&#61;</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> localStorage<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">&#43;&#43;</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">var</span> key <span class="token operator">&#61;</span> localStorage<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> value <span class="token operator">&#61;</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">&#43;</span> <span class="token string">&#34;&#61;&#34;</span> <span class="token operator">&#43;</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 删除所有数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><strong>控制台&#xff1a;</strong></p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/61686f1b890e4aed66a29ca7b99fb017.png" alt="image-20201023220221557" /></p> 
<h3><a id="654sessionStorage_6342"></a>6.5.4、sessionStorage方法</h3> 
<p><strong>对象介绍&#xff1a;</strong></p> 
<p>sessionStorage对象存储特定于某个对话的数据&#xff0c;也就是它的生命周期为当前窗口或标签页&#xff0c;一旦窗口或标签页被永久关闭了&#xff0c;那么所有通过sessionStorage存储的数据也就被清空了。存储在sessionStorage中的数据可以跨越页面刷新而存在&#xff0c;同时如果浏览器支持&#xff0c;浏览器崩溃并重启之后依然可以使用&#xff08;注意&#xff1a;Firefox和Weblit都支持&#xff0c;IE则不行&#xff09;。</p> 
<p>因为sessionStorage对象绑定于某个服务器会话&#xff0c;所以当文件在本地运行的时候是不可用的。存储在sessionStorage中的数据只能由最初给对象存储数据的页面访问到&#xff0c;所以对多页面应用有限制。</p> 
<p>不同浏览器写入数据方法略有不同。Firefox和Webkit实现了同步写入&#xff0c;所以添加到存储空间中的数据是立刻被提交的。而IE的实现则是异步写入数据&#xff0c;所以在设置数据和将数据实际写入磁盘之间可能有一些延迟。</p> 
<p><strong>常见方法&#xff1a;</strong></p> 
<ul><li>保存单个数据&#xff1a;sessionStorage.setItem(key,value);</li><li>读取单个数据&#xff1a;sessionStorage.getItem(key);</li><li>删除单个数据&#xff1a;sessionStorage.removeItem(key);</li><li>删除所有数据&#xff1a;sessionStorage.clear();</li><li>获取某个索引的key&#xff1a;sessionStorage.key(index);</li></ul> 
<p><strong>案例演示&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">// 保存数据</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#34;username&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;zhangsan&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 读取单个数据</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#34;username&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 删除单个数据</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#34;username&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#34;username&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 保存两个数据</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#34;sex&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;男&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;age&#61;&#34;</span> <span class="token operator">&#43;</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;sex&#61;&#34;</span> <span class="token operator">&#43;</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#34;sex&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用for-in循环来迭代sessionStorage中的键值对、属性和方法&#xff1a;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> sessionStorage<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">&#43;</span> <span class="token string">&#34;&#61;&#34;</span> <span class="token operator">&#43;</span> sessionStorage<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用for循环来迭代sessionStorage中的键值对&#xff1a;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">&#61;</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sessionStorage<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">&#43;&#43;</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">var</span> key <span class="token operator">&#61;</span> sessionStorage<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> value <span class="token operator">&#61;</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">&#43;</span> <span class="token string">&#34;&#61;&#34;</span> <span class="token operator">&#43;</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 删除所有数据</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><strong>控制台&#xff1a;</strong></p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/1325a4d3c63e875d47b815eae84a29ac.png" alt="image-20201023220326391" /></p> 
<h2><a id="66Closure_6404"></a>6.6、Closure</h2> 
<h3><a id="661_6406"></a>6.6.1、闭包引入</h3> 
<p><strong>需求信息&#xff1a;点击某个按钮&#xff0c;提示&#34;点击的是第n个按钮&#34;</strong></p> 
<p>第一种解决方法&#xff1a;将btn所对应的下标保存在btn上</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> btns <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//将btn所对应的下标保存在btn上</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">&#61;</span> <span class="token number">0</span><span class="token punctuation">,</span> length <span class="token operator">&#61;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">&#43;&#43;</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">var</span> btn <span class="token operator">&#61;</span> btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    btn<span class="token punctuation">.</span>index <span class="token operator">&#61;</span> i<span class="token punctuation">;</span>
    btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;第&#39;</span> <span class="token operator">&#43;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">&#43;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&#43;</span> <span class="token string">&#39;个&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
<p>第二种解决方法&#xff1a;利用闭包延长局部变量的生命周期</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> btns <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 利用闭包延长局部变量的生命周期</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">&#61;</span> <span class="token number">0</span><span class="token punctuation">,</span> length <span class="token operator">&#61;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">&#43;&#43;</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">var</span> btn <span class="token operator">&#61;</span> btns<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;第&#39;</span> <span class="token operator">&#43;</span> <span class="token punctuation">(</span>j <span class="token operator">&#43;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&#43;</span> <span class="token string">&#39;个&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="662_6441"></a>6.6.2、闭包概念</h3> 
<ul><li><strong>如何产生闭包?</strong> 
  <ul><li>当一个嵌套的内部(子)函数引用了嵌套的外部(父)函数的变量(函数)时&#xff0c;就产生了闭包</li></ul> </li><li><strong>什么才是闭包&#xff1f;</strong> 
  <ul><li>理解一&#xff1a;闭包是嵌套的内部函数(绝大部分人认为)</li><li>理解二&#xff1a;包含被引用变量(函数)的对象(极少部分人认为)</li></ul> </li><li><strong>闭包的作用&#xff1f;</strong> 
  <ul><li>它的最大用处有两个&#xff0c;一个是可以读取函数内部的变量&#xff0c;另一个就是让这些变量的值始终保持在内存中</li></ul> </li></ul> 
<h3><a id="663_6451"></a>6.6.3、闭包演示</h3> 
<pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">var</span> a <span class="token operator">&#61;</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">subFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        a<span class="token operator">&#43;&#43;</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> subFun<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> f1 <span class="token operator">&#61;</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">var</span> a <span class="token operator">&#61;</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">subFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        a<span class="token operator">--</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> subFun<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> f2 <span class="token operator">&#61;</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/9722bfe7789b49229b44fe31313dd6c0.png" alt="image-20201023225902988" /></p> 
<h3><a id="664_6485"></a>6.6.4、闭包生命周期</h3> 
<p>生命周期&#xff1a;</p> 
<ol><li>产生&#xff1a;在嵌套内部函数定义执行完时就产生了(不是在调用)</li><li>死亡&#xff1a;在嵌套的内部函数成为垃圾对象时就死亡了</li></ol> 
<p>演示说明&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">//此时闭包就已经产生了(函数提升, 内部函数对象已经创建了)</span>
    <span class="token keyword">var</span> a <span class="token operator">&#61;</span> <span class="token number">2</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        a<span class="token operator">&#43;&#43;</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> fn2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> f <span class="token operator">&#61;</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
f <span class="token operator">&#61;</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//闭包死亡(包含闭包的函数对象成为垃圾对象)</span>
</code></pre> 
<h3><a id="665_6513"></a>6.6.5、闭包应用</h3> 
<p><strong>闭包应用&#xff1a;</strong> 定义JS模块</p> 
<ul><li>具有特定功能的js文件</li><li>将所有的数据和功能都封装在一个函数内部(私有的)</li><li>只向外暴露一个包含n个方法的对象或函数</li><li>模块的使用者&#xff0c;只需要通过模块暴露的对象调用方法来实现对应的功能</li></ul> 
<p><strong>案例演示&#xff1a;</strong></p> 
<p>第一种格式&#xff1a;myModule.js</p> 
<pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">myModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">//私有数据</span>
    <span class="token keyword">var</span> msg <span class="token operator">&#61;</span> <span class="token string">&#39;Hello, World&#39;</span><span class="token punctuation">;</span>

    <span class="token comment">//操作数据的函数</span>
    <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;doSomething() &#39;</span> <span class="token operator">&#43;</span> msg<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">doOtherthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;doOtherthing() &#39;</span> <span class="token operator">&#43;</span> msg<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//向外暴露对象(给外部使用的方法)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{<!-- --></span>
        doSomething<span class="token punctuation">:</span> doSomething<span class="token punctuation">,</span>
        doOtherthing<span class="token punctuation">:</span> doOtherthing
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
<p>第一种使用&#xff1a;index.html</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> module <span class="token operator">&#61;</span> <span class="token function">myModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span><span class="token function">doOtherthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/267a54ef948c4b363603dd4ebba92901.png" alt="image-20201023231502831" /></p> 
<p>第二种格式&#xff1a;myModule.js</p> 
<pre><code class="prism language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>window<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">//私有数据</span>
    <span class="token keyword">var</span> msg <span class="token operator">&#61;</span> <span class="token string">&#39;Hello, World&#39;</span><span class="token punctuation">;</span>

    <span class="token comment">//操作数据的函数</span>
    <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;doSomething() &#39;</span> <span class="token operator">&#43;</span> msg<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">doOtherthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;doOtherthing() &#39;</span> <span class="token operator">&#43;</span> msg<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//向外暴露对象(给外部使用的方法)</span>
    window<span class="token punctuation">.</span>myModule <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
        doSomething<span class="token punctuation">:</span> doSomething<span class="token punctuation">,</span>
        doOtherthing<span class="token punctuation">:</span> doOtherthing
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p>第二种使用&#xff1a;index.html</p> 
<pre><code class="prism language-javascript">myModule<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myModule<span class="token punctuation">.</span><span class="token function">doOtherthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/6ee4d72170ebfdf2e48d074c23f05543.png" alt="image-20201023231821301" /></p> 
<h1><a id="_JavaScript_6591"></a>第七章 JavaScript新特性</h1> 
<h2><a id="71ECMAScript6_6593"></a>7.1、ECMAScript6新特性</h2> 
<h3><a id="711let__6595"></a>7.1.1、let 关键字</h3> 
<p>let 关键字用来声明变量&#xff0c;使用 let 声明的变量有几个特点&#xff1a;</p> 
<ul><li>不允许重复声明</li><li>块儿级作用域</li><li>不存在变量提升</li><li>不影响作用域链</li></ul> 
<blockquote> 
 <p>注意&#xff1a;以后声明变量使用 let 就对了</p> 
</blockquote> 
<p><strong>案例演示&#xff1a;创建四个div&#xff0c;单机每一个div让其变色</strong></p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style language-css">
        <span class="token selector">.item</span> <span class="token punctuation">{<!-- --></span>
            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
            <span class="token property">border</span><span class="token punctuation">:</span> solid 1px <span class="token function">rgb</span><span class="token punctuation">(</span>42, 156, 156<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
            <span class="token property">margin-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>item<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>item<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>item<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>item<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token comment">// 获取div元素对象</span>
    <span class="token keyword">let</span> items <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&#39;item&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 遍历并绑定事件</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">&#61;</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">&#43;&#43;</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token comment">// 以前的做法&#xff1a;this.style.background &#61; &#34;pink&#34;;</span>
            items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">&#61;</span> <span class="token string">&#34;pink&#34;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/266f795976b338c4959954ce71032871.png" alt="image-20201025151025642" /></p> 
<h3><a id="712const__6649"></a>7.1.2、const 关键字</h3> 
<p>const 关键字用来声明常量&#xff0c;const 声明有以下特点&#xff1a;</p> 
<ul><li>不允许重复声明</li><li>块儿级作用域</li><li>声明必须赋初始值</li><li>值不允许修改</li><li>标识符一般为大写</li></ul> 
<blockquote> 
 <p>注意&#xff1a;声明对象类型使用 const&#xff0c;非对象类型声明选择 let</p> 
</blockquote> 
<pre><code class="prism language-javascript"><span class="token comment">// 声明常量</span>
<span class="token keyword">const</span> <span class="token constant">MAX</span> <span class="token operator">&#61;</span> <span class="token number">100</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">MAX</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 对于数组和对象的元素修改, 不算做对常量的修改, 不会报错</span>
<span class="token keyword">const</span> <span class="token constant">TEAM1</span> <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">TEAM2</span> <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 但是不能修改地址指向</span>
<span class="token comment">// TEAM2 &#61; TEAM1;</span>
</code></pre> 
<h3><a id="713_6673"></a>7.1.3、变量的解构赋值</h3> 
<p>ES6 允许按照一定模式&#xff0c;从数组和对象中提取值&#xff0c;对变量进行赋值&#xff0c;这被称为解构赋值。</p> 
<blockquote> 
 <p>注意&#xff1a;频繁使用对象方法、数组元素&#xff0c;就可以使用解构赋值形式</p> 
</blockquote> 
<p><strong>数组的解构赋值&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">//数组的解构赋值</span>
<span class="token keyword">const</span> arr <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token string">&#34;张学友&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;刘德华&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;黎明&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;郭富城&#34;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>zhang<span class="token punctuation">,</span> liu<span class="token punctuation">,</span> li<span class="token punctuation">,</span> guo<span class="token punctuation">]</span> <span class="token operator">&#61;</span> arr<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zhang<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>liu<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/c9b63040612475be883d4fbe8493b672.png" alt="image-20201025152604811" /></p> 
<p><strong>简单对象的解构赋值&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">//对象的解构赋值</span>
<span class="token keyword">const</span> lin <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;林志颖&#34;</span><span class="token punctuation">,</span>
    tags<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#34;车手&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;歌手&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;小旋风&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;演员&#34;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">{<!-- --></span>name<span class="token punctuation">,</span> tags<span class="token punctuation">}</span> <span class="token operator">&#61;</span> lin<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tags<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/9863e59feff49069c671819f794b2ae9.png" alt="image-20201025152700504" /></p> 
<p><strong>复杂对象的解构赋值:</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">//复杂对象的解构赋值</span>
<span class="token keyword">let</span> wangfei <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;王菲&#34;</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    songs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#34;红豆&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;流年&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;暧昧&#34;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    history<span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{<!-- --></span>name<span class="token punctuation">:</span> <span class="token string">&#34;窦唯&#34;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{<!-- --></span>name<span class="token punctuation">:</span> <span class="token string">&#34;李亚鹏&#34;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{<!-- --></span>name<span class="token punctuation">:</span> <span class="token string">&#34;谢霆锋&#34;</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">{<!-- --></span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> songs<span class="token punctuation">:</span> <span class="token punctuation">[</span>one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three<span class="token punctuation">]</span><span class="token punctuation">,</span> history<span class="token punctuation">:</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> third<span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token operator">&#61;</span> wangfei<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>three<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>third<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/f46bd6a52d38e1030e264ec59062cc25.png" alt="image-20201025152830276" /></p> 
<h3><a id="714_6735"></a>7.1.4、模板字符串</h3> 
<p>模板字符串&#xff08;template string&#xff09;是增强版的字符串&#xff0c;用反引号&#xff08;&#96;&#xff09;标识&#xff0c;特点&#xff1a;</p> 
<ul><li>字符串中可以出现换行符</li><li>可以使用 ${xxx} 形式输出变量</li></ul> 
<blockquote> 
 <p>注意&#xff1a;当遇到字符串与变量拼接的情况使用模板字符串</p> 
</blockquote> 
<p><strong>字符串中可以出现换行符&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">//定义字符串</span>
<span class="token keyword">let</span> str <span class="token operator">&#61;</span> <span class="token template-string"><span class="token string">&#96;&lt;ul&gt;
               &lt;li&gt;沈腾&lt;/li&gt;
               &lt;li&gt;玛丽&lt;/li&gt;
               &lt;li&gt;魏翔&lt;/li&gt;
               &lt;li&gt;艾伦&lt;/li&gt;
           &lt;/ul&gt;&#96;</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/5ee196feafc0207eda53eac3e2b4aa3c.png" alt="image-20201025153705017" /></p> 
<p><strong>变量拼接:</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">//变量拼接</span>
<span class="token keyword">let</span> name <span class="token operator">&#61;</span> <span class="token string">&#39;小可爱&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">&#61;</span> <span class="token template-string"><span class="token string">&#96;欢迎</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${<!-- --></span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">访问我的文章&#96;</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/9ae4c48b4dbdf2da942945c1de172b11.png" alt="image-20201025153746643" /></p> 
<h3><a id="715_6770"></a>7.1.5、简化对象写法</h3> 
<p>ES6 允许在大括号里面&#xff0c;直接写入变量和函数&#xff0c;作为对象的属性和方法&#xff0c;这样的书写更加简洁。</p> 
<blockquote> 
 <p>注意&#xff1a;对象简写形式简化了代码&#xff0c;所以以后用简写就对了</p> 
</blockquote> 
<pre><code class="prism language-javascript"><span class="token keyword">let</span> name <span class="token operator">&#61;</span> <span class="token string">&#34;张三&#34;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> age <span class="token operator">&#61;</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token function-variable function">speak</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//属性和方法简写</span>
<span class="token keyword">let</span> person <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">,</span>
    age<span class="token punctuation">,</span>
    speak
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/0107de45367b67a096cf71c2f8258c04.png" alt="image-20201025154304885" /></p> 
<h3><a id="716_6797"></a>7.1.6、箭头函数</h3> 
<p>ES6 允许使用「箭头」&#xff08;&#61;&gt;&#xff09;定义函数&#xff0c;通用写法如下&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">&#61;</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg3<span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">return</span> arg1 <span class="token operator">&#43;</span> arg2 <span class="token operator">&#43;</span> arg3<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<p>箭头函数的注意点&#xff1a;</p> 
<ul><li>如果形参只有一个&#xff0c;则小括号可以省略</li><li>函数体如果只有一条语句&#xff0c;则花括号可以省略&#xff0c;函数的返回值为该条语句的执行结果</li><li>箭头函数 this 指向声明时所在作用域下 this 的值&#xff0c;箭头函数不会更改 this 指向&#xff0c;用来指定回调函数会非常合适</li><li>箭头函数不能作为构造函数实例化</li><li>不能使用 arguments 实参</li></ul> 
<p><strong>省略小括号的情况&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">&#61;</span> num <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre> 
<p><strong>省略花括号的情况&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">&#61;</span> score <span class="token operator">&#61;&gt;</span> score <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">;</span>
</code></pre> 
<p><strong>this 指向声明时所在作用域中 this 的值&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">// this 指向声明时所在作用域中 this 的值</span>
<span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">&#61;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> school <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;张三&#34;</span><span class="token punctuation">,</span>
    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">let</span> <span class="token function-variable function">subFun</span> <span class="token operator">&#61;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">subFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
school<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/362527ff0dbd1248e6dc65e4b2751491.png" alt="image-20201025155420505" /></p> 
<h3><a id="717rest__6852"></a>7.1.7、rest 参数</h3> 
<p>ES6 引入 rest 参数&#xff0c;用于获取函数的实参&#xff0c;用来代替 arguments 参数。</p> 
<blockquote> 
 <p>注意&#xff1a;rest 参数非常适合不定个数参数函数的场景</p> 
</blockquote> 
<pre><code class="prism language-javascript"><span class="token comment">// 作用与 arguments 类似</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// rest 参数必须是最后一个形参</span>
<span class="token keyword">function</span> <span class="token function">minus</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/223dc0964e7b11f7137b9ca6768e5583.png" alt="image-20201025160054563" /></p> 
<h3><a id="718spread__6874"></a>7.1.8、spread 扩展运算符</h3> 
<p>扩展运算符&#xff08;spread&#xff09;也是三个点&#xff08;…&#xff09;&#xff0c;它好比 rest 参数的逆运算&#xff0c;将一个数组转为用逗号分隔的参数序列&#xff0c;对数组进行解包。</p> 
<p><strong>展开数组&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">// 展开数组</span>
<span class="token keyword">let</span> tfboys <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token string">&#34;德玛西亚之力&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;德玛西亚之翼&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;德玛西亚皇子&#34;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>tfboys<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/099d4a971374d3b90b62d225dff4fe8d.png" alt="image-20201025161321223" /></p> 
<p><strong>展开对象&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">// 展开对象</span>
<span class="token keyword">let</span> skillOne <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    q<span class="token punctuation">:</span> <span class="token string">&#34;致命打击&#34;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> skillTwo <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    w<span class="token punctuation">:</span> <span class="token string">&#34;勇气&#34;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> skillThree <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    e<span class="token punctuation">:</span> <span class="token string">&#34;审判&#34;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> skillFour <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    r<span class="token punctuation">:</span> <span class="token string">&#34;德玛西亚正义&#34;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> gailun <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span><span class="token operator">...</span>skillOne<span class="token punctuation">,</span> <span class="token operator">...</span>skillTwo<span class="token punctuation">,</span> <span class="token operator">...</span>skillThree<span class="token punctuation">,</span> <span class="token operator">...</span>skillFour<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gailun<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/4ed8c6374e96866ca9d8f77a6f39778f.png" alt="image-20201025161335012" /></p> 
<h3><a id="719Symbol_6913"></a>7.1.9、Symbol类型</h3> 
<h4><a id="7191Symbol_6915"></a>7.1.9.1、Symbol的使用</h4> 
<p>ES6 引入了一种新的原始数据类型 Symbol&#xff0c;表示独一无二的值&#xff0c;它是 JavaScript 语言的第七种数据类型&#xff0c;是一种类似于字符串的数据类型&#xff0c;Symbol 特点如下&#xff1a;</p> 
<ul><li>Symbol 的值是唯一的&#xff0c;用来解决命名冲突的问题</li><li>Symbol 值不能与其它数据进行运算</li><li>Symbol 定义的对象属性不能使用 for…in 循环遍 历 &#xff0c;但是可以使用 Reflect.ownKeys 来获取对象的所有键名</li></ul> 
<pre><code class="prism language-javascript"><span class="token comment">//创建 Symbol</span>
<span class="token keyword">let</span> s1 <span class="token operator">&#61;</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//添加标识的 Symbol</span>
<span class="token keyword">let</span> s2 <span class="token operator">&#61;</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#34;张三&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2_2 <span class="token operator">&#61;</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#34;张三&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2 <span class="token operator">&#61;&#61;&#61;</span> s2_2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//使用 Symbol for 定义</span>
<span class="token keyword">let</span> s3 <span class="token operator">&#61;</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">&#34;张三&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s3_2 <span class="token operator">&#61;</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">&#34;张三&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s3_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s3 <span class="token operator">&#61;&#61;&#61;</span> s3_2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//在方法中使用 Symbol</span>
<span class="token keyword">let</span> game <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;狼人杀&#34;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;say&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;我可以发言&#34;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;zibao&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我可以自爆&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/bf5414cb64e3cf9457972b10ce17fab6.png" alt="image-20201025173541630" /></p> 
<blockquote> 
 <p>注意&#xff1a;遇到唯一性的场景时要想到 Symbol</p> 
</blockquote> 
<h4><a id="7192Symbol_6960"></a>7.1.9.2、Symbol内置值</h4> 
<p>除了定义自己使用的 Symbol 值以外&#xff0c;ES6 还提供了 11 个内置的 Symbol 值&#xff0c;指向语言内部使用的方法。</p> 
<p>可以称这些方法为魔术方法&#xff0c;因为它们会在特定的场景下自动执行。</p> 
<table><thead><tr><th>内置值</th><th>描述</th></tr></thead><tbody><tr><td>Symbol.hasInstance</td><td>当其它对象使用 instanceof 运算符&#xff0c;判断是否为该对象的实例时&#xff0c;会调用这个方法</td></tr><tr><td>Symbol.isConcatSpreadable</td><td>对象的 Symbol.isConcatSpreadable 属性等于的是一个布尔值&#xff0c;表示该对象用于 Array.prototype.concat()时&#xff0c; 是否可以展开</td></tr><tr><td>Symbol.species</td><td>创建衍生对象时&#xff0c;会使用该属性</td></tr><tr><td>Symbol.match</td><td>当执行 str.match(myObject) 时&#xff0c;如果该属性存在&#xff0c;会调用它&#xff0c;返回该方法的返回值</td></tr><tr><td>Symbol.replace</td><td>当该对象被 str.replace(myObject)方法调用时&#xff0c;会返回该方法的返回值</td></tr><tr><td>Symbol.search</td><td>当该对象被 str.search (myObject)方法调用时&#xff0c;会返回该方法的返回值</td></tr><tr><td>Symbol.split</td><td>当该对象被 str.split(myObject)方法调用时&#xff0c;会返回该方法的返回值</td></tr><tr><td>Symbol.iterator</td><td>当对象进行 for…of 循环时&#xff0c;会调用 Symbol.iterator 方法&#xff0c; 返回该对象的默认遍历器</td></tr><tr><td>Symbol.toPrimitive</td><td>当对象被转为原始类型的值时&#xff0c;会调用这个方法&#xff0c;返 回该对象对应的原始类型值</td></tr><tr><td>Symbol. toStringTag</td><td>当对象上面调用 toString 方法时&#xff0c;返回该方法的返 回值</td></tr><tr><td>Symbol. unscopables</td><td>当对象指定了使用 with 关键字时&#xff0c;哪些属性会被 with 环境排除</td></tr></tbody></table> 
<p><strong>Symbol.hasInstance演示&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">static</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>hasInstance<span class="token punctuation">]</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;我被用来检测类型了&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> o <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/74663d366b9a8261cc7c704896bca9c9.png" alt="image-20201025173815146" /></p> 
<p><strong>Symbol.isConcatSpreadable演示&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">const</span> arr1 <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr2 <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr2<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>isConcatSpreadable<span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> arr3 <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr4 <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr4<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>isConcatSpreadable<span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/1072c432fee0970932bf37b846361d6d.png" alt="image-20201025174006835" /></p> 
<h3><a id="7110_7010"></a>7.1.10、迭代器</h3> 
<p>遍历器&#xff08;Iterator&#xff09;就是一种机制。它是一种接口&#xff0c;为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口&#xff0c;就可以完成遍历操作。ES6 创造了一种新的遍历命令 for…of 循环&#xff0c;Iterator 接口主要供 for…of 消费&#xff0c;原生具备 iterator 接口的数据&#xff1a;</p> 
<ul><li>Array</li><li>Arguments</li><li>Set</li><li>Map</li><li>String</li><li>TypedArray</li><li>NodeList</li></ul> 
<blockquote> 
 <p>注意&#xff1a;需要自定义遍历数据的时候&#xff0c;要想到迭代器</p> 
</blockquote> 
<p>工作原理&#xff1a;</p> 
<ol><li>创建一个指针对象&#xff0c;指向当前数据结构的起始位置</li><li>第一次调用对象的 next 方法&#xff0c;指针自动指向数据结构的第一个成员</li><li>接下来不断调用 next 方法&#xff0c;指针一直往后移动&#xff0c;直到指向最后一个成员</li><li>每调用 next 方法返回一个包含 value 和 done 属性的对象</li></ol> 
<p><strong>案例演示&#xff1a;遍历数组</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">//声明一个数组</span>
<span class="token keyword">const</span> xiyou <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token string">&#34;唐僧&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;孙悟空&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;猪八戒&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;沙僧&#34;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//使用 for...of 遍历数组</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> xiyou<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//获取迭代器对象</span>
<span class="token keyword">let</span> iterator <span class="token operator">&#61;</span> xiyou<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//调用对象的next方法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/7261b300de524e308b2f3d6fa2626003.png" alt="image-20201025174729990" /></p> 
<p><strong>案例演示&#xff1a;自定义遍历数据</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">//声明一个对象</span>
<span class="token keyword">const</span> banji <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;五班&#34;</span><span class="token punctuation">,</span>
    stus<span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#34;张三&#34;</span><span class="token punctuation">,</span>
        <span class="token string">&#34;李四&#34;</span><span class="token punctuation">,</span>
        <span class="token string">&#34;王五&#34;</span><span class="token punctuation">,</span>
        <span class="token string">&#34;小六&#34;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token comment">//索引变量</span>
        <span class="token keyword">let</span> index <span class="token operator">&#61;</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> _this <span class="token operator">&#61;</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">{<!-- --></span>
            next<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> _this<span class="token punctuation">.</span>stus<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
                    <span class="token keyword">const</span> result <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>value<span class="token punctuation">:</span> _this<span class="token punctuation">.</span>stus<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> done<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
                    <span class="token comment">//下标自增</span>
                    index<span class="token operator">&#43;&#43;</span><span class="token punctuation">;</span>
                    <span class="token comment">//返回结果</span>
                    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
                    <span class="token keyword">return</span> <span class="token punctuation">{<!-- --></span>value<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span> done<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//遍历这个对象</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> banji<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/ee3984806f44ae602c00e2e135e681a4.png" alt="image-20201025181339376" /></p> 
<h3><a id="7111_7094"></a>7.1.11、生成器</h3> 
<p>生成器函数是 ES6 提供的一种异步编程解决方案&#xff0c;语法行为与传统函数完全不同。</p> 
<h4><a id="71111_7098"></a>7.1.11.1、生成器函数使用</h4> 
<p>代码说明&#xff1a;</p> 
<ul><li>* 的位置没有限制</li><li>生成器函数返回的结果是迭代器对象&#xff0c;调用迭代器对象的 next 方法可以得到 yield 语句后的值</li><li>yield 相当于函数的暂停标记&#xff0c;也可以认为是函数的分隔符&#xff0c;每调用一次 next 方法&#xff0c;执行一段代码</li><li>next 方法可以传递实参&#xff0c;作为 yield 语句的返回值</li></ul> 
<pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">/*代码1开始执行*/</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;代码1执行了&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token string">&#34;一只没有耳朵&#34;</span><span class="token punctuation">;</span>
    <span class="token comment">/*代码2开始执行*/</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;代码2执行了&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token string">&#34;一只没有尾巴&#34;</span><span class="token punctuation">;</span>
    <span class="token comment">/*代码3开始执行*/</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;代码3执行了&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&#34;真奇怪&#34;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> iterator <span class="token operator">&#61;</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#61;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//遍历</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/df04133784427fb1f615e7d09c62cfc1.png" alt="image-20201025194703172" /></p> 
<h4><a id="71112_7134"></a>7.1.11.2、生成器函数参数</h4> 
<pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> one <span class="token operator">&#61;</span> <span class="token keyword">yield</span> <span class="token number">111</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> two <span class="token operator">&#61;</span> <span class="token keyword">yield</span> <span class="token number">222</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> three <span class="token operator">&#61;</span> <span class="token keyword">yield</span> <span class="token number">333</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>three<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//执行获取迭代器对象</span>
<span class="token keyword">let</span> iterator <span class="token operator">&#61;</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token string">&#39;AAA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//next方法可以传入实参</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;BBB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;CCC&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;DDD&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/66be4bf19f8026b04b98cb516fb30b50.png" alt="image-20201025194822072" /></p> 
<h4><a id="71113_7159"></a>7.1.11.3、生成器函数实例</h4> 
<p><strong>案例演示&#xff1a;1s后控制台输出 111&#xff0c;2s后输出 222&#xff0c;3s后输出 333</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">three</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">yield</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token function">three</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//调用生成器函数</span>
<span class="token keyword">let</span> iterator <span class="token operator">&#61;</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/fa16362e71076bdfbe14a5f6974725e0.png" alt="image-20201025200627574" /></p> 
<p><strong>案例演示&#xff1a;模拟获取 &#xff0c;用户数据 &#xff0c;订单数据 &#xff0c;商品数据</strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">let</span> data <span class="token operator">&#61;</span> <span class="token string">&#34;用户数据&#34;</span><span class="token punctuation">;</span>
        iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">let</span> data <span class="token operator">&#61;</span> <span class="token string">&#34;订单数据&#34;</span><span class="token punctuation">;</span>
        iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getGoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">let</span> data <span class="token operator">&#61;</span> <span class="token string">&#34;商品数据&#34;</span><span class="token punctuation">;</span>
        iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">let</span> users <span class="token operator">&#61;</span> <span class="token keyword">yield</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> orders <span class="token operator">&#61;</span> <span class="token keyword">yield</span> <span class="token function">getOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>orders<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> goods <span class="token operator">&#61;</span> <span class="token keyword">yield</span> <span class="token function">getGoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//调用生成器函数</span>
<span class="token keyword">let</span> iterator <span class="token operator">&#61;</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/6b1c6c66754846fe33f62c21276524a8.png" alt="image-20201025201231357" /></p> 
<h3><a id="7112Promise_7238"></a>7.1.12、Promise</h3> 
<p>Promise 是 ES6 引入的异步编程的新解决方案&#xff0c;语法上 Promise 是一个构造函数&#xff0c;用来封装异步操作并可以获取其成功或失败的结果。</p> 
<h4><a id="71121Promise_7242"></a>7.1.12.1、Promise基本使用</h4> 
<pre><code class="prism language-javascript"><span class="token comment">//实例化 Promise 对象</span>
<span class="token keyword">const</span> p <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>

        <span class="token comment">// 成功调用resolve()处理</span>
        <span class="token keyword">let</span> data <span class="token operator">&#61;</span> <span class="token string">&#34;数据读取成功&#34;</span><span class="token punctuation">;</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 失败调用reject()处理</span>
        <span class="token keyword">let</span> err <span class="token operator">&#61;</span> <span class="token string">&#34;数据读取失败&#34;</span><span class="token punctuation">;</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//调用 promise 对象的 then 方法</span>
p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<h4><a id="71122Promise_7268"></a>7.1.12.2、Promise案例演示</h4> 
<p><strong>案例演示&#xff1a;</strong></p> 
<pre><code class="prism language-javascript"><span class="token comment">// 接口地址: https://api.apiopen.top/getJoke</span>
<span class="token keyword">const</span> p <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">//1. 创建对象</span>
    <span class="token keyword">const</span> xhr <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2. 初始化</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#34;GET&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;https://api.apiopen.top/getJoke&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//3. 发送</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//4. 绑定事件, 处理响应结果</span>
    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">&#61;&#61;&#61;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token comment">//判断响应状态码 200-299</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;&#61;</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
                <span class="token comment">//表示成功</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
                <span class="token comment">//如果失败</span>
                <span class="token function">reject</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//指定回调</span>
p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/c66b93da4b145571f90fb2c0db0513c1.png" alt="image-20201025203323920" /></p> 
<h4><a id="71123Promisethen_7306"></a>7.1.12.3、Promise-then方法</h4> 
<p>调用 then 方法&#xff0c;then 方法的返回结果是 Promise 对象&#xff0c;对象状态由回调函数的执行结果决定&#xff0c;如果回调函数中返回的结果是 非 promise 类型的属性&#xff0c;状态为成功&#xff0c;返回值为对象的成功的值</p> 
<pre><code class="prism language-javascript"><span class="token comment">//创建 promise 对象</span>
<span class="token keyword">const</span> p <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#34;用户数据&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//链式调用&#43;箭头函数</span>
p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/b1e44a64bae470e31bec6b38243d4936.png" alt="image-20201025203756949" /></p> 
<h4><a id="71124Promisecatch_7329"></a>7.1.12.4、Promise-catch方法</h4> 
<p>如果只想处理错误状态&#xff0c;我们可以使用 catch 方法</p> 
<pre><code class="prism language-javascript"><span class="token keyword">const</span> p <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
        <span class="token comment">//设置 p 对象的状态为失败, 并设置失败的值</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#34;出错啦!&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

p<span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/13917a333fbbb46c3102bf8ccdcf4d9a.png" alt="image-20201025203944781" /></p> 
<h3><a id="7113Set_7348"></a>7.1.13、Set</h3> 
<p>ES6 提供了新的数据结构 Set&#xff08;集合&#xff09;。它类似于数组&#xff0c;但成员的值都是唯一的&#xff0c;集合实现了 iterator 接口&#xff0c;所以可以使用『扩展运算符』和『for…of…』进行遍历&#xff0c;集合的属性和方法&#xff1a;</p> 
<ul><li>size&#xff1a;返回集合的元素个数</li><li>add()&#xff1a;增加一个新元素&#xff0c;返回当前集合</li><li>delete()&#xff1a;删除元素&#xff0c;返回 boolean 值</li><li>has()&#xff1a;检测集合中是否包含某个元素&#xff0c;返回 boolean 值</li><li>clear()&#xff1a;清空集合&#xff0c;返回 undefined</li></ul> 
<pre><code class="prism language-javascript"><span class="token comment">//创建一个空集合</span>
<span class="token keyword">let</span> s <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建一个非空集合</span>
<span class="token keyword">let</span> s1 <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//集合属性与方法</span>
<span class="token comment">//返回集合的元素个数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//添加新元素</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//删除元素</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//检测是否存在某个值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//清空集合</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/72e93e66fa960742b8f5f1f9121edc9a.png" alt="image-20201025204233138" /></p> 
<h3><a id="7114Map_7378"></a>7.1.14、Map</h3> 
<p>ES6 提供了 Map 数据结构。它类似于对象&#xff0c;也是键值对的集合。但是“键” 的范围不限于字符串&#xff0c;各种类型的值&#xff08;包括对象&#xff09;都可以当作键。Map 也实现了 iterator 接口&#xff0c;所以可以使用『扩展运算符』和『for…of…』进行遍历。Map 的属性和方法&#xff1a;</p> 
<ul><li>size&#xff1a;返回 Map 的元素个数</li><li>set()&#xff1a;增加一个新元素&#xff0c;返回当前 Map</li><li>get()&#xff1a;返回键名对象的键值</li><li>has()&#xff1a;检测 Map 中是否包含某个元素&#xff0c;返回 boolean 值</li><li>clear()&#xff1a;清空集合&#xff0c;返回 undefined</li></ul> 
<pre><code class="prism language-javascript"><span class="token comment">//创建一个空 map</span>
<span class="token keyword">let</span> m <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建一个非空 map</span>
<span class="token keyword">let</span> m2 <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token string">&#34;name&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;张三&#34;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&#34;gender&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;女&#34;</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//属性和方法</span>
<span class="token comment">//获取映射元素的个数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//添加映射值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取映射值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//检测是否有该映射</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//清除</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/3bd894dd1c913370e03dcdddbdda27c2.png" alt="image-20201025204631735" /></p> 
<h3><a id="7115class__7411"></a>7.1.15、class 类</h3> 
<p>ES6 提供了更接近传统语言的写法&#xff0c;引入了 Class&#xff08;类&#xff09;这个概念&#xff0c;作为对象的模板。通过 class 关键字&#xff0c;可以定义类。基本上&#xff0c;ES6 的 class 可以看作只是 一个语法糖&#xff0c;它的绝大部分功能&#xff0c;ES5 都可以做到&#xff0c;新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已&#xff0c;它的一些如下&#xff1a;</p> 
<ul><li>class&#xff1a;声明类</li><li>constructor&#xff1a;定义构造函数初始化</li><li>extends&#xff1a;继承父类</li><li>super&#xff1a;调用父级构造方法</li><li>static&#xff1a;定义静态方法和属性</li></ul> 
<pre><code class="prism language-javascript"><span class="token comment">//父类</span>
<span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">//构造方法</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span> color<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">&#61;</span> brand<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">&#61;</span> color<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">&#61;</span> price<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//对象方法</span>
    <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;我可以打电话!!!&#34;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//子类</span>
<span class="token keyword">class</span> <span class="token class-name">SmartPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span> color<span class="token punctuation">,</span> price<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> pixel<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span> color<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>screen <span class="token operator">&#61;</span> screen<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pixel <span class="token operator">&#61;</span> pixel<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//子类方法</span>
    <span class="token function">photo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;我可以拍照!!&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">playGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;我可以玩游戏!!&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//方法重写</span>
    <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;我可以进行视频通话!!&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//静态方法</span>
    <span class="token keyword">static</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;我可以运行程序&#34;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;我可以建立连接&#34;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//实例化对象</span>
<span class="token keyword">const</span> Nokia <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token string">&#34;诺基亚&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;灰色&#34;</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> iPhone6s <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">SmartPhone</span><span class="token punctuation">(</span><span class="token string">&#34;苹果&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;白色&#34;</span><span class="token punctuation">,</span> <span class="token number">6088</span><span class="token punctuation">,</span> <span class="token string">&#34;4.7inch&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;500w&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//调用子类方法</span>
iPhone6s<span class="token punctuation">.</span><span class="token function">playGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//调用重写方法</span>
iPhone6s<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//调用静态方法</span>
SmartPhone<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/a32a01d82cb231f54f4981b69694fb9f.png" alt="image-20201025205027699" /></p> 
<h3><a id="7116_7482"></a>7.1.16、数值扩展</h3> 
<h4><a id="71161_7484"></a>7.1.16.1、二进制和八进制</h4> 
<p>ES6 新增了二进制和八进制的表示方法</p> 
<pre><code class="prism language-javascript"><span class="token keyword">let</span> b <span class="token operator">&#61;</span> <span class="token number">0b1010</span><span class="token comment">//二进制</span>
<span class="token keyword">let</span> o <span class="token operator">&#61;</span> <span class="token number">0o777</span><span class="token punctuation">;</span><span class="token comment">//八进制</span>
<span class="token keyword">let</span> d <span class="token operator">&#61;</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//十进制</span>
<span class="token keyword">let</span> x <span class="token operator">&#61;</span> <span class="token number">0xff</span><span class="token punctuation">;</span><span class="token comment">//十六进制</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/c126e872714990e605fdcc1508cdc33c.png" alt="image-20201025205402446" /></p> 
<h4><a id="71162NumberEPSILON_7501"></a>7.1.16.2、Number.EPSILON</h4> 
<p>Number.EPSILON&#xff1a;它是 JavaScript 表示的最小精度&#xff0c;EPSILON 属性的值接近于 2.2204460492503130808472633361816E-16</p> 
<pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">equal</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">&#43;</span> <span class="token number">0.2</span> <span class="token operator">&#61;&#61;&#61;</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">&#43;</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/d4a73aab41d2bc214326ff17ae97fb6f.png" alt="image-20201025205537398" /></p> 
<h4><a id="71163NumberisFinite_7519"></a>7.1.16.3、Number.isFinite</h4> 
<p>Number.isFinite&#xff1a;检测一个数值是否为有限数</p> 
<pre><code class="prism language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/a8611da07c8890c5d55826eb7fe8f43b.png" alt="image-20201025205822198" /></p> 
<h4><a id="71164NumberisNaN_7532"></a>7.1.16.4、Number.isNaN</h4> 
<p>Number.isNaN&#xff1a;检测一个数值是否为 NaN</p> 
<pre><code class="prism language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/3bd2ba47d5441caac3c2585e75d76ad8.png" alt="image-20201025205950242" /></p> 
<h4><a id="71165NumberparseInt_7542"></a>7.1.16.5、Number.parseInt</h4> 
<p>Number.parseInt&#xff1a;将一个字符串转换为整数</p> 
<pre><code class="prism language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#34;123abc&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/d7e850ad5d89ed46f543ff274724d89b.png" alt="image-20201025210139403" /></p> 
<h4><a id="71166NumberparseFloat_7552"></a>7.1.16.6、Number.parseFloat</h4> 
<p>Number.parseFloat&#xff1a;将一个字符串转换为浮点数</p> 
<pre><code class="prism language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#34;3.1415926神奇&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/bff9db6ac35e15c9c77e51937c7b50e6.png" alt="image-20201025210334463" /></p> 
<h4><a id="71167NumberisInteger_7562"></a>7.1.16.7、Number.isInteger</h4> 
<p>Number.isInteger&#xff1a;判断一个数是否为整数</p> 
<pre><code class="prism language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/a38c6b96578d9f18c63d4d35b62b1a0a.png" alt="image-20201025210435568" /></p> 
<h4><a id="71168Mathtrunc_7573"></a>7.1.16.8、Math.trunc</h4> 
<p>Math.trunc&#xff1a;将数字的小数部分抹掉</p> 
<pre><code class="prism language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/a4652a02e7a1b4bc4cf8cfc62aa5f405.png" alt="image-20201025210605825" /></p> 
<h4><a id="71169Mathsign_7583"></a>7.1.16.9、Math.sign</h4> 
<p>Math.sign&#xff1a;判断一个数到底为正数、负数、还是零</p> 
<pre><code class="prism language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/3a39d8535927bdcf4e2d81e05cca7fd5.png" alt="image-20201025210642315" /></p> 
<h3><a id="7117_7595"></a>7.1.17、对象扩展</h3> 
<p>ES6 新增了一些 Object 对象的方法&#xff0c;例如&#xff1a;</p> 
<ul><li>Object.is&#xff1a;比较两个值是否严格相等&#xff0c;与『&#61;&#61;&#61;』行为基本一致&#xff08;&#43;0 与 NaN&#xff09;</li><li>Object.assign&#xff1a;对象的合并&#xff0c;将源对象的所有可枚举属性&#xff0c;复制到目标对象</li><li>__proto__、setPrototypeOf、 setPrototypeOf可以直接设置对象的原型</li></ul> 
<h4><a id="71171Objectis_7603"></a>7.1.17.1、Object.is</h4> 
<p>Object.is&#xff1a;判断两个值是否完全相等</p> 
<pre><code class="prism language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#61;&#61;&#61;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#61;&#61;&#61;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">&#61;&#61;&#61;</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#61;&#61;&#61;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/bdec47a5a4af766fef6a766cf3a2156d.png" alt="image-20201025211007712" /></p> 
<h4><a id="71172Objectassign_7615"></a>7.1.17.2、Object.assign</h4> 
<p>Object.assign&#xff1a;对象的合并&#xff0c;后边的对象会把前边对象的相同属性和方法覆盖&#xff0c;没有的属性和方法会合并</p> 
<pre><code class="prism language-javascript"><span class="token keyword">const</span> config1 <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    host<span class="token punctuation">:</span> <span class="token string">&#34;localhost&#34;</span><span class="token punctuation">,</span>
    port<span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;zhangsan&#34;</span><span class="token punctuation">,</span>
    pass<span class="token punctuation">:</span> <span class="token string">&#34;root&#34;</span><span class="token punctuation">,</span>
    test1<span class="token punctuation">:</span> <span class="token string">&#34;test1&#34;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> config2 <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    host<span class="token punctuation">:</span> <span class="token string">&#34;127.0.0.1&#34;</span><span class="token punctuation">,</span>
    port<span class="token punctuation">:</span> <span class="token number">3309</span><span class="token punctuation">,</span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;lisi&#34;</span><span class="token punctuation">,</span>
    pass<span class="token punctuation">:</span> <span class="token string">&#34;root&#34;</span><span class="token punctuation">,</span>
    test2<span class="token punctuation">:</span> <span class="token string">&#34;test2&#34;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>config1<span class="token punctuation">,</span> config2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/98a9827537b0f61618056cda4826dbc8.png" alt="image-20201025221354637" /></p> 
<h4><a id="71173_7639"></a>7.1.17.3、设置原型对象</h4> 
<ul><li>Object.setPrototypeOf&#xff1a;设置原型对象</li><li>Object.getPrototypeof&#xff1a;获取原型对象</li></ul> 
<pre><code class="prism language-javascript"><span class="token keyword">const</span> school <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;MySchool&#34;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cities <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    xiaoqu<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#34;北京&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;上海&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;深圳&#34;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>school<span class="token punctuation">,</span> cities<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>school<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>school<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/2692986b738e4ec760eff2a59ee9daef.png" alt="image-20201025221735850" /></p> 
<h3><a id="7118_7658"></a>7.1.18、模块化</h3> 
<p>模块化是指将一个大的程序文件&#xff0c;拆分成许多小的文件&#xff0c;然后将小文件组合起来。</p> 
<h4><a id="71181_7662"></a>7.1.18.1、模块化的好处</h4> 
<ul><li>防止命名冲突</li><li>代码复用</li><li>高维护性</li></ul> 
<h4><a id="71182_7668"></a>7.1.18.2、模块化的产品</h4> 
<p>CommonJS &#61;&gt; NodeJS、Browserify</p> 
<p>AMD &#61;&gt; requireJS</p> 
<p>CMD &#61;&gt; seaJS</p> 
<h4><a id="71183_7676"></a>7.1.18.3、模块化的语法</h4> 
<p>模块功能主要由两个命令构成&#xff1a;export 和 import。</p> 
<ul><li>export 命令用于规定模块的对外接口</li><li>import 命令用于输入其它模块提供的功能</li></ul> 
<h4><a id="71184_7683"></a>7.1.18.4、模块化的暴露</h4> 
<p>m1.js</p> 
<pre><code class="prism language-javascript"><span class="token comment">//方式一&#xff1a;分别暴露</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> school <span class="token operator">&#61;</span> <span class="token string">&#34;华北理工大学&#34;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;我们要学习&#xff01;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<p>m2.js</p> 
<pre><code class="prism language-javascript"><span class="token comment">//方式二&#xff1a;统一暴露</span>
<span class="token keyword">let</span> school <span class="token operator">&#61;</span> <span class="token string">&#34;华北理工大学&#34;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">findJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;我们要找工作&#xff01;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token punctuation">{<!-- --></span>school<span class="token punctuation">,</span> findJob<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre> 
<p>m3.js</p> 
<pre><code class="prism language-javascript"><span class="token comment">//方式三&#xff1a;默认暴露</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{<!-- --></span>
    school<span class="token punctuation">:</span> <span class="token string">&#34;华北理工大学&#34;</span><span class="token punctuation">,</span>
    change<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;我们要改变自己&#xff01;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
<h4><a id="71185_7721"></a>7.1.18.5、模块化的导入</h4> 
<p>index.html</p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>module<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token comment">// 引入 m1.js 模块内容</span>
    <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m1 <span class="token keyword">from</span> <span class="token string">&#34;./m1.js&#34;</span><span class="token punctuation">;</span>
    <span class="token comment">// 引入 m2.js 模块内容</span>
    <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m2 <span class="token keyword">from</span> <span class="token string">&#34;./m2.js&#34;</span><span class="token punctuation">;</span>
    <span class="token comment">// 引入 m3.js 模块内容</span>
    <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m3 <span class="token keyword">from</span> <span class="token string">&#34;./m3.js&#34;</span><span class="token punctuation">;</span>
     
    m1<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m2<span class="token punctuation">.</span><span class="token function">findJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m3<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/4566c9c669277441f6f717a83b758da7.png" alt="image-20201025230535531" /></p> 
<h4><a id="71186_7753"></a>7.1.18.6、解构赋值形式</h4> 
<p>index.html</p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>module<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token comment">// 引入 m1.js 模块内容</span>
    <span class="token keyword">import</span> <span class="token punctuation">{<!-- --></span>school<span class="token punctuation">,</span> study<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#34;./m1.js&#34;</span><span class="token punctuation">;</span>
    <span class="token comment">// 引入 m2.js 模块内容</span>
    <span class="token keyword">import</span> <span class="token punctuation">{<!-- --></span>school <span class="token keyword">as</span> s<span class="token punctuation">,</span> findJob<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#34;./m2.js&#34;</span><span class="token punctuation">;</span>
    <span class="token comment">// 引入 m3.js 模块内容</span>
    <span class="token keyword">import</span> <span class="token punctuation">{<!-- --></span><span class="token keyword">default</span> <span class="token keyword">as</span> m3<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#34;./m3.js&#34;</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>school<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">findJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m3<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/914ec8bc96c157e1d2e870930fb2590a.png" alt="image-20201025230758535" /></p> 
<blockquote> 
 <p>注意&#xff1a;针对默认暴露还可以直接 <code>import m3 from &#34;./m3.js&#34;</code></p> 
</blockquote> 
<h3><a id="7119_7792"></a>7.1.19、浅拷贝和深拷贝</h3> 
<p>如何区分深拷贝与浅拷贝&#xff0c;简单点来说&#xff0c;就是假设B复制了A&#xff0c;当修改A时&#xff0c;看B是否会发生变化&#xff0c;如果B也跟着变了&#xff0c;说明这是浅拷贝&#xff1b;如果B没变&#xff0c;那就是深拷贝&#xff0c;深拷贝与浅拷贝的概念只存在于引用数据类型。</p> 
<h4><a id="71191_7796"></a>7.1.19.1、浅拷贝</h4> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;张三&#34;</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    speak<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;我是&#34;</span> <span class="token operator">&#43;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> obj2 <span class="token operator">&#61;</span> obj1<span class="token punctuation">;</span>

<span class="token comment">// 当修改obj2的属性和方法的时候&#xff0c;obj1相应的属性和方法也会改变</span>
obj2<span class="token punctuation">.</span>name <span class="token operator">&#61;</span> <span class="token string">&#34;李四&#34;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/6c91cba15c8b2bae18d6f69b842bacae.png" alt="image-20201026083921606" /></p> 
<h4><a id="71192_7817"></a>7.1.19.2、深拷贝</h4> 
<h5><a id="711921_7819"></a>7.1.19.2.1、自带的</h5> 
<p><strong>Array&#xff1a;slice()、concat()、Array.from()、… 操作符&#xff1a;只能实现一维数组的深拷贝</strong></p> 
<p>slice()方法演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> arr1 <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr2 <span class="token operator">&#61;</span> arr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token number">200</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/9210eb6cb1f8ce51db545f32388a0a19.png" alt="image-20201026084619174" /></p> 
<p>concat()方法演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> arr1 <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr2 <span class="token operator">&#61;</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token number">200</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/10f0bfe1e754957fb947804b201b90a9.png" alt="image-20201026084557933" /></p> 
<p>Array.from()方法演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> arr1 <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr2 <span class="token operator">&#61;</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token number">200</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/565589822317ef0caf40c97b41f5dedc.png" alt="image-20201026084704745" /></p> 
<p>… 操作符演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> arr1 <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr2 <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">]</span><span class="token punctuation">;</span>
arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token number">200</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/2d90b07bfdc114450b7fef097772dd18.png" alt="image-20201026084831695" /></p> 
<p><strong>Object&#xff1a;Object.assign()、… 操作符&#xff1a;只能实现一维对象的深拷贝</strong></p> 
<p>Object.assign()方法演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;张三&#34;</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    speak<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;我是&#34;</span> <span class="token operator">&#43;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> obj2 <span class="token operator">&#61;</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 当修改obj2的属性和方法的时候&#xff0c;obj1相应的属性和方法不会改变</span>
obj2<span class="token punctuation">.</span>name <span class="token operator">&#61;</span> <span class="token string">&#34;李四&#34;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/a79b8cbcb59725bd43f406f3b407e5a5.png" alt="image-20201026085247516" /></p> 
<p>… 操作符演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;张三&#34;</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    speak<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;我是&#34;</span> <span class="token operator">&#43;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> obj2 <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    <span class="token operator">...</span>obj1
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 当修改obj2的属性和方法的时候&#xff0c;obj1相应的属性和方法不会改变</span>
obj2<span class="token punctuation">.</span>name <span class="token operator">&#61;</span> <span class="token string">&#34;李四&#34;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/5b7f4e62a810da3cba10f4e9de868604.png" alt="image-20201026085337223" /></p> 
<p><strong>JSON.parse(JSON.stringify(obj))&#xff1a;可实现多维对象的深拷贝&#xff0c;但会忽略 <code>undefined</code> 、 <code>任意的函数</code> 、<code>Symbol 值</code></strong></p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;张三&#34;</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    birthday<span class="token punctuation">:</span> <span class="token punctuation">{<!-- --></span>
        year<span class="token punctuation">:</span> <span class="token number">1997</span><span class="token punctuation">,</span>
        month<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
        day<span class="token punctuation">:</span> <span class="token number">5</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    speak<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;我是&#34;</span> <span class="token operator">&#43;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> obj2 <span class="token operator">&#61;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 当修改obj2的属性和方法的时候&#xff0c;obj1相应的属性和方法不会改变</span>
obj2<span class="token punctuation">.</span>name <span class="token operator">&#61;</span> <span class="token string">&#34;李四&#34;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/02aa09c5c1b8b563ffb115cfc9f4a1f0.png" alt="image-20201026085639830" /></p> 
<blockquote> 
 <p>注意&#xff1a;进行<code>JSON.stringify()</code>序列化的过程中&#xff0c;<code>undefined、任意的函数以及 symbol 值</code>&#xff0c;在序列化过程中会被忽略&#xff08;出现在非数组对象的属性值中时&#xff09;或者被转换成 null&#xff08;出现在数组中时&#xff09;&#xff0c;由上面可知&#xff0c;JS 提供的自有方法并不能彻底解决Array、Object的深拷贝问题&#xff0c;因此我们应该自己实现。</p> 
</blockquote> 
<h5><a id="711922_7945"></a>7.1.19.2.2、通用版</h5> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;张三&#34;</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    birthday<span class="token punctuation">:</span> <span class="token punctuation">{<!-- --></span>
        year<span class="token punctuation">:</span> <span class="token number">1997</span><span class="token punctuation">,</span>
        month<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
        day<span class="token punctuation">:</span> <span class="token number">5</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    speak<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;我是&#34;</span> <span class="token operator">&#43;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> obj2 <span class="token operator">&#61;</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 当修改obj2的属性和方法的时候&#xff0c;obj1相应的属性和方法不会改变</span>
obj2<span class="token punctuation">.</span>name <span class="token operator">&#61;</span> <span class="token string">&#34;李四&#34;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 深拷贝通用方法
 * &#64;param obj   需要拷贝的对象
 * &#64;param has
 * &#64;returns {any|RegExp|Date}
 */</span>
<span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> has <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">// 类型检查</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">&#61;&#61;</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">&#61;&#61;</span> <span class="token string">&#34;object&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>

    <span class="token comment">// 构造对象</span>
    <span class="token keyword">const</span> newObj <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>constructor</span><span class="token punctuation">;</span>

    <span class="token comment">// 防止自引用导致的死循环</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>has<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> has<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    has<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> newObj<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 循环遍历属性及方法</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">&#61;</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 返回对象</span>
    <span class="token keyword">return</span> newObj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/3f4db7e1675de043429df5bf2ecc3b5d.png" alt="image-20201026090711359" /></p> 
<h2><a id="72ECMAScript7_8002"></a>7.2、ECMAScript7新特性</h2> 
<h3><a id="721_8004"></a>7.2.1、数组方法扩展</h3> 
<p>Array.prototype.includes&#xff1a;此方法用来检测数组中是否包含某个元素&#xff0c;返回布尔类型值</p> 
<pre><code class="prism language-javascript"><span class="token keyword">const</span> mingzhu <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token string">&#34;西游记&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;红楼梦&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;三国演义&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;水浒传&#34;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mingzhu<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#34;西游记&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/c9aa858f337ad639378bdda002e62617.png" alt="image-20201026091832177" /></p> 
<h3><a id="722_8015"></a>7.2.2、幂运算</h3> 
<p><code>**</code> 操作符的作用和 <code>Math.pow</code> 的作用是一样&#xff0c;请看代码&#xff1a;</p> 
<pre><code class="prism language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/9920bbd0845ad8ccbe0b89c5ccdb8d6e.png" alt="image-20201026091938745" /></p> 
<h2><a id="73ECMAScript8_8026"></a>7.3、ECMAScript8新特性</h2> 
<h3><a id="731async__8028"></a>7.3.1、async 函数</h3> 
<p>async 函数的语法&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    
<span class="token punctuation">}</span>
</code></pre> 
<p>async 函数的返回值&#xff1a;</p> 
<ol><li>返回的结果不是一个 Promise 类型的对象&#xff0c;返回的结果就是成功 Promise 对象</li><li>返回的结果如果是一个 Promise 对象&#xff0c;具体需要看执行resolve方法还是reject方法</li><li>抛出错误&#xff0c;返回的结果是一个失败的 Promise</li></ol> 
<p>async 函数的演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token comment">//async 函数</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;成功的数据&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// reject(&#34;失败的错误&#34;);</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> result <span class="token operator">&#61;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//调用 then 方法</span>
result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> reason <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/74f290d199ade307d151a755ab01e17b.png" alt="image-20201026092543097" /></p> 
<h3><a id="732await__8067"></a>7.3.2、await 表达式</h3> 
<p>async 和 await 两种语法结合可以让异步代码像同步代码一样</p> 
<p>await 表达式的注意事项&#xff1a;</p> 
<ol><li>await 必须写在 async 函数中</li><li>await 右侧的表达式一般为 promise 对象</li><li>await 返回的是 promise 成功的值</li><li>await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 捕获处理</li></ol> 
<p>await 表达式的语法演示&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token comment">//创建 promise 对象</span>
<span class="token keyword">const</span> p <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#34;用户数据&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//reject(&#34;失败啦!&#34;);</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//await 要放在 async 函数中.</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">let</span> result <span class="token operator">&#61;</span> <span class="token keyword">await</span> p<span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//调用函数</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/665370c4fba5aaf2f16aa9be2888a375.png" alt="image-20201026093209030" /></p> 
<p>await 表达式的案例演示&#xff1a;async与await封装AJAX请求</p> 
<pre><code class="prism language-javascript"><span class="token comment">// 发送 AJAX 请求, 返回的结果是 Promise 对象</span>
<span class="token keyword">function</span> <span class="token function">sendAJAX</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
        <span class="token comment">//1. 创建对象</span>
        <span class="token keyword">const</span> x <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 初始化</span>
        x<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3. 发送</span>
        x<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//4. 事件绑定</span>
        x<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>readyState <span class="token operator">&#61;&#61;&#61;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>status <span class="token operator">&gt;&#61;</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
                    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//成功</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>
                    <span class="token function">reject</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//失败</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>


<span class="token comment">// async 与 await 测试</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">//发送 AJAX 请求 1</span>
    <span class="token keyword">let</span> joke <span class="token operator">&#61;</span> <span class="token keyword">await</span> <span class="token function">sendAJAX</span><span class="token punctuation">(</span><span class="token string">&#34;https://api.apiopen.top/getJoke&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//发送 AJAX 请求 2</span>
    <span class="token keyword">let</span> tianqi <span class="token operator">&#61;</span> <span class="token keyword">await</span> <span class="token function">sendAJAX</span><span class="token punctuation">(</span><span class="token string">&#39;https://www.tianqiapi.com/api/?version&#61;v1&amp;city&#61;%E5%8C%97%E4%BA%AC&amp;appid&#61;23941491&amp;appsecret&#61;TXoD5e8P&#39;</span><span class="token punctuation">)</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>joke<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>tianqi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为了区别数据&#xff0c;我这里用红色的error输出</span>
<span class="token punctuation">}</span>

<span class="token comment">// 调用函数</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/9c96ad3b47b55f33fa84825ad4f7e477.png" alt="image-20201026093545830" /></p> 
<h3><a id="733_8146"></a>7.3.3、对象方法拓展</h3> 
<ul><li>Object.keys()方法返回一个给定对象的所有可枚举键值的数组</li><li>Object.values()方法返回一个给定对象的所有可枚举属性值的数组</li><li>Object.entries()方法返回一个给定对象自身可遍历属性 [key,value] 的数组</li></ul> 
<pre><code class="prism language-javascript"><span class="token comment">//声明对象</span>
<span class="token keyword">const</span> person <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;张三&#34;</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">20</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//获取对象所有的键</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取对象所有的值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取对象所有的键值对数组</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建 Map</span>
<span class="token keyword">const</span> m <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">&#34;name&#34;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/c20a17fc761ee98ec76ce034011a45e1.png" alt="image-20201026094205153" /></p> 
<p>Object.getOwnPropertyDescriptors方法返回指定对象所有自身属性的描述对象</p> 
<pre><code class="prism language-javascript"><span class="token comment">//声明对象</span>
<span class="token keyword">const</span> person <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token string">&#34;张三&#34;</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">20</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//对象属性的描述对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//声明对象</span>
<span class="token keyword">const</span> obj <span class="token operator">&#61;</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{<!-- --></span>
    name<span class="token punctuation">:</span> <span class="token punctuation">{<!-- --></span>
        <span class="token comment">//设置值</span>
        value<span class="token punctuation">:</span> <span class="token string">&#34;李四&#34;</span><span class="token punctuation">,</span>
        <span class="token comment">//属性特性</span>
        writable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token punctuation">{<!-- --></span>
        <span class="token comment">//设置值</span>
        value<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
        <span class="token comment">//属性特性</span>
        writable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//对象属性的描述对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/ac3d28ba3178fa5429d4c5813e8f793c.png" alt="image-20201026094408076" /></p> 
<h2><a id="74ECMAScript9_8208"></a>7.4、ECMAScript9新特性</h2> 
<h3><a id="741_8210"></a>7.4.1、对象拓展</h3> 
<p>Rest 参数与 spread 扩展运算符在 ES6 中已经引入&#xff0c;不过 ES6 中只针对于数组&#xff0c;在 ES9 中为对象提供了像数组一样的 rest 参数和扩展运算符</p> 
<h4><a id="7411_8214"></a>7.4.1.1、对象展开</h4> 
<pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> <span class="token operator">...</span>user<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>
    host<span class="token punctuation">:</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span>
    port<span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
    username<span class="token punctuation">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
    password<span class="token punctuation">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
    type<span class="token punctuation">:</span> <span class="token string">&#39;master&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/6bb0e75ed9882ee4a65240839ac2c0e9.png" alt="image-20201026123314827" /></p> 
<h4><a id="7412_8234"></a>7.4.1.2、对象合并</h4> 
<pre><code class="prism language-javascript"><span class="token keyword">const</span> skillOne <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    q<span class="token punctuation">:</span> <span class="token string">&#39;天音波&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> skillTwo <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    w<span class="token punctuation">:</span> <span class="token string">&#39;金钟罩&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> skillThree <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    e<span class="token punctuation">:</span> <span class="token string">&#39;天雷破&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> skillFour <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span>
    r<span class="token punctuation">:</span> <span class="token string">&#39;猛龙摆尾&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> mangseng <span class="token operator">&#61;</span> <span class="token punctuation">{<!-- --></span><span class="token operator">...</span>skillOne<span class="token punctuation">,</span> <span class="token operator">...</span>skillTwo<span class="token punctuation">,</span> <span class="token operator">...</span>skillThree<span class="token punctuation">,</span> <span class="token operator">...</span>skillFour<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mangseng<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/0ad0c01503b55ce2c6f32b3f0a957f56.png" alt="image-20201026123443198" /></p> 
<h3><a id="742_8259"></a>7.4.2、正则表达式拓展</h3> 
<h4><a id="7421_8261"></a>7.4.2.1、命名捕获分组</h4> 
<p>ES9 允许命名捕获组使用符号 <code>?&lt;name&gt;</code> &#xff0c;这样获取捕获结果可读性更强。使用数组下标不好吗&#xff1f;的确不好&#xff0c;因为如果一旦你想要获取的元素一旦增加&#xff0c;数组下标就改变了&#xff0c;所以建议使用命名捕获分组</p> 
<pre><code class="prism language-javascript"><span class="token keyword">let</span> str <span class="token operator">&#61;</span> <span class="token string">&#39;&lt;a href&#61;&#34;https://www.baidu.com&#34;&gt;打开百度&#xff0c;你就知道&#xff01;&lt;/a&gt;&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> reg <span class="token operator">&#61;</span> <span class="token regex">/&lt;a href&#61;&#34;(?&lt;url&gt;.*)&#34;&gt;(?&lt;text&gt;.*)&lt;\/a&gt;/</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">&#61;</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/8528a032da7517daba43b4ab38b9b2fd.png" alt="image-20201026124054368" /></p> 
<h4><a id="7422_8275"></a>7.4.2.2、正向断言</h4> 
<p>ES9 支持正向断言&#xff0c;通过对匹配结果后面的内容进行判断&#xff0c;对匹配进行筛选。</p> 
<pre><code class="prism language-javascript"><span class="token comment">//声明字符串</span>
<span class="token keyword">let</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;订单编号开始123456789订单编号结束&#34;</span><span class="token punctuation">;</span>
<span class="token comment">//正向断言</span>
<span class="token keyword">const</span> reg <span class="token operator">&#61;</span> <span class="token regex">/\d&#43;(?&#61;订单编号结束)/</span><span class="token punctuation">;</span><span class="token comment">//也就是说数字的后边一定要跟着 订单编号结束</span>
<span class="token keyword">const</span> result <span class="token operator">&#61;</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/8d7a1264a838ce36f9a422c549e50426.png" alt="image-20201026124911298" /></p> 
<h4><a id="7423_8290"></a>7.4.2.3、反向断言</h4> 
<p>ES9 支持反向断言&#xff0c;通过对匹配结果前面的内容进行判断&#xff0c;对匹配进行筛选。</p> 
<pre><code class="prism language-javascript"><span class="token comment">//声明字符串</span>
<span class="token keyword">let</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;订单编号开始123456789订单编号结束&#34;</span><span class="token punctuation">;</span>
<span class="token comment">//正向断言</span>
<span class="token keyword">const</span> reg <span class="token operator">&#61;</span> <span class="token regex">/(?&lt;&#61;订单编号开始)\d&#43;/</span><span class="token punctuation">;</span><span class="token comment">//也就是说数字的前边一定要跟着 订单编号开始</span>
<span class="token keyword">const</span> result <span class="token operator">&#61;</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/0ed065b20d34aa358c6632f1fb8e72dc.png" alt="image-20201026125048460" /></p> 
<h4><a id="7424dotAll_8305"></a>7.4.2.4、dotAll模式</h4> 
<p>正则表达式中点 <code>.</code> 匹配除回车外的任何单字符&#xff0c;标记 <code>s</code> 改变这种行为&#xff0c;允许行终止符出现&#xff0c;也就是dotAll模式</p> 
<pre><code class="prism language-javascript"><span class="token keyword">let</span> str <span class="token operator">&#61;</span> <span class="token template-string"><span class="token string">&#96;
&lt;ul&gt;
     &lt;li&gt;
         &lt;a&gt;肖生克的救赎&lt;/a&gt;
         &lt;p&gt;上映日期: 1994-09-10&lt;/p&gt;
         &lt;/li&gt;
     &lt;li&gt;
         &lt;a&gt;阿甘正传&lt;/a&gt;
         &lt;p&gt;上映日期: 1994-07-06&lt;/p&gt;
     &lt;/li&gt;
&lt;/ul&gt;&#96;</span></span><span class="token punctuation">;</span>

<span class="token comment">//声明正则</span>
<span class="token keyword">const</span> reg <span class="token operator">&#61;</span> <span class="token operator">/</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token operator">&lt;</span>a<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>\<span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>\<span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token operator">/</span>gs<span class="token punctuation">;</span>

<span class="token comment">// 执行匹配</span>
<span class="token keyword">let</span> result<span class="token punctuation">;</span>
<span class="token keyword">let</span> data <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>result <span class="token operator">&#61;</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>title<span class="token punctuation">:</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> time<span class="token punctuation">:</span> result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//输出结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/1948e54e433c1c5a8d6941aa87abb0a3.png" alt="image-20201026125632778" /></p> 
<h2><a id="75ECMAScript10_8338"></a>7.5、ECMAScript10新特性</h2> 
<h3><a id="751_8340"></a>7.5.1、对象方法拓展</h3> 
<p><code>Object.fromEntries()</code>方法是<code>Object.entries()</code>的逆操作&#xff0c;用于将一个键值对数组转为对象。</p> 
<pre><code class="prism language-javascript"><span class="token comment">//ES6&#xff1a;Map</span>
<span class="token comment">//ES10&#xff1a;Object.fromEntries</span>
<span class="token keyword">const</span> m <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">&#34;name&#34;</span><span class="token punctuation">,</span> <span class="token string">&#34;张三&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">&#34;age&#34;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">&#61;</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//ES8&#xff1a;Object.entries</span>
<span class="token keyword">const</span> arr <span class="token operator">&#61;</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/6006e9749a2d724bf9d798bbd6e35dc1.png" alt="image-20201026130157037" /></p> 
<h3><a id="752_8360"></a>7.5.2、字符串方法拓展</h3> 
<pre><code class="prism language-javascript"><span class="token keyword">let</span> str <span class="token operator">&#61;</span> <span class="token string">&#34;   iloveyou   &#34;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只去除前边的空格</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只去除后边的空格</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/1e7d98664a9186f4aad8d70b3f0d7844.png" alt="image-20201026130328997" /></p> 
<h3><a id="753_8370"></a>7.5.3、数组方法拓展</h3> 
<p>flat() 方法会按照一个可指定的深度递归遍历数组&#xff0c;并将所有元素与遍历到的子数组中的元素合并为一个新数组返回&#xff0c;说白了就是将多维数组转化为低维数组。</p> 
<pre><code class="prism language-javascript"><span class="token keyword">const</span> arr1 <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr2 <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//参数为深度是一个数字</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//参数为深度是一个数字</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/82698571175269cfa720725b92ec252a.png" alt="image-20201026130807695" /></p> 
<p>flatMap() 方法首先使用映射函数映射每个元素&#xff0c;然后将结果压缩成一个新数组。它与 map 连着深度值为1的 flat 几乎相同&#xff0c;但 flatMap 通常在合并成一种方法的效率稍微高一些。</p> 
<pre><code class="prism language-javascript"><span class="token keyword">var</span> arr1 <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">&#61;&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> arr2 <span class="token operator">&#61;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>x <span class="token operator">&#61;&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/9b921b92e2905eb59c2548c1a9221f16.png" alt="image-20201026133203754" /></p> 
<h3><a id="754Symbol_8397"></a>7.5.4、Symbol属性拓展</h3> 
<p>Symbol.prototype.description用来读取Symbol的描述值</p> 
<pre><code class="prism language-javascript"><span class="token comment">//创建 Symbol</span>
<span class="token keyword">let</span> s <span class="token operator">&#61;</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#34;张三&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/6667f58ef3dea81f5e3a243e6e2f427f.png" alt="image-20201026133827612" /></p> 
<h2><a id="76ECMAScript11_8409"></a>7.6、ECMAScript11新特性</h2> 
<h3><a id="761class__8411"></a>7.6.1、class 私有属性</h3> 
<p>私有属性只能在class中访问</p> 
<pre><code class="prism language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">//公有属性</span>
    name<span class="token punctuation">;</span>
    <span class="token comment">//私有属性</span>
    #age<span class="token punctuation">;</span>
    #weight<span class="token punctuation">;</span>

    <span class="token comment">//构造方法</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">&#61;</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>#age <span class="token operator">&#61;</span> age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>#weight <span class="token operator">&#61;</span> weight<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//普通方法</span>
    <span class="token function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#weight<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//实例化</span>
<span class="token keyword">const</span> girl <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#34;小可爱&#34;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&#34;45kg&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
girl<span class="token punctuation">.</span><span class="token function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/c084d62abf8bd623dffdd342155a4e7f.png" alt="image-20201026134454658" /></p> 
<h3><a id="762PromiseallSettled_8445"></a>7.6.2、Promise.allSettled</h3> 
<p>该Promise.allSettled()方法返回一个在所有给定的promise都已经fulfilled或rejected后的promise&#xff0c;并带有一个对象数组&#xff0c;每个对象表示对应的promise结果。当您有多个彼此不依赖的异步任务成功完成时&#xff0c;或者您总是想知道每个promise的结果时&#xff0c;通常使用它。</p> 
<p>相比之下&#xff0c;Promise.all() 更适合彼此相互依赖或者在其中任何一个reject时立即结束。</p> 
<pre><code class="prism language-javascript"><span class="token comment">//声明两个promise对象</span>
<span class="token keyword">const</span> p1 <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#34;商品数据 - 1&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> p2 <span class="token operator">&#61;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
        <span class="token comment">// resolve(&#34;商品数据 - 2&#34;);</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#34;出错啦!&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//调用 allsettled 方法</span>
<span class="token keyword">const</span> result1 <span class="token operator">&#61;</span> Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//调用 all 方法</span>
<span class="token keyword">const</span> result2 <span class="token operator">&#61;</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/cfad0e29a184d4dec3d55bac888836f9.png" alt="image-20201026135411075" /></p> 
<h3><a id="763_8477"></a>7.6.3、字符串方法扩展</h3> 
<p><code>String.prototype.matchAll()</code> 方法返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器。</p> 
<pre><code class="prism language-javascript"><span class="token keyword">let</span> str <span class="token operator">&#61;</span>
<span class="token template-string"><span class="token string">&#96;&lt;ul&gt;
    &lt;li&gt;
        &lt;a&gt;肖生克的救赎&lt;/a&gt;
        &lt;p&gt;上映日期: 1994-09-10&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;a&gt;阿甘正传&lt;/a&gt;
        &lt;p&gt;上映日期: 1994-07-06&lt;/p&gt;
    &lt;/li&gt;
&lt;/ul&gt;&#96;</span></span><span class="token punctuation">;</span>

<span class="token comment">//声明正则</span>
<span class="token keyword">const</span> reg <span class="token operator">&#61;</span> <span class="token operator">/</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token operator">&lt;</span>a<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>\<span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>\<span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token operator">/</span>sg<span class="token punctuation">;</span>

<span class="token comment">//调用方法</span>
<span class="token keyword">const</span> result <span class="token operator">&#61;</span> str<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> result<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/5199a48c2443e833cd365014e924ad35.png" alt="image-20201026140033825" /></p> 
<h3><a id="764_8506"></a>7.6.4、可选链操作符</h3> 
<p>当我们要使用传进来的一个属性值的时候&#xff0c;我们不知道这个属性值到底有没有传&#xff0c;我们可以使用&amp;&amp;运算符一级一级判断&#xff0c;就像这样 <code>const dbHost &#61; config &amp;&amp; config.db &amp;&amp; config.db.host;</code>但是这样会显得很麻烦&#xff0c;所以在ES11 中就提供了可选链操作符&#xff0c;它就简化了代码&#xff0c;变成了这样 <code>const dbHost &#61; config?.db?.host;</code> 另一方面&#xff0c;即使用户没有传入这个属性&#xff0c;我们用了也不会报错&#xff0c;而是undefined</p> 
<pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    <span class="token comment">// const dbHost &#61; config &amp;&amp; config.db &amp;&amp; config.db.host;</span>
    <span class="token keyword">const</span> dbHost <span class="token operator">&#61;</span> config<span class="token operator">?</span><span class="token punctuation">.</span>db<span class="token operator">?</span><span class="token punctuation">.</span>host<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dbHost<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>
    db<span class="token punctuation">:</span> <span class="token punctuation">{<!-- --></span>
        host<span class="token punctuation">:</span> <span class="token string">&#34;192.168.1.100&#34;</span><span class="token punctuation">,</span>
        username<span class="token punctuation">:</span> <span class="token string">&#34;root&#34;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    cache<span class="token punctuation">:</span> <span class="token punctuation">{<!-- --></span>
        host<span class="token punctuation">:</span> <span class="token string">&#34;192.168.1.200&#34;</span><span class="token punctuation">,</span>
        username<span class="token punctuation">:</span> <span class="token string">&#34;admin&#34;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/92b345725e29e51a2c37ff625fa28f9d.png" alt="image-20201026140226072" /></p> 
<h3><a id="765_import_8531"></a>7.6.5、动态 import</h3> 
<p>以前我们import 导入模块是在一开始的时候就全部导入了&#xff0c;这样在模块很多的时候&#xff0c;会显得网页速度加载很慢&#xff0c;在ES11中就提供了一种动态import&#xff0c;案例演示如下&#xff1a;</p> 
<p>m1.js</p> 
<pre><code class="prism language-javascript"><span class="token comment">//分别暴露</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> school <span class="token operator">&#61;</span> <span class="token string">&#34;华北理工大学&#34;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#34;我们要学习&#xff01;&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<p>index.html</p> 
<pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>UTF-8<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>btn<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span>点击我&#xff0c;加载m1.js模块<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在这里写JavaScript代码&#xff0c;因为JavaScript是由上到下执行的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">&#61;</span><span class="token punctuation">&#34;</span>module<span class="token punctuation">&#34;</span></span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript">
    <span class="token keyword">const</span> btn <span class="token operator">&#61;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#34;btn&#34;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">&#61;</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#34;./m1.js&#34;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>module <span class="token operator">&#61;&gt;</span> <span class="token punctuation">{<!-- --></span>
            module<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/2bfdf2b04d7ff6f4c4925da431a9d6e7.png" alt="image-20201026141550755" /></p> 
<h3><a id="766BigInt_8575"></a>7.6.6、BigInt类型</h3> 
<p><code>BigInt</code>数据类型的目的是比<code>Number</code>数据类型支持的范围更大的整数值。在对大整数执行数学运算时&#xff0c;以任意精度表示整数的能力尤为重要。使用<code>BigInt</code>&#xff0c;整数溢出将不再是问题。</p> 
<p>此外&#xff0c;可以安全地使用更加准确时间戳&#xff0c;大整数ID等&#xff0c;而无需使用变通方法。 它就是JS 第二个数字数据类型&#xff0c;也将是 JS 第8种基本数据类型&#xff1a;</p> 
<ul><li>Boolean</li><li>Null</li><li>Undefined</li><li>Number</li><li>BigInt</li><li>String</li><li>Symbol</li><li>Object</li></ul> 
<p>对于学过其它语言的程序员来说&#xff0c;JS中缺少显式整数类型常常令人困惑。许多编程语言支持多种数字类型&#xff0c;如浮点型、双精度型、整数型和双精度型&#xff0c;但JS却不是这样。在JS中&#xff0c;按照<a href="https://en.wikipedia.org/wiki/IEEE_754-2008_revision">IEEE 754-2008</a>标准的定义&#xff0c;所有数字都以<a href="http://en.wikipedia.org/wiki/Double_precision_floating-point_format">双精度64位浮点</a>格式表示。</p> 
<p>在此标准下&#xff0c;无法精确表示的非常大的整数将自动四舍五入。确切地说&#xff0c;JS 中的<code>Number</code>类型只能安全地表示<code>-9007199254740991 (-(2^53-1))</code> 和<code>9007199254740991(2^53-1)</code>之间的整数&#xff0c;任何超出此范围的整数值都可能失去精度。</p> 
<p>如何定义BigInt&#xff1f;需要在数字的后边加上一个n&#xff0c;例如;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">let</span> n <span class="token operator">&#61;</span> <span class="token number">521</span>n<span class="token punctuation">;</span>
</code></pre> 
<p>我们接下来演示一下&#xff0c;大整数运算的效果&#xff1a;</p> 
<pre><code class="prism language-javascript"><span class="token keyword">let</span> max <span class="token operator">&#61;</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max <span class="token operator">&#43;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max <span class="token operator">&#43;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span> <span class="token operator">&#43;</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span> <span class="token operator">&#43;</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/997f27dc33c66fb1178d15765c64a444.png" alt="image-20201026142137794" /></p> 
<h3><a id="767globalThis_8616"></a>7.6.7、globalThis</h3> 
<p>全局属性 <code>globalThis</code> 包含全局的 <code>this</code> 值&#xff0c;类似于全局对象&#xff08;global object&#xff09;。</p> 
<pre><code class="prism language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalThis<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/afe48707d926a32b609090a13f0afe13.png" alt="image-20201026142439716" /></p> 
<h1><a id="_JavaScript_8626"></a>第八章 JavaScript项目百练</h1> 
<h2><a id="81_8628"></a>8.1、项目百练介绍</h2> 
<p>这一章一共提供了100道练习&#xff0c;源码请在配套资料中获取&#xff0c;这些练习均是作者早期的练习、兼容性代码、CSS特效、精品收藏等等&#xff0c;仅供参考&#xff0c;有精力朋友的可以看看&#xff0c;可能有些写法不是很标准或者您有更好的方案&#xff0c;可以直接在评论区留言&#xff0c;大家一起学习&#xff01;</p> 
<h2><a id="82_8632"></a>8.2、项目百练目录</h2> 
<ul><li>Sample0001-美女相册.zip</li><li>Sample0002-兼容性代码.zip</li><li>Sample0003-精美选项卡.zip</li><li>Sample0004-百度首页换肤功能.zip</li><li>Sample0005-带复选框表格.zip</li><li>Sample0006-兼容性代码.zip</li><li>Sample0007-兼容性代码.zip</li><li>Sample0008-获取节点或者元素.zip</li><li>Sample0009-验证密码强度.zip</li><li>Sample0010-百度首页搜索项目.zip</li><li>Sample0011-模拟星空.zip</li><li>Sample0012-美女时钟.zip</li><li>Sample0013-定时阅读协议.zip</li><li>Sample0014-动态创建表格.zip</li><li>Sample0015-滑动式轮播图.zip</li><li>Sample0016-小汽车动画.zip</li><li>Sample0017-渐入式轮播图.zip</li><li>Sample0018-捉迷藏动画.zip</li><li>Sample0019-吸附式导航栏.zip</li><li>Sample0020-滑动式导航栏.zip</li><li>Sample0021-旋转式轮播图.zip</li><li>Sample0022-手风琴案例展示.zip</li><li>Sample0023-开机小助手动画.zip</li><li>Sample0024-筋斗云案例.zip</li><li>Sample0025-美丽的天使.zip</li><li>Sample0026-可拖拽对话框.zip</li><li>Sample0027-放大镜效果.zip</li><li>Sample0028-自定义滚动条.zip</li><li>Sample0029-贪吃蛇.zip</li><li>Sample0030-扁平化二级菜单.zip</li><li>Sample0031-选戏子.zip</li><li>Sample0032-手风琴选项卡.zip</li><li>Sample0033-淘宝精品展示.zip</li><li>Sample0034-选项卡公告栏.zip</li><li>Sample0035-精美购物车插件.zip</li><li>Sample0036-呼吸灯轮播图.zip</li><li>Sample0037-仿小米手风琴展示.zip</li><li>Sample0038-音乐导航栏.zip</li><li>Sample0039-城市选择框.zip</li><li>Sample0040-文字弹幕效果.zip</li><li>Sample0041-钢琴案例.zip</li><li>Sample0042-小火箭返航案例.zip</li><li>Sample0043-五角星评分案例.zip</li><li>Sample0044-懒加载图片案例.zip</li><li>Sample0045-仿淘宝首页轮播图.zip</li><li>Sample0046-仿京东首页轮播图.zip</li><li>Sample0047-仿360安全换机.zip</li><li>Sample0048-拖拽旋转相册.zip</li><li>Sample0049-仿百度经验时光轴.zip</li><li>Sample0050-照片墙案例.zip</li><li>Sample0051-瀑布流加载案例.zip</li><li>Sample0052-旋转翻页案例.zip</li><li>Sample0053-立体图片翻转特效.zip</li><li>Sample0054-鼠标不同方位移入特效.zip</li><li>Sample0055-省市县三级联动.zip</li><li>Sample0056-抽屉式手风琴.zip</li><li>Sample0057-仿厅客世界.zip</li><li>Sample0058-兼容性开发模板.zip</li><li>Sample0059-仿腾讯新闻多图序列展示.zip</li><li>Sample0060-3D分块旋转轮播图.zip</li><li>Sample0061-仿优酷TV轮播图.zip</li><li>Sample0062-仿商品参数选购.zip</li><li>Sample0063-仿w3school首页.zip</li><li>Sample0064-仿家有易购电商首页.zip</li><li>Sample0065-网页新功能提示案例.zip</li><li>Sample0066-鼠标点击展开详情.zip</li><li>Sample0067-组件排序案例.zip</li><li>Sample0068-仿职位发布案例.zip</li><li>Sample0069-仿迅雷首页.zip</li><li>Sample0070-后台侧栏导航.zip</li><li>Sample0071-弹性广告栏.zip</li><li>Sample0072-照片墙案例.zip</li><li>Sample0073-仿京东商品图片展示.zip</li><li>Sample0074-仿AppIntro首页.zip</li><li>Sample0075-Material Design Icons.zip</li><li>Sample0076-英语之家.zip</li><li>Sample0077-鲜来鲜往.zip</li><li>Sample0078-麦子学院.zip</li><li>Sample0079-Material Design Color.zip</li><li>Sample0080-Java关键字.zip</li><li>Sample0081-浏览历史静态页面案例.zip</li><li>Sample0082-小灯泡开关案例.zip</li><li>Sample0083-百度折叠案例.zip</li><li>Sample0084-计算器.zip</li><li>Sample0085-计算器.zip</li><li>Sample0086-judge_online_system.zip</li><li>Sample0087-选项卡01.zip</li><li>Sample0088-选项卡02.zip</li><li>Sample0089-焦点轮播图.zip</li><li>Sample0090-抽奖活动.zip</li><li>Sample0091-抽屉式信息栏.zip</li><li>Sample0092-无缝轮播图.zip</li><li>Sample0093-Attendance.zip</li><li>Sample0094-统计数字.zip</li><li>Sample0095-反转字符串.zip</li><li>Sample0096-表单验证.zip</li><li>Sample0097-显示时间.zip</li><li>Sample0098-扁平化选项卡.zip</li><li>Sample0099-吃热狗小游戏.zip</li><li>Sample0100-爱阅读APP.zip</li></ul>
                </div>
                <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-98b95bb57c.css" rel="stylesheet">
                <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-c216769e99.css" rel="stylesheet">
        </div>
        <div id="treeSkill"></div>
    </article>
<script>
  $(function() {
    setTimeout(function () {
      var mathcodeList = document.querySelectorAll('.htmledit_views img.mathcode');
      if (mathcodeList.length > 0) {
        for (let i = 0; i < mathcodeList.length; i++) {
          if (mathcodeList[i].naturalWidth === 0 || mathcodeList[i].naturalHeight === 0) {
            var alt = mathcodeList[i].alt;
            alt = '\\(' + alt + '\\)';
            var curSpan = $('<span class="img-codecogs"></span>');
            curSpan.text(alt);
            $(mathcodeList[i]).before(curSpan);
            $(mathcodeList[i]).remove();
          }
        }
        MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
      }
    }, 1000)
  });
</script>
</div>
    <div class="more-toolbox-new" id="toolBarBox">
      <div class="left-toolbox">
        <div class="toolbox-left">
            <div class="profile-box">
              <a class="profile-href" target="_blank" href="https://caochenlei.blog.csdn.net"><img class="profile-img" src="https://profile-avatar.csdnimg.cn/adae5c191130470aa9c45b27974eb51a_qq_38490457.jpg!1">
                <span class="profile-name">
                  轻松的小希
                </span>
              </a>
            </div>
            <div class="profile-attend">
                <a class="tool-attend tool-bt-button tool-unbt-attend" href="javascript:;" data-report-view='{"mod":"1592215036_002","spm":"1001.2101.3001.4232","extend1":"已关注"}'>已关注</a>
              <a class="tool-item-follow active-animation" style="display:none;">关注</a>
            </div>
        </div>
        <div class="toolbox-middle">
          <ul class="toolbox-list">
            <li class="tool-item tool-item-size tool-active is-like" id="is-like">
              <a class="tool-item-href">
                <img style="display:none;" id="is-like-imgactive-animation-like" class="animation-dom active-animation" src="https://csdnimg.cn/release/blogv2/dist/pc/img/tobarThumbUpactive.png" alt="">
                <img class="isactive" style="display:none" id="is-like-imgactive" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newHeart2021Active.png" alt="">
                <img class="isdefault" style="display:block" id="is-like-img" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newHeart2021Black.png" alt="">
                <span id="spanCount" class="count ">
                    6991
                </span>
              </a>
              <div class="tool-hover-tip"><span class="text space">点赞</span></div>
            </li>
            <li class="tool-item tool-item-size tool-active is-unlike" id="is-unlike">
              <a class="tool-item-href">
                <img class="isactive" style="margin-right:0px;display:none" id="is-unlike-imgactive" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newUnHeart2021Active.png" alt="">
                <img class="isdefault" style="margin-right:0px;display:block" id="is-unlike-img" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newUnHeart2021Black.png" alt="">
                <span id="unlikeCount" class="count "></span>
              </a>
              <div class="tool-hover-tip"><span class="text space">踩</span></div>
            </li>
            <li class="tool-item tool-item-size tool-active is-collection ">
              <a class="tool-item-href" href="javascript:;" data-report-click='{"mod":"popu_824","spm":"1001.2101.3001.4130","ab":"new"}'>
                <img style="display:none" id="is-collection-img-collection" class="animation-dom active-animation" src="https://csdnimg.cn/release/blogv2/dist/pc/img/tobarCollectionActive.png" alt="">
                <img class="isdefault" id="is-collection-img" style="display:none" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCollectBlack.png" alt="">
                <img class="isactive" id="is-collection-imgactive" style="display:block" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCollectActive.png" alt="">
                <span class="count get-collection active" id="get-collection">
                    37349
                </span>
              </a>
              <div class="tool-hover-tip collect">
                <div class="collect-operate-box">
                  <span class="collect-text" id="is-collection">
                    收藏
                  </span>
                </div>
              </div>
              <div class="tool-active-list">
                <div class="text">
                  觉得还不错?
                  <span class="collect-text" id="tool-active-list-collection">
                    一键收藏
                  </span>
                 <img id="tool-active-list-close" src="https://csdnimg.cn/release/blogv2/dist/pc/img/collectionCloseWhite.png" alt="">
                </div>
              </div>
            </li>
                <li class="tool-item tool-item-size tool-active tool-item-reward">
                  <a class="tool-item-href" href="javascript:;" data-report-click='{"mod":"popu_830","spm":"1001.2101.3001.4237","dest":"","ab":"new"}'>
                    <img class="isdefault reward-bt" id="rewardBtNew" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newRewardBlack.png" alt="打赏">
                    <span class="count"></span>
                  </a>
                  <div class="tool-hover-tip"><span class="text space">打赏</span></div>
                </li>
          <li class="tool-item tool-item-size tool-active tool-item-comment">
            <div class="guide-rr-first">
              <img src="https://csdnimg.cn/release/blogv2/dist/pc/img/guideRedReward01.png" alt="">
              <button class="btn-guide-known">知道了</button>
            </div>
              <a class="tool-item-href go-side-comment" data-report-click='{"spm":"1001.2101.3001.7009"}'>
              <img class="isdefault" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newComment2021Black.png" alt="">
              <span class="count">
                  983
              </span>
            </a>
            <div class="tool-hover-tip"><span class="text space">评论</span></div>
          </li>
          <li class="tool-item tool-item-bar">
          </li>
          <li class="tool-item tool-item-size tool-active tool-QRcode" data-type="article" id="tool-share">
            <a class="tool-item-href" href="javascript:;" data-report-click='{"mod":"1582594662_002","spm":"1001.2101.3001.4129","ab":"new"}'>
              <img class="isdefault" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newShareBlack.png" alt="">
            </a>
              <div class="QRcode" id="tool-QRcode">
            <div class="share-bg-icon icon1" id="shareBgIcon"></div>
              <div class="share-bg-box">
                <div class="share-content">
                    <img class="share-avatar" src="https://profile-avatar.csdnimg.cn/adae5c191130470aa9c45b27974eb51a_qq_38490457.jpg!1" alt="">
                  <div class="share-tit">
                    学习JavaScript这一篇就够了
                  </div>
                  <div class="share-dec">
                    目录第一章 JavaScript简介1.1、JavaScript的起源1.2、JavaScript的组成1.3、JavaScript的特点1.4、JavaScript的使用1.4.1、标签引用1.4.2、文件引用1.5、JavaScript的输出1.5.1、页面输出1.5.2、控制台输出1.5.3、弹出窗口输出1.6、JavaScript的注释1.6.1、单行注释1.6.2、多行注释第二章 JavaScript基础语法2.1、标识符2.2、字面量和变量2.2.1、字面量2.2.2、变量2.3、数据类型2.3
                  </div>
                  <a id="copyPosterUrl" class="url" data-report-click='{"spm":"1001.2101.3001.7493"}' data-report-view='{"spm":"1001.2101.3001.7493"}'>复制链接</a>
                </div>
                <div class="share-code">
                  <div class="share-code-box" id='shareCode'></div>
                  <div class="share-code-text">扫一扫</div>
                </div>
              </div>
                <div class="share-code-type">
                </div>
            </div>
          </li>
        </ul>
      </div>
      <div class="toolbox-right">
            <div class="tool-directory">
                <a class="bt-columnlist-show"
                  data-id="10401704"
                  data-free="true"
                  data-subscribe="false"
                  data-title="Web"
                  data-img="https://img-blog.csdnimg.cn/20201115093906928.png?x-oss-process=image/resize,m_fixed,h_224,w_224"
                  data-url="https://blog.csdn.net/qq_38490457/category_10401704.html"
                  data-sum="9"
                  data-people="1407"
                  data-price="0"
                  data-oldprice="0"
                  data-join="false"
                  data-studyvip="false"
                  data-studysubscribe="false"
                  data-report-view='{"spm":"1001.2101.3001.6334","extend1":"专栏目录"}'
                  data-report-click='{"spm":"1001.2101.3001.6334","extend1":"专栏目录"}'>专栏目录</a>
          </div>
</div>
</div>
</div>
<script type=text/javascript crossorigin src="https://csdnimg.cn/release/phoenix/production/qrcode-7c90a92189.min.js"></script>
<script src="//g.csdnimg.cn/??sharewx/1.2.1/sharewx.js" type="text/javascript"></script>
<script type="text/javascript" crossorigin src="https://g.csdnimg.cn/common/csdn-login-box/csdn-login-box.js"></script>
<script type="text/javascript" crossorigin src="https://g.csdnimg.cn/collection-box/2.1.1/collection-box.js"></script>                <div class="first-recommend-box recommend-box ">
<div class="recommend-item-box type_download clearfix" data-url="https://download.csdn.net/download/weixin_42128393/15439845"  data-report-view='{"ab":"new","spm":"1001.2101.3001.6661.1","mod":"popu_871","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant_t0.none-task-download-2~default~CTRLIST~Paid-1-15439845-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"1","strategy":"2~default~CTRLIST~Paid","dest":"https://download.csdn.net/download/weixin_42128393/15439845"}'>
	<div class="content-box">
		<div class="content-blog display-flex">
			<div class="title-box">
				<a href="https://download.csdn.net/download/weixin_42128393/15439845" class="tit" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6661.1","mod":"popu_871","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant_t0.none-task-download-2~default~CTRLIST~Paid-1-15439845-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"1","strategy":"2~default~CTRLIST~Paid","dest":"https://download.csdn.net/download/weixin_42128393/15439845"}'  data-report-query='spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-download-2%7Edefault%7ECTRLIST%7EPaid-1-15439845-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant_t0.none-task-download-2%7Edefault%7ECTRLIST%7EPaid-1-15439845-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
					<div class="left ellipsis-online ellipsis-online-1"><em>JavaScript</em>基础</div>
				</a>
			</div>
			<div class="info-box display-flex">
				<div class="info display-flex">
					<span class="info-block">02-24</span>
				</div>
			</div>
		</div>
		<div class="desc-box">
			<a href="https://download.csdn.net/download/weixin_42128393/15439845" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6661.1","mod":"popu_871","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant_t0.none-task-download-2~default~CTRLIST~Paid-1-15439845-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"1","strategy":"2~default~CTRLIST~Paid","dest":"https://download.csdn.net/download/weixin_42128393/15439845"}'  data-report-query='spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-download-2%7Edefault%7ECTRLIST%7EPaid-1-15439845-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant_t0.none-task-download-2%7Edefault%7ECTRLIST%7EPaid-1-15439845-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
				<div class="desc ellipsis-online ellipsis-online-1"><em>JavaScript</em>基础
模块挑战是学生独立完成的下午项目或作业。 这是在先前由讲师完成的指导项目的基础上扩展的。
高级CSS和<em>JavaScript</em>
<em>JavaScript</em>基础
目标
使用let，const，var并演示它们之间的差异。
 了解并能够使用不同的运算符。
 写一个基本的for循环/ while循环。
 使用if / else语句编写控制流。
 使用函数声明，表达式和箭头函数并描述它们之间的差异
介绍
今天，您将构建一个在控制台中运行的抵押贷款利率计算器。 如您今天所了解，<em>JavaScript</em>非常适合为网页添加功能和交互性。 在今天的练习中，我们不会使用网页的可视部分，但是您在此处所做的工作可以与<em>HTML</em>和CSS结合使用，以创建功能全面的单页应用程序。
 每月抵押贷款的计算公式如下：
 或者，以纯文本格式：
 M = P [ I ( 1 + I )^N ] / [ ( 1 + I</div>
			</a>
		</div>
	</div>
</div>
                </div>
              <script src="https://csdnimg.cn/release/blogv2/dist/components/js/pc_wap_commontools-ad67eb7a7a.min.js" type="text/javascript" async></script>
                <div class="second-recommend-box recommend-box ">
<div class="recommend-item-box type_download clearfix" data-url="https://download.csdn.net/download/weixin_49219273/12601468"  data-report-view='{"ab":"new","spm":"1001.2101.3001.6650.1","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~AntiPaid-1-12601468-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"1","strategy":"2~default~CTRLIST~AntiPaid","dest":"https://download.csdn.net/download/weixin_49219273/12601468"}'>
	<div class="content-box">
		<div class="content-blog display-flex">
			<div class="title-box">
				<a href="https://download.csdn.net/download/weixin_49219273/12601468" class="tit" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.1","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~AntiPaid-1-12601468-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"1","strategy":"2~default~CTRLIST~AntiPaid","dest":"https://download.csdn.net/download/weixin_49219273/12601468"}'  data-report-query='spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-1-12601468-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-1-12601468-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
					<div class="left ellipsis-online ellipsis-online-1"><em>JavaScript</em>基础语法</div>
				</a>
			</div>
			<div class="info-box display-flex">
				<div class="info display-flex">
					<span class="info-block">07-11</span>
				</div>
			</div>
		</div>
		<div class="desc-box">
			<a href="https://download.csdn.net/download/weixin_49219273/12601468" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.1","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~AntiPaid-1-12601468-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"1","strategy":"2~default~CTRLIST~AntiPaid","dest":"https://download.csdn.net/download/weixin_49219273/12601468"}'  data-report-query='spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-1-12601468-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-1-12601468-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
				<div class="desc ellipsis-online ellipsis-online-1">熟悉js在<em>html</em>文件中的书写位置，认识变量是什么及命名规则规范，了解基本数据类型及其判断与转换，认识一些运算符</div>
			</a>
		</div>
	</div>
</div>
                </div>
<a id="commentBox" name="commentBox"></a>
<div id="pcCommentBox" class="comment-box comment-box-new2 login-comment-box-new" style="display:none">
    <div class="has-comment" style="display:block">
      <div class="one-line-box">
        <div class="has-comment-tit go-side-comment">
          <span class="count">983</span>&nbsp;条评论
        </div>
        <div class="has-comment-con comment-operate-item"></div>
        <a class="has-comment-bt-right go-side-comment focus">写评论</a>
      </div>
    </div>
</div>              <div class="recommend-box insert-baidu-box recommend-box-style ">
                <div class="recommend-item-box no-index" style="display:none"></div>
<div class="recommend-item-box type_download clearfix" data-url="https://download.csdn.net/download/qq_45309319/81014971"  data-report-view='{"ab":"new","spm":"1001.2101.3001.6650.2","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~AntiPaid-2-81014971-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"2","strategy":"2~default~CTRLIST~AntiPaid","dest":"https://download.csdn.net/download/qq_45309319/81014971"}'>
	<div class="content-box">
		<div class="content-blog display-flex">
			<div class="title-box">
				<a href="https://download.csdn.net/download/qq_45309319/81014971" class="tit" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.2","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~AntiPaid-2-81014971-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"2","strategy":"2~default~CTRLIST~AntiPaid","dest":"https://download.csdn.net/download/qq_45309319/81014971"}'  data-report-query='spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-2-81014971-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-2-81014971-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
					<div class="left ellipsis-online ellipsis-online-1"><em>JavaScript</em> 基础 </div>
				</a>
			</div>
			<div class="info-box display-flex">
				<div class="info display-flex">
					<span class="info-block">02-16</span>
				</div>
			</div>
		</div>
		<div class="desc-box">
			<a href="https://download.csdn.net/download/qq_45309319/81014971" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.2","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~AntiPaid-2-81014971-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"2","strategy":"2~default~CTRLIST~AntiPaid","dest":"https://download.csdn.net/download/qq_45309319/81014971"}'  data-report-query='spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-2-81014971-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-2-81014971-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
				<div class="desc ellipsis-online ellipsis-online-1">主要为个人<em>学习</em>笔记 超详细</div>
			</a>
		</div>
	</div>
</div>
<div class="recommend-item-box type_blog clearfix" data-url="https://blog.csdn.net/qq_42560575/article/details/130168670"  data-report-view='{"ab":"new","spm":"1001.2101.3001.6650.3","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-3-130168670-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"3","strategy":"2~default~YuanLiJiHua~Position","dest":"https://blog.csdn.net/qq_42560575/article/details/130168670"}'>
	<div class="content-box">
		<div class="content-blog display-flex">
			<div class="title-box">
				<a href="https://blog.csdn.net/qq_42560575/article/details/130168670" class="tit" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.3","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-3-130168670-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"3","strategy":"2~default~YuanLiJiHua~Position","dest":"https://blog.csdn.net/qq_42560575/article/details/130168670"}'  data-report-query='spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-3-130168670-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-3-130168670-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
					<div class="left ellipsis-online ellipsis-online-1"><em>JavaScript</em>入门<em>学习</em>指南</div>
				</a>
			</div>
			<div class="info-box display-flex">
				<div class="info">
					<a href="https://blog.csdn.net/qq_42560575" target="_blank"><span class="blog-title">qq_42560575的博客</span></a>
				</div>
				<div class="info display-flex">
					<span class="info-block time">04-15</span>
					<span class="info-block read"><img class="read-img" src="https://csdnimg.cn/release/blogv2/dist/pc/img/readCountWhite.png" alt="">
					108
					</span>
				</div>
			</div>
		</div>
		<div class="desc-box">
			<a href="https://blog.csdn.net/qq_42560575/article/details/130168670" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.3","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-3-130168670-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"3","strategy":"2~default~YuanLiJiHua~Position","dest":"https://blog.csdn.net/qq_42560575/article/details/130168670"}'  data-report-query='spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-3-130168670-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-3-130168670-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
				<div class="desc ellipsis-online ellipsis-online-1">适合初学者入门自学</div>
			</a>
		</div>
	</div>
</div>
		<dl id="recommend-item-box-tow" class="recommend-item-box type_blog clearfix">
			
		</dl>
<div class="recommend-item-box type_download clearfix" data-url="https://download.csdn.net/download/qq_58402198/87683397"  data-report-view='{"ab":"new","spm":"1001.2101.3001.6650.4","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~AntiPaid-4-87683397-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"4","strategy":"2~default~CTRLIST~AntiPaid","dest":"https://download.csdn.net/download/qq_58402198/87683397"}'>
	<div class="content-box">
		<div class="content-blog display-flex">
			<div class="title-box">
				<a href="https://download.csdn.net/download/qq_58402198/87683397" class="tit" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.4","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~AntiPaid-4-87683397-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"4","strategy":"2~default~CTRLIST~AntiPaid","dest":"https://download.csdn.net/download/qq_58402198/87683397"}'  data-report-query='spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-4-87683397-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-4-87683397-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
					<div class="left ellipsis-online ellipsis-online-1"><em>JavaScript</em>基础语法笔记</div>
				</a>
			</div>
			<div class="info-box display-flex">
				<div class="info display-flex">
					<span class="info-block">04-12</span>
				</div>
			</div>
		</div>
		<div class="desc-box">
			<a href="https://download.csdn.net/download/qq_58402198/87683397" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.4","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~AntiPaid-4-87683397-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"4","strategy":"2~default~CTRLIST~AntiPaid","dest":"https://download.csdn.net/download/qq_58402198/87683397"}'  data-report-query='spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-4-87683397-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-4-87683397-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
				<div class="desc ellipsis-online ellipsis-online-1"><em>JavaScript</em>基础语法笔记(for、对象、js基础语法截图等...)</div>
			</a>
		</div>
	</div>
</div>
<div class="recommend-item-box type_download clearfix" data-url="https://download.csdn.net/download/kfie66/10593454"  data-report-view='{"ab":"new","spm":"1001.2101.3001.6650.5","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~AntiPaid-5-10593454-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"5","strategy":"2~default~CTRLIST~AntiPaid","dest":"https://download.csdn.net/download/kfie66/10593454"}'>
	<div class="content-box">
		<div class="content-blog display-flex">
			<div class="title-box">
				<a href="https://download.csdn.net/download/kfie66/10593454" class="tit" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.5","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~AntiPaid-5-10593454-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"5","strategy":"2~default~CTRLIST~AntiPaid","dest":"https://download.csdn.net/download/kfie66/10593454"}'  data-report-query='spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-5-10593454-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-5-10593454-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
					<div class="left ellipsis-online ellipsis-online-1"><em>javascript</em>基础</div>
				</a>
			</div>
			<div class="info-box display-flex">
				<div class="info display-flex">
					<span class="info-block">08-09</span>
				</div>
			</div>
		</div>
		<div class="desc-box">
			<a href="https://download.csdn.net/download/kfie66/10593454" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.5","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~AntiPaid-5-10593454-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"5","strategy":"2~default~CTRLIST~AntiPaid","dest":"https://download.csdn.net/download/kfie66/10593454"}'  data-report-query='spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-5-10593454-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-5-10593454-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
				<div class="desc ellipsis-online ellipsis-online-1"><em>javascript</em>基础，适合零基础或初学者简单简洁 ，易于理解</div>
			</a>
		</div>
	</div>
</div>
<div class="recommend-item-box type_download clearfix" data-url="https://download.csdn.net/download/weixin_42125192/15478113"  data-report-view='{"ab":"new","spm":"1001.2101.3001.6650.6","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~AntiPaid-6-15478113-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"6","strategy":"2~default~CTRLIST~AntiPaid","dest":"https://download.csdn.net/download/weixin_42125192/15478113"}'>
	<div class="content-box">
		<div class="content-blog display-flex">
			<div class="title-box">
				<a href="https://download.csdn.net/download/weixin_42125192/15478113" class="tit" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.6","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~AntiPaid-6-15478113-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"6","strategy":"2~default~CTRLIST~AntiPaid","dest":"https://download.csdn.net/download/weixin_42125192/15478113"}'  data-report-query='spm=1001.2101.3001.6650.6&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-6-15478113-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-6-15478113-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
					<div class="left ellipsis-online ellipsis-online-1"><em>Javascript</em>基础</div>
				</a>
			</div>
			<div class="info-box display-flex">
				<div class="info display-flex">
					<span class="info-block">02-26</span>
				</div>
			</div>
		</div>
		<div class="desc-box">
			<a href="https://download.csdn.net/download/weixin_42125192/15478113" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.6","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~AntiPaid-6-15478113-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"6","strategy":"2~default~CTRLIST~AntiPaid","dest":"https://download.csdn.net/download/weixin_42125192/15478113"}'  data-report-query='spm=1001.2101.3001.6650.6&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-6-15478113-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-6-15478113-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
				<div class="desc ellipsis-online ellipsis-online-1"><em>Javascript</em>基础</div>
			</a>
		</div>
	</div>
</div>
<div class="recommend-item-box type_blog clearfix" data-url="https://blog.csdn.net/yuelai_217/article/details/128004489"  data-report-view='{"ab":"new","spm":"1001.2101.3001.6650.7","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-128004489-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"7","strategy":"2~default~BlogCommendFromBaidu~Rate","dest":"https://blog.csdn.net/yuelai_217/article/details/128004489"}'>
	<div class="content-box">
		<div class="content-blog display-flex">
			<div class="title-box">
				<a href="https://blog.csdn.net/yuelai_217/article/details/128004489" class="tit" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.7","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-128004489-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"7","strategy":"2~default~BlogCommendFromBaidu~Rate","dest":"https://blog.csdn.net/yuelai_217/article/details/128004489"}'  data-report-query='spm=1001.2101.3001.6650.7&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-7-128004489-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-7-128004489-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
					<div class="left ellipsis-online ellipsis-online-1"><em>Javascript</em> 基础知识<em>学习</em></div>
				</a>
			</div>
			<div class="info-box display-flex">
				<div class="info">
					<a href="https://blog.csdn.net/yuelai_217" target="_blank"><span class="blog-title">yuelai_217的博客</span></a>
				</div>
				<div class="info display-flex">
					<span class="info-block time">11-23</span>
					<span class="info-block read"><img class="read-img" src="https://csdnimg.cn/release/blogv2/dist/pc/img/readCountWhite.png" alt="">
					1889
					</span>
				</div>
			</div>
		</div>
		<div class="desc-box">
			<a href="https://blog.csdn.net/yuelai_217/article/details/128004489" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.7","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7-128004489-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"7","strategy":"2~default~BlogCommendFromBaidu~Rate","dest":"https://blog.csdn.net/yuelai_217/article/details/128004489"}'  data-report-query='spm=1001.2101.3001.6650.7&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-7-128004489-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-7-128004489-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
				<div class="desc ellipsis-online ellipsis-online-1"><em>javascript</em> 基础<em>学习</em></div>
			</a>
		</div>
	</div>
</div>
<div class="recommend-item-box type_blog clearfix" data-url="https://blog.csdn.net/weixin_70506521/article/details/128573007"  data-report-view='{"ab":"new","spm":"1001.2101.3001.6650.8","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8-128573007-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"8","strategy":"2~default~BlogCommendFromBaidu~Rate","dest":"https://blog.csdn.net/weixin_70506521/article/details/128573007"}'>
	<div class="content-box">
		<div class="content-blog display-flex">
			<div class="title-box">
				<a href="https://blog.csdn.net/weixin_70506521/article/details/128573007" class="tit" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.8","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8-128573007-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"8","strategy":"2~default~BlogCommendFromBaidu~Rate","dest":"https://blog.csdn.net/weixin_70506521/article/details/128573007"}'  data-report-query='spm=1001.2101.3001.6650.8&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-8-128573007-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-8-128573007-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
					<div class="left ellipsis-online ellipsis-online-1">比较纯净的Windows系统版本下载网站</div>
				</a>
			</div>
			<div class="info-box display-flex">
				<div class="info">
					<a href="https://blog.csdn.net/weixin_70506521" target="_blank"><span class="blog-title">weixin_70506521的博客</span></a>
				</div>
				<div class="info display-flex">
					<span class="info-block time">01-06</span>
					<span class="info-block read"><img class="read-img" src="https://csdnimg.cn/release/blogv2/dist/pc/img/readCountWhite.png" alt="">
					4169
					</span>
				</div>
			</div>
		</div>
		<div class="desc-box">
			<a href="https://blog.csdn.net/weixin_70506521/article/details/128573007" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.8","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8-128573007-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"8","strategy":"2~default~BlogCommendFromBaidu~Rate","dest":"https://blog.csdn.net/weixin_70506521/article/details/128573007"}'  data-report-query='spm=1001.2101.3001.6650.8&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-8-128573007-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-8-128573007-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
				<div class="desc ellipsis-online ellipsis-online-1">比较纯净的Windows系统版本下载网站</div>
			</a>
		</div>
	</div>
</div>
<div class="recommend-item-box type_blog clearfix" data-url="https://blog.csdn.net/guorui_java/article/details/123263006"  data-report-view='{"ab":"new","spm":"1001.2101.3001.6650.9","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-9-123263006-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"9","strategy":"2~default~BlogCommendFromBaidu~Rate","dest":"https://blog.csdn.net/guorui_java/article/details/123263006"}'>
	<div class="content-box">
		<div class="content-blog display-flex">
			<div class="title-box">
				<a href="https://blog.csdn.net/guorui_java/article/details/123263006" class="tit" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.9","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-9-123263006-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"9","strategy":"2~default~BlogCommendFromBaidu~Rate","dest":"https://blog.csdn.net/guorui_java/article/details/123263006"}'  data-report-query='spm=1001.2101.3001.6650.9&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-9-123263006-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-9-123263006-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
					<div class="left ellipsis-online ellipsis-online-1"><em>JavaScript</em>看这<em>一篇</em><em>就够</em>了，简单全面一发入魂</div>
				</a>
			</div>
			<div class="info-box display-flex">
				<div class="info">
					<a href="https://blog.csdn.net/guorui_java" target="_blank"><span class="blog-title">学Java，找哪吒</span></a>
				</div>
				<div class="info display-flex">
					<span class="info-block time">03-09</span>
					<span class="info-block read"><img class="read-img" src="https://csdnimg.cn/release/blogv2/dist/pc/img/readCountWhite.png" alt="">
					2万+
					</span>
				</div>
			</div>
		</div>
		<div class="desc-box">
			<a href="https://blog.csdn.net/guorui_java/article/details/123263006" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.9","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-9-123263006-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"9","strategy":"2~default~BlogCommendFromBaidu~Rate","dest":"https://blog.csdn.net/guorui_java/article/details/123263006"}'  data-report-query='spm=1001.2101.3001.6650.9&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-9-123263006-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-9-123263006-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
				<div class="desc ellipsis-online ellipsis-online-1">文档对象模型（DOM,Document Object Model）是一个应用编程接口（API），用于在<em>HTML</em>中使用扩展的<em>HTML</em>。DOM将整个页面抽象为一组分层节点。
DOM通过创建表示文档的树，让开发者可以随心所欲的控制网页的内容和结构。使用DOM API可以轻松地删除、添加、替换、修改节点。
对浏览器而言，DOM就是使用ECMAScript实现的，如今已经成为<em>JavaScript</em>语言的一大组成部分。
言而言之，DOM提供与网页内容交互的方法和接口。</div>
			</a>
		</div>
	</div>
</div>
<div class="recommend-item-box type_blog clearfix" data-url="https://huaweicloud.csdn.net/63a5719ab878a54545947734.html"  data-report-view='{"ab":"new","spm":"1001.2101.3001.6650.10","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-10-127391660-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"10","strategy":"2~default~BlogCommendFromBaidu~activity","dest":"https://huaweicloud.csdn.net/63a5719ab878a54545947734.html"}'>
	<div class="content-box">
		<div class="content-blog display-flex">
			<div class="title-box">
				<a href="https://huaweicloud.csdn.net/63a5719ab878a54545947734.html" class="tit" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.10","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-10-127391660-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"10","strategy":"2~default~BlogCommendFromBaidu~activity","dest":"https://huaweicloud.csdn.net/63a5719ab878a54545947734.html"}'  data-report-query='spm=1001.2101.3001.6650.10&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-10-127391660-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-10-127391660-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
					<div class="left ellipsis-online ellipsis-online-1">分享几个纯净版Windows系统下载网站</div>
					<div class="tag">热门推荐</div>
				</a>
			</div>
			<div class="info-box display-flex">
				<div class="info">
					<a href="https://blog.csdn.net/m0_49605975" target="_blank"><span class="blog-title">天乐的博客</span></a>
				</div>
				<div class="info display-flex">
					<span class="info-block time">10-18</span>
					<span class="info-block read"><img class="read-img" src="https://csdnimg.cn/release/blogv2/dist/pc/img/readCountWhite.png" alt="">
					5万+
					</span>
				</div>
			</div>
		</div>
		<div class="desc-box">
			<a href="https://huaweicloud.csdn.net/63a5719ab878a54545947734.html" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.10","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-10-127391660-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"10","strategy":"2~default~BlogCommendFromBaidu~activity","dest":"https://huaweicloud.csdn.net/63a5719ab878a54545947734.html"}'  data-report-query='spm=1001.2101.3001.6650.10&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-10-127391660-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-10-127391660-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
				<div class="desc ellipsis-online ellipsis-online-1">如今Windows系统越来越好安装了，抛弃多年前的光盘，现在只需要一个装机工具就可以轻松搞定，完全不需要具备电脑装机知识，按照安装向导进行就可以了。不过，有些u盘装机工具，由于没有提供镜像文件，用户只能自己从网上找和下载，一路上磕磕绊绊，不少用户就中了捆绑网站的&ldquo;陷阱&rdquo;。1.msdn（收集了原版Windows镜像，均纯净无捆绑）一生中你唯一需要回头的时候,是为了看自己到底走了多远。这里我给大家分享几个我平时用的操作系统下载网站。3.极简系统（提供极简的os下载）</div>
			</a>
		</div>
	</div>
</div>
<div class="recommend-item-box type_blog clearfix" data-url="https://blog.csdn.net/wyx219219/article/details/121715969"  data-report-view='{"ab":"new","spm":"1001.2101.3001.6650.11","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-11-121715969-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"11","strategy":"2~default~BlogCommendFromBaidu~Rate","dest":"https://blog.csdn.net/wyx219219/article/details/121715969"}'>
	<div class="content-box">
		<div class="content-blog display-flex">
			<div class="title-box">
				<a href="https://blog.csdn.net/wyx219219/article/details/121715969" class="tit" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.11","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-11-121715969-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"11","strategy":"2~default~BlogCommendFromBaidu~Rate","dest":"https://blog.csdn.net/wyx219219/article/details/121715969"}'  data-report-query='spm=1001.2101.3001.6650.11&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-11-121715969-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-11-121715969-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
					<div class="left ellipsis-online ellipsis-online-1">好用的windwos office网站</div>
				</a>
			</div>
			<div class="info-box display-flex">
				<div class="info">
					<a href="https://blog.csdn.net/wyx219219" target="_blank"><span class="blog-title">wyx219219的博客</span></a>
				</div>
				<div class="info display-flex">
					<span class="info-block time">12-04</span>
					<span class="info-block read"><img class="read-img" src="https://csdnimg.cn/release/blogv2/dist/pc/img/readCountWhite.png" alt="">
					3318
					</span>
				</div>
			</div>
		</div>
		<div class="desc-box">
			<a href="https://blog.csdn.net/wyx219219/article/details/121715969" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.11","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-11-121715969-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"11","strategy":"2~default~BlogCommendFromBaidu~Rate","dest":"https://blog.csdn.net/wyx219219/article/details/121715969"}'  data-report-query='spm=1001.2101.3001.6650.11&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-11-121715969-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-11-121715969-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
				<div class="desc ellipsis-online ellipsis-online-1">Windows office wps专业版下载网页推荐</div>
			</a>
		</div>
	</div>
</div>
<div class="recommend-item-box type_download clearfix" data-url="https://download.csdn.net/download/lingfeng19900808/10248065"  data-report-view='{"ab":"new","spm":"1001.2101.3001.6650.12","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~AntiPaid-12-10248065-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"12","strategy":"2~default~CTRLIST~AntiPaid","dest":"https://download.csdn.net/download/lingfeng19900808/10248065"}'>
	<div class="content-box">
		<div class="content-blog display-flex">
			<div class="title-box">
				<a href="https://download.csdn.net/download/lingfeng19900808/10248065" class="tit" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.12","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~AntiPaid-12-10248065-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"12","strategy":"2~default~CTRLIST~AntiPaid","dest":"https://download.csdn.net/download/lingfeng19900808/10248065"}'  data-report-query='spm=1001.2101.3001.6650.12&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-12-10248065-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-12-10248065-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
					<div class="left ellipsis-online ellipsis-online-1"><em>javascript</em></div>
				</a>
			</div>
			<div class="info-box display-flex">
				<div class="info display-flex">
					<span class="info-block">02-10</span>
				</div>
			</div>
		</div>
		<div class="desc-box">
			<a href="https://download.csdn.net/download/lingfeng19900808/10248065" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.12","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~AntiPaid-12-10248065-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"12","strategy":"2~default~CTRLIST~AntiPaid","dest":"https://download.csdn.net/download/lingfeng19900808/10248065"}'  data-report-query='spm=1001.2101.3001.6650.12&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-12-10248065-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7EAntiPaid-12-10248065-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
				<div class="desc ellipsis-online ellipsis-online-1"><em>javascript</em>官方文档，web前端师的权威文档，web前端的</div>
			</a>
		</div>
	</div>
</div>
<div class="recommend-item-box type_download clearfix" data-url="https://download.csdn.net/download/weixin_42149153/15559668"  data-report-view='{"ab":"new","spm":"1001.2101.3001.6650.13","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~Rate-13-15559668-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"13","strategy":"2~default~CTRLIST~Rate","dest":"https://download.csdn.net/download/weixin_42149153/15559668"}'>
	<div class="content-box">
		<div class="content-blog display-flex">
			<div class="title-box">
				<a href="https://download.csdn.net/download/weixin_42149153/15559668" class="tit" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.13","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~Rate-13-15559668-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"13","strategy":"2~default~CTRLIST~Rate","dest":"https://download.csdn.net/download/weixin_42149153/15559668"}'  data-report-query='spm=1001.2101.3001.6650.13&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7ERate-13-15559668-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7ERate-13-15559668-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
					<div class="left ellipsis-online ellipsis-online-1"><em>JavaScript</em>入门</div>
				</a>
			</div>
			<div class="info-box display-flex">
				<div class="info display-flex">
					<span class="info-block">03-04</span>
				</div>
			</div>
		</div>
		<div class="desc-box">
			<a href="https://download.csdn.net/download/weixin_42149153/15559668" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.13","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~Rate-13-15559668-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"13","strategy":"2~default~CTRLIST~Rate","dest":"https://download.csdn.net/download/weixin_42149153/15559668"}'  data-report-query='spm=1001.2101.3001.6650.13&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7ERate-13-15559668-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7ERate-13-15559668-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
				<div class="desc ellipsis-online ellipsis-online-1"><em>JavaScript</em>入门</div>
			</a>
		</div>
	</div>
</div>
<div class="recommend-item-box type_download clearfix" data-url="https://download.csdn.net/download/weixin_42119281/15232932"  data-report-view='{"ab":"new","spm":"1001.2101.3001.6650.14","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~Rate-14-15232932-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"14","strategy":"2~default~CTRLIST~Rate","dest":"https://download.csdn.net/download/weixin_42119281/15232932"}'>
	<div class="content-box">
		<div class="content-blog display-flex">
			<div class="title-box">
				<a href="https://download.csdn.net/download/weixin_42119281/15232932" class="tit" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.14","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~Rate-14-15232932-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"14","strategy":"2~default~CTRLIST~Rate","dest":"https://download.csdn.net/download/weixin_42119281/15232932"}'  data-report-query='spm=1001.2101.3001.6650.14&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7ERate-14-15232932-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7ERate-14-15232932-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
					<div class="left ellipsis-online ellipsis-online-1"><em>Javascript</em>项目</div>
				</a>
			</div>
			<div class="info-box display-flex">
				<div class="info display-flex">
					<span class="info-block">02-13</span>
				</div>
			</div>
		</div>
		<div class="desc-box">
			<a href="https://download.csdn.net/download/weixin_42119281/15232932" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.14","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~CTRLIST~Rate-14-15232932-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"14","strategy":"2~default~CTRLIST~Rate","dest":"https://download.csdn.net/download/weixin_42119281/15232932"}'  data-report-query='spm=1001.2101.3001.6650.14&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7ERate-14-15232932-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7ECTRLIST%7ERate-14-15232932-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
				<div class="desc ellipsis-online ellipsis-online-1"><em>Javascript</em>项目</div>
			</a>
		</div>
	</div>
</div>
<div class="recommend-item-box type_download clearfix" data-url="https://download.csdn.net/download/m0_62709532/87455926"  data-report-view='{"ab":"new","spm":"1001.2101.3001.6650.15","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~OPENSEARCH~Rate-15-87455926-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"15","strategy":"2~default~OPENSEARCH~Rate","dest":"https://download.csdn.net/download/m0_62709532/87455926"}'>
	<div class="content-box">
		<div class="content-blog display-flex">
			<div class="title-box">
				<a href="https://download.csdn.net/download/m0_62709532/87455926" class="tit" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.15","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~OPENSEARCH~Rate-15-87455926-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"15","strategy":"2~default~OPENSEARCH~Rate","dest":"https://download.csdn.net/download/m0_62709532/87455926"}'  data-report-query='spm=1001.2101.3001.6650.15&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7EOPENSEARCH%7ERate-15-87455926-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7EOPENSEARCH%7ERate-15-87455926-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
					<div class="left ellipsis-online ellipsis-online-1"><em>学习</em>jQuery这<em>一篇</em><em>就够</em>了</div>
				</a>
			</div>
			<div class="info-box display-flex">
				<div class="info display-flex">
					<span class="info-block">02-17</span>
				</div>
			</div>
		</div>
		<div class="desc-box">
			<a href="https://download.csdn.net/download/m0_62709532/87455926" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.15","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~OPENSEARCH~Rate-15-87455926-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"15","strategy":"2~default~OPENSEARCH~Rate","dest":"https://download.csdn.net/download/m0_62709532/87455926"}'  data-report-query='spm=1001.2101.3001.6650.15&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7EOPENSEARCH%7ERate-15-87455926-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7EOPENSEARCH%7ERate-15-87455926-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
				<div class="desc ellipsis-online ellipsis-online-1"> jQuery是一个快速的，简洁的<em>javaScript</em>库，使用户能更方便地处理<em>HTML</em> documents、events、实现动画效果，并且方便地为网站提供AJAX交互。  jQuery能够使用户的<em>html</em>页保持代码和<em>html</em>内容分离，也就是说，不用再在...</div>
			</a>
		</div>
	</div>
</div>
<div class="recommend-item-box type_download clearfix" data-url="https://download.csdn.net/download/weixin_38518518/13629030"  data-report-view='{"ab":"new","spm":"1001.2101.3001.6650.16","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~OPENSEARCH~Rate-16-13629030-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"16","strategy":"2~default~OPENSEARCH~Rate","dest":"https://download.csdn.net/download/weixin_38518518/13629030"}'>
	<div class="content-box">
		<div class="content-blog display-flex">
			<div class="title-box">
				<a href="https://download.csdn.net/download/weixin_38518518/13629030" class="tit" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.16","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~OPENSEARCH~Rate-16-13629030-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"16","strategy":"2~default~OPENSEARCH~Rate","dest":"https://download.csdn.net/download/weixin_38518518/13629030"}'  data-report-query='spm=1001.2101.3001.6650.16&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7EOPENSEARCH%7ERate-16-13629030-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7EOPENSEARCH%7ERate-16-13629030-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
					<div class="left ellipsis-online ellipsis-online-1">Ajax添加数据与删除篇实现代码</div>
				</a>
			</div>
			<div class="info-box display-flex">
				<div class="info display-flex">
					<span class="info-block">12-11</span>
				</div>
			</div>
		</div>
		<div class="desc-box">
			<a href="https://download.csdn.net/download/weixin_38518518/13629030" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.16","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~OPENSEARCH~Rate-16-13629030-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"16","strategy":"2~default~OPENSEARCH~Rate","dest":"https://download.csdn.net/download/weixin_38518518/13629030"}'  data-report-query='spm=1001.2101.3001.6650.16&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7EOPENSEARCH%7ERate-16-13629030-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7EOPENSEARCH%7ERate-16-13629030-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
				<div class="desc ellipsis-online ellipsis-online-1"><em>学习</em>完这篇教程以后．你会明白想要实现够炫够酷的的ajax效果．你必须要熟练掌握<em>JavaScript</em> Dom 这些技术精通． 刚刚我喝多了，上面的这段话是我在两天前就写好的．我本来想直接睡觉的．但我想试试．是不是在我喝酒...</div>
			</a>
		</div>
	</div>
</div>
<div class="recommend-item-box type_download clearfix" data-url="https://download.csdn.net/download/weixin_42099633/18450647"  data-report-view='{"ab":"new","spm":"1001.2101.3001.6650.17","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~OPENSEARCH~Rate-17-18450647-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"17","strategy":"2~default~OPENSEARCH~Rate","dest":"https://download.csdn.net/download/weixin_42099633/18450647"}'>
	<div class="content-box">
		<div class="content-blog display-flex">
			<div class="title-box">
				<a href="https://download.csdn.net/download/weixin_42099633/18450647" class="tit" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.17","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~OPENSEARCH~Rate-17-18450647-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"17","strategy":"2~default~OPENSEARCH~Rate","dest":"https://download.csdn.net/download/weixin_42099633/18450647"}'  data-report-query='spm=1001.2101.3001.6650.17&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7EOPENSEARCH%7ERate-17-18450647-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7EOPENSEARCH%7ERate-17-18450647-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
					<div class="left ellipsis-online ellipsis-online-1">LifeService:案例后端</div>
				</a>
			</div>
			<div class="info-box display-flex">
				<div class="info display-flex">
					<span class="info-block">05-07</span>
				</div>
			</div>
		</div>
		<div class="desc-box">
			<a href="https://download.csdn.net/download/weixin_42099633/18450647" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.17","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~OPENSEARCH~Rate-17-18450647-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"17","strategy":"2~default~OPENSEARCH~Rate","dest":"https://download.csdn.net/download/weixin_42099633/18450647"}'  data-report-query='spm=1001.2101.3001.6650.17&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7EOPENSEARCH%7ERate-17-18450647-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7EOPENSEARCH%7ERate-17-18450647-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
				<div class="desc ellipsis-online ellipsis-online-1">Tars案例--大学生活服务平台 本案例是一个简单的大学生活服务平台小程序应用，包含了简单的用户登录、社团活动管理和表白墙的功能。...问题不大，看这<em>一篇</em><em>就够</em>了-- 已经使用过Tars？那么可以来尝试</div>
			</a>
		</div>
	</div>
</div>
<div class="recommend-item-box type_download clearfix" data-url="https://download.csdn.net/download/wx2007/273369"  data-report-view='{"ab":"new","spm":"1001.2101.3001.6650.18","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~OPENSEARCH~Rate-18-273369-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"18","strategy":"2~default~OPENSEARCH~Rate","dest":"https://download.csdn.net/download/wx2007/273369"}'>
	<div class="content-box">
		<div class="content-blog display-flex">
			<div class="title-box">
				<a href="https://download.csdn.net/download/wx2007/273369" class="tit" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.18","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~OPENSEARCH~Rate-18-273369-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"18","strategy":"2~default~OPENSEARCH~Rate","dest":"https://download.csdn.net/download/wx2007/273369"}'  data-report-query='spm=1001.2101.3001.6650.18&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7EOPENSEARCH%7ERate-18-273369-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7EOPENSEARCH%7ERate-18-273369-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
					<div class="left ellipsis-online ellipsis-online-1">《Wicket开发指南一书》PDF版本下载</div>
				</a>
			</div>
			<div class="info-box display-flex">
				<div class="info display-flex">
					<span class="info-block">10-30</span>
				</div>
			</div>
		</div>
		<div class="desc-box">
			<a href="https://download.csdn.net/download/wx2007/273369" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.18","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-download-2~default~OPENSEARCH~Rate-18-273369-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"18","strategy":"2~default~OPENSEARCH~Rate","dest":"https://download.csdn.net/download/wx2007/273369"}'  data-report-query='spm=1001.2101.3001.6650.18&utm_medium=distribute.pc_relevant.none-task-download-2%7Edefault%7EOPENSEARCH%7ERate-18-273369-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-download-2%7Edefault%7EOPENSEARCH%7ERate-18-273369-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
				<div class="desc ellipsis-online ellipsis-online-1">单是一个<em>JavaScript</em>，恐怕<em>就够</em>头痛了。 
Wicket带有强烈C/S结构的UI色彩，这一点有助于美工和程序人员的分工，与Delphi的开发方式非常类似（Delphi使用.frm文件保存UI控件的定义，而用.pas文件存储代码，从而对...</div>
			</a>
		</div>
	</div>
</div>
<div class="recommend-item-box type_chatgpt clearfix" data-url="https://wenku.csdn.net/answer/717aa2b0e83911edbcb5fa163eeb3507"  data-report-view='{"ab":"new","spm":"1001.2101.3001.6650.19","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-chatgpt-2~default~OPENSEARCH~Position-19-717aa2b0e83911edbcb5fa163eeb3507-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"19","strategy":"2~default~OPENSEARCH~Position","dest":"https://wenku.csdn.net/answer/717aa2b0e83911edbcb5fa163eeb3507"}'>
	<div class="content-box">
		<div class="content-blog display-flex">
			<div class="title-box">
				<a href="https://wenku.csdn.net/answer/717aa2b0e83911edbcb5fa163eeb3507" class="tit" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.19","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-chatgpt-2~default~OPENSEARCH~Position-19-717aa2b0e83911edbcb5fa163eeb3507-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"19","strategy":"2~default~OPENSEARCH~Position","dest":"https://wenku.csdn.net/answer/717aa2b0e83911edbcb5fa163eeb3507"}'  data-report-query='spm=1001.2101.3001.6650.19&utm_medium=distribute.pc_relevant.none-task-chatgpt-2%7Edefault%7EOPENSEARCH%7EPosition-19-717aa2b0e83911edbcb5fa163eeb3507-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-chatgpt-2%7Edefault%7EOPENSEARCH%7EPosition-19-717aa2b0e83911edbcb5fa163eeb3507-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
					<div class="left ellipsis-online ellipsis-online-1"><em>学习</em><em>javascript</em>这<em>一篇</em><em>就够</em>了</div>
					<div class="tag">最新发布</div>
				</a>
			</div>
			<div class="info-box display-flex">
				<div class="info display-flex">
					<span class="info-block">05-02</span>
				</div>
			</div>
		</div>
		<div class="desc-box">
			<a href="https://wenku.csdn.net/answer/717aa2b0e83911edbcb5fa163eeb3507" target="_blank"  data-report-click='{"ab":"new","spm":"1001.2101.3001.6650.19","mod":"popu_387","extra":"{\"highlightScore\":0.0,\"utm_medium\":\"distribute.pc_relevant.none-task-chatgpt-2~default~OPENSEARCH~Position-19-717aa2b0e83911edbcb5fa163eeb3507-blog-109257751.235^v38^pc_relevant_anti_t3_base\",\"dist_request_id\":\"1686871376234_95673\"}","dist_request_id":"1686871376234_95673","ab_strategy":"increase_t0_anti_vip","index":"19","strategy":"2~default~OPENSEARCH~Position","dest":"https://wenku.csdn.net/answer/717aa2b0e83911edbcb5fa163eeb3507"}'  data-report-query='spm=1001.2101.3001.6650.19&utm_medium=distribute.pc_relevant.none-task-chatgpt-2%7Edefault%7EOPENSEARCH%7EPosition-19-717aa2b0e83911edbcb5fa163eeb3507-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base&depth_1-utm_source=distribute.pc_relevant.none-task-chatgpt-2%7Edefault%7EOPENSEARCH%7EPosition-19-717aa2b0e83911edbcb5fa163eeb3507-blog-109257751.235%5Ev38%5Epc_relevant_anti_t3_base'>
				<div class="desc ellipsis-online ellipsis-online-1"><em>学习</em><em>JavaScript</em>是非常重要的，因为它是一种广泛使用的编程语言，在Web开发领域中占有重要地位。通过<em>学习</em><em>JavaScript</em>，您可以创建各种交互式网页、动态图表和用户界面等。同时，<em>JavaScript</em>也可以用于服务器端编程，例如使用Node.js。 在<em>学习</em><em>JavaScript</em>时，首先需要了解基础语法和概念，例如变量、函数和流程控制等。然后，您可以<em>学习</em>如何操作网页上的元素，例如文本框、按钮和图像等，以及如何处理用户输入和交互。此外，还有各种工具和框架可用于加快开发速度，例如React、Angular和Vue等。最后，了解如何优化<em>JavaScript</em>代码以获得更好的性能和用户体验也是非常重要的。 总之，<em>学习</em><em>JavaScript</em>是一个必要的步骤，无论是从事Web开发还是其他领域的编程工作，都需要这种语言的知识。这篇文章可以提供一些基本概念和知识，但要成为一名优秀的<em>JavaScript</em>开发人员，需要持续<em>学习</em>和改进。</div>
			</a>
		</div>
	</div>
</div>
              </div>
<div id="recommendNps" class="recommend-nps-box common-nps-box">
  <h3 class="aside-title">“相关推荐”对你有帮助么？</h3>
  <div class="aside-content">
      <ul class="newnps-list">
          <li class="newnps-item" data-type="非常没帮助">
              <div class="newnps-img-box">
                  <img class="newnps-img active" src="https://csdnimg.cn/release/blogv2/dist/pc/img/npsFeel1.png" alt="">
                  <img class="newnps-img default" src="https://csdnimg.cn/release/blogv2/dist/pc/img/npsFeelGrey1.png" alt="">
              </div>
              <div class="newnps-text">非常没帮助</div>
          </li>
          <li class="newnps-item" data-type="没帮助">
              <div class="newnps-img-box">
                  <img class="newnps-img active" src="https://csdnimg.cn/release/blogv2/dist/pc/img/npsFeel2.png" alt="">
                  <img class="newnps-img default" src="https://csdnimg.cn/release/blogv2/dist/pc/img/npsFeelGrey2.png" alt="">
              </div>
              <div class="newnps-text">没帮助</div>
          </li>
          <li class="newnps-item" data-type="一般">
              <div class="newnps-img-box">
                  <img class="newnps-img active" src="https://csdnimg.cn/release/blogv2/dist/pc/img/npsFeel3.png" alt="">
                  <img class="newnps-img default" src="https://csdnimg.cn/release/blogv2/dist/pc/img/npsFeelGrey3.png" alt="">
              </div>
              <div class="newnps-text">一般</div>
          </li>
          <li class="newnps-item" data-type="有帮助">
              <div class="newnps-img-box">
                  <img class="newnps-img active" src="https://csdnimg.cn/release/blogv2/dist/pc/img/npsFeel4.png" alt="">
                  <img class="newnps-img default" src="https://csdnimg.cn/release/blogv2/dist/pc/img/npsFeelGrey4.png" alt="">
              </div>
              <div class="newnps-text">有帮助</div>
          </li>
          <li class="newnps-item" data-type="非常有帮助">
              <div class="newnps-img-box">
                  <img class="newnps-img active" src="https://csdnimg.cn/release/blogv2/dist/pc/img/npsFeel5.png" alt="">
                  <img class="newnps-img default" src="https://csdnimg.cn/release/blogv2/dist/pc/img/npsFeelGrey5.png" alt="">
              </div>
              <div class="newnps-text">非常有帮助</div>
          </li>
      </ul>
      <div class="newnps-form-box">
      <div class="newnps-form">
          <input type="text" placeholder="请输入建议或反馈后点击提交" class="newnps-input">
          <span class="newnps-btn">提交</span>
      </div>
      </div>
  </div>
</div><div class="blog-footer-bottom" style="margin-top:10px;"></div>
<script src="https://g.csdnimg.cn/common/csdn-footer/csdn-footer.js" data-isfootertrack="false" type="text/javascript"></script>
<script type="text/javascript">
    window.csdn.csdnFooter.options = {
        el: '.blog-footer-bottom',
        type: 2
    }
</script>          </main>
<aside class="blog_container_aside">
<div id="asideProfile" class="aside-box">
    <div class="profile-intro d-flex">
        <div class="avatar-box d-flex justify-content-center flex-column">
            <a href="https://caochenlei.blog.csdn.net" target="_blank" data-report-click='{"mod":"popu_379","spm":"1001.2101.3001.4121","dest":"https://caochenlei.blog.csdn.net","ab":"new"}'>
                <img src="https://profile-avatar.csdnimg.cn/adae5c191130470aa9c45b27974eb51a_qq_38490457.jpg!1" class="avatar_pic">
            </a>
        </div>
        <div class="user-info d-flex flex-column profile-intro-name-box">
            <div class="profile-intro-name-boxTop">
                <a href="https://caochenlei.blog.csdn.net" target="_blank" class="" id="uid" title="轻松的小希" data-report-click='{"mod":"popu_379","spm":"1001.2101.3001.4122","dest":"https://caochenlei.blog.csdn.net","ab":"new"}'>
                    <span class="name " username="qq_38490457">轻松的小希</span>
                </a>
                <span>
                </span>
                <span class="flag expert-blog">
                <img class="identity" src="https://csdnimg.cn/release/blogv2/dist/mobile/img/expertNew.png" alt="">
                <span class="bubble">CSDN认证博客专家</span>
                </span>
                <span class="flag company-blog">
                <span class="bubble">CSDN认证企业博客</span>
                </span>
            </div>
            <div class="profile-intro-name-boxFooter">
                <span class="personal-home-page personal-home-years" title="已加入 CSDN 6年">码龄6年</span>
                    <span class="personal-home-page">
                    <a class="personal-home-certification" href="https://i.csdn.net/#/uc/profile?utm_source=14998968" target="_blank" title="Java领域优质创作者">
                    <img src="https://img-home.csdnimg.cn/images/20210412060958.png" alt="">
                    Java领域优质创作者
                    </a>
                    </span>
            </div>
        </div>
    </div>
    <div class="data-info d-flex item-tiling">
        <dl class="text-center" title="160">
            <a href="https://caochenlei.blog.csdn.net" data-report-click='{"mod":"1598321000_001","spm":"1001.2101.3001.4310"}' data-report-query="t=1">  
                <dt><span class="count">160</span></dt>
                <dd class="font">原创</dd>
            </a>
        </dl>
        <dl class="text-center" data-report-click='{"mod":"1598321000_002","spm":"1001.2101.3001.4311"}' title="541">
            <a href="https://blog.csdn.net/rank/list/weekly" target="_blank">
                <dt><span class="count">541</span></dt>
                <dd class="font">周排名</dd>
            </a>
        </dl>
        <dl class="text-center" title="270168">
            <a href="https://blog.csdn.net/rank/list/total" data-report-click='{"mod":"1598321000_003","spm":"1001.2101.3001.4312"}' target="_blank">
                <dt><span class="count">27万+</span></dt>
                <dd class="font">总排名</dd>
            </a>
        </dl>
        <dl class="text-center" style="min-width:58px" title="20227703">  
            <dt><span class="count">2022万+</span></dt>
            <dd>访问</dd>
        </dl>
        <dl class="text-center" title="8级,点击查看等级说明">
            <dt><a href="https://blog.csdn.net/blogdevteam/article/details/103478461" target="_blank">
                <img class="level" src="https://csdnimg.cn/identity/blog8.png">
            </a>
            </dt>
            <dd>等级</dd>
        </dl>
    </div>
    <div class="item-rank"></div>
    <div class="data-info d-flex item-tiling">
        <dl class="text-center" title="43189">
            <dt><span class="count">4万+</span></dt>
            <dd>积分</dd>
        </dl>
         <dl class="text-center" id="fanBox" title="171299">
            <dt><span class="count" id="fan">17万+</span></dt>
            <dd>粉丝</dd>
        </dl>
        <dl class="text-center" title="25646">
            <dt><span class="count">2万+</span></dt>
            <dd>获赞</dd>
        </dl>
        <dl class="text-center" title="8557">
            <dt><span class="count">8557</span></dt>
            <dd>评论</dd>
        </dl>
        <dl class="text-center" title="122406">
            <dt><span class="count">12万+</span></dt>
            <dd>收藏</dd>
        </dl>
    </div>
    <div class="aside-box-footer" data-report-view='{"spm":"3001.4296"}'>
        <div class="badge-box d-flex">
            <div class="badge d-flex">
                <div class="icon-badge" title="1024达人勋章">
                    <div class="mouse-box">
                        <img class="medal-img" data-report-click='{"spm":"3001.4296"}' src="https://csdnimg.cn/medal/1024daren@240.png" alt="1024达人勋章">
                    </div>
                </div>
                <div class="icon-badge" title="签到新秀">
                    <div class="mouse-box">
                        <img class="medal-img" data-report-click='{"spm":"3001.4296"}' src="https://csdnimg.cn/medal/qiandao20@240.png" alt="签到新秀">
                    </div>
                </div>
                <div class="icon-badge" title="签到达人">
                    <div class="mouse-box">
                        <img class="medal-img" data-report-click='{"spm":"3001.4296"}' src="https://csdnimg.cn/medal/qiandao50@240.png" alt="签到达人">
                    </div>
                </div>
                <div class="icon-badge" title="签到王者">
                    <div class="mouse-box">
                        <img class="medal-img" data-report-click='{"spm":"3001.4296"}' src="https://csdnimg.cn/medal/qiandao100@240.png" alt="签到王者">
                    </div>
                </div>
                <div class="icon-badge" title="领英">
                    <div class="mouse-box">
                        <img class="medal-img" data-report-click='{"spm":"3001.4296"}' src="https://csdnimg.cn/medal/linkedin@240.png" alt="领英">
                    </div>
                </div>
                <div class="icon-badge" title="GitHub">
                    <div class="mouse-box">
                        <img class="medal-img" data-report-click='{"spm":"3001.4296"}' src="https://csdnimg.cn/medal/github@240.png" alt="GitHub">
                    </div>
                </div>
                <div class="icon-badge" title="脉脉勋章">
                    <div class="mouse-box">
                        <img class="medal-img" data-report-click='{"spm":"3001.4296"}' src="https://csdnimg.cn/medal/maimai@240.png" alt="脉脉勋章">
                    </div>
                </div>
                <div class="icon-badge" title="笔耕不辍">
                    <div class="mouse-box">
                        <img class="medal-img" data-report-click='{"spm":"3001.4296"}' src="https://csdnimg.cn/02d34b42a3ee476fb50850304ab67017.png" alt="笔耕不辍">
                    </div>
                </div>
                <div class="icon-badge" title="技术圈认证">
                    <div class="mouse-box">
                        <img class="medal-img" data-report-click='{"spm":"3001.4296"}' src="https://csdnimg.cn/medal/blog_normal_medal@240.png" alt="技术圈认证">
                    </div>
                </div>
                <div class="icon-badge" title="阅读者勋章">
                    <div class="mouse-box">
                        <img class="medal-img" data-report-click='{"spm":"3001.4296"}' src="https://csdnimg.cn/medal/yuedu7@240.png" alt="阅读者勋章">
                    </div>
                </div>
                <div class="icon-badge" title="知无不言">
                    <div class="mouse-box">
                        <img class="medal-img" data-report-click='{"spm":"3001.4296"}' src="https://csdnimg.cn/f19b84c244aa4e6d8bf469b4aff1f98c.png" alt="知无不言">
                    </div>
                </div>
                <div class="icon-badge" title="分享学徒">
                    <div class="mouse-box">
                        <img class="medal-img" data-report-click='{"spm":"3001.4296"}' src="https://csdnimg.cn/medal/fenxiangxuetu@240.png" alt="分享学徒">
                    </div>
                </div>
                <div class="icon-badge" title="分享小兵">
                    <div class="mouse-box">
                        <img class="medal-img" data-report-click='{"spm":"3001.4296"}' src="https://csdnimg.cn/medal/fengxiangxiaobing@240.png" alt="分享小兵">
                    </div>
                </div>
                <div class="icon-badge" title="持续创作">
                    <div class="mouse-box">
                        <img class="medal-img" data-report-click='{"spm":"3001.4296"}' src="https://csdnimg.cn/medal/chizhiyiheng@240.png" alt="持续创作">
                    </div>
                </div>
                <div class="icon-badge" title="1024勋章">
                    <div class="mouse-box">
                        <img class="medal-img" data-report-click='{"spm":"3001.4296"}' src="https://csdnimg.cn/medal/1024@240.png" alt="1024勋章">
                    </div>
                </div>
                <div class="icon-badge" title="1024超级勋章">
                    <div class="mouse-box">
                        <img class="medal-img" data-report-click='{"spm":"3001.4296"}' src="https://csdnimg.cn/medal/chaoji1024@240.png" alt="1024超级勋章">
                    </div>
                </div>
                <div class="icon-badge" title="创作能手">
                    <div class="mouse-box">
                        <img class="medal-img" data-report-click='{"spm":"3001.4296"}' src="https://csdnimg.cn/medal/qixiebiaobing4@240.png" alt="创作能手">
                    </div>
                </div>
                <div class="icon-badge" title="新人勋章">
                    <div class="mouse-box">
                        <img class="medal-img" data-report-click='{"spm":"3001.4296"}' src="https://csdnimg.cn/medal/blinknewcomer@240.png" alt="新人勋章">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="profile-intro-name-boxOpration">
        <div class="opt-letter-watch-box">
        <a class="bt-button personal-letter" href="https://im.csdn.net/chat/qq_38490457" target="_blank" rel="noopener">私信</a>
        </div>
        <div class="opt-letter-watch-box"> 
            <a class="attented personal-watch bt-button" id="btnAttent">已关注</a>
        </div>
    </div>
</div>
 <div id="asideSearchArticle" class="aside-box">
	<div class="aside-content search-comter">
    <div class="aside-search aside-search-blog">         
        <input type="text" class="input-serch-blog" name="" autocomplete="off" value="" id="search-blog-words" placeholder="搜博主文章">
        <a class="btn-search-blog" data-report-click='{"spm":"1001.2101.3001.9182"}'>
                    <img src="//csdnimg.cn/cdn/content-toolbar/csdn-sou.png?v=1587021042">
        </a>
    </div>
    </div>
</div>


<div id="asideHotArticle" class="aside-box">
	<h3 class="aside-title">热门文章</h3>
	<div class="aside-content">
		<ul class="hotArticle-list">
			<li>
				<a href="https://caochenlei.blog.csdn.net/article/details/109257751" target="_blank"  data-report-click='{"mod":"popu_541","spm":"1001.2101.3001.4139","dest":"https://caochenlei.blog.csdn.net/article/details/109257751","ab":"new"}'>
				学习JavaScript这一篇就够了
					<img src="https://csdnimg.cn/release/blogv2/dist/pc/img/readCountWhite.png" alt="">
					<span class="read">572537</span>
                </a>
			</li>
			<li>
				<a href="https://caochenlei.blog.csdn.net/article/details/107640904" target="_blank"  data-report-click='{"mod":"popu_541","spm":"1001.2101.3001.4139","dest":"https://caochenlei.blog.csdn.net/article/details/107640904","ab":"new"}'>
				学习MySQL这一篇就够了
					<img src="https://csdnimg.cn/release/blogv2/dist/pc/img/readCountWhite.png" alt="">
					<span class="read">200866</span>
                </a>
			</li>
			<li>
				<a href="https://caochenlei.blog.csdn.net/article/details/107976731" target="_blank"  data-report-click='{"mod":"popu_541","spm":"1001.2101.3001.4139","dest":"https://caochenlei.blog.csdn.net/article/details/107976731","ab":"new"}'>
				学习Oracle这一篇就够了
					<img src="https://csdnimg.cn/release/blogv2/dist/pc/img/readCountWhite.png" alt="">
					<span class="read">137194</span>
                </a>
			</li>
			<li>
				<a href="https://caochenlei.blog.csdn.net/article/details/108809902" target="_blank"  data-report-click='{"mod":"popu_541","spm":"1001.2101.3001.4139","dest":"https://caochenlei.blog.csdn.net/article/details/108809902","ab":"new"}'>
				学习MyBatis-Plus3这一篇就够了
					<img src="https://csdnimg.cn/release/blogv2/dist/pc/img/readCountWhite.png" alt="">
					<span class="read">78296</span>
                </a>
			</li>
			<li>
				<a href="https://caochenlei.blog.csdn.net/article/details/108440922" target="_blank"  data-report-click='{"mod":"popu_541","spm":"1001.2101.3001.4139","dest":"https://caochenlei.blog.csdn.net/article/details/108440922","ab":"new"}'>
				学习Tomcat这一篇就够了
					<img src="https://csdnimg.cn/release/blogv2/dist/pc/img/readCountWhite.png" alt="">
					<span class="read">75305</span>
                </a>
			</li>
		</ul>
	</div>
</div>
<div id="asideCategory" class="aside-box flexible-box">
    <h3 class="aside-title">分类专栏</h3>
    <div class="aside-content">
        <ul>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10801758.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10801758.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20210207133459462.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        学习分享
                    </span>
                </a>
                <span class="special-column-num">3篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_11747806.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_11747806.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20201014180756918.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        技术分享
                    </span>
                </a>
                <span class="special-column-num">7篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_11322315.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_11322315.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20201014180756780.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        博文目录
                    </span>
                </a>
                <span class="special-column-num">2篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_11264670.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_11264670.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20210830112833200.jpg?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        运维技术
                    </span>
                </a>
                <span class="special-column-num">1篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_11225284.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_11225284.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20210830112623119.jpg?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        开源项目
                    </span>
                </a>
                <span class="special-column-num">5篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_11178372.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_11178372.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20210830112508956.jpg?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        微信开发
                    </span>
                </a>
                <span class="special-column-num">1篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_11162460.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_11162460.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20210626171106448.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        网络编程
                    </span>
                </a>
                <span class="special-column-num">1篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_11113890.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_11113890.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20210626171059894.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        并发编程
                    </span>
                </a>
                <span class="special-column-num">1篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10837977.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10837977.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20210626171050784.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        设计模式
                    </span>
                </a>
                <span class="special-column-num">25篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_11097593.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_11097593.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20210529091504646.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        力扣刷题
                    </span>
                </a>
                <span class="special-column-num">9篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10837976.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10837976.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20210626171044413.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        图解算法
                    </span>
                </a>
                <span class="special-column-num">4篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10837975.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10837975.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20210626171037127.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        数据结构
                    </span>
                </a>
                <span class="special-column-num">9篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10801826.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10801826.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20210207134304310.jpg?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        Spring Cloud Alibaba
                    </span>
                </a>
                <span class="special-column-num">4篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10780842.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10780842.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20210129151752118.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        Spring Cloud
                    </span>
                </a>
                <span class="special-column-num">11篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10741126.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10741126.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20210115194709666.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        Spring Security
                    </span>
                </a>
                <span class="special-column-num">4篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10741115.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10741115.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20210115152124814.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        Spring Boot 2
                    </span>
                </a>
                <span class="special-column-num">21篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10685037.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10685037.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20201223163738236.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        Spring5
                    </span>
                </a>
                <span class="special-column-num">3篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10656954.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10656954.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20201213112235516.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        Project
                    </span>
                </a>
                <span class="special-column-num">2篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10381131.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10381131.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20201115093614215.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        JavaWeb
                    </span>
                </a>
                <span class="special-column-num">1篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10401704.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10401704.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20201115093906928.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        Web
                    </span>
                </a>
                <span class="special-column-num">9篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10343485.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10343485.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20201115093414551.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        Server
                    </span>
                </a>
                <span class="special-column-num">3篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10396553.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10396553.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20201115094021849.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        ORM
                    </span>
                </a>
                <span class="special-column-num">5篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10243064.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10243064.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20201115093244429.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        Database
                    </span>
                </a>
                <span class="special-column-num">6篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10301824.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10301824.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20201115093234465.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        Linux
                    </span>
                </a>
                <span class="special-column-num">1篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10189005.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10189005.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20201115093227314.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        JavaSE
                    </span>
                </a>
                <span class="special-column-num">18篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10309041.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10309041.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20201115094140652.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        C
                    </span>
                </a>
                <span class="special-column-num">2篇</span>
            </li>
            <li>
                <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10396439.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10396439.html","ab":"new"}'>
                    <div class="special-column-bar "></div>
                    <img src="https://img-blog.csdnimg.cn/20201115093856381.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                    <span class="title oneline">
                        Assembly
                    </span>
                </a>
                <span class="special-column-num">2篇</span>
            </li>
        </ul>
    </div>
    <p class="text-center">
        <a class="flexible-btn" data-fbox="aside-archive"><img class="look-more" src="https://csdnimg.cn/release/blogv2/dist/pc/img/arrowDownWhite.png" alt=""></a>
    </p>
</div>
<div id="asideNewComments" class="aside-box">
    <h3 class="aside-title">最新评论</h3>
    <div class="aside-content">
        <ul class="newcomment-list">
            <li>
                <a class="title text-truncate" target="_blank" href="https://caochenlei.blog.csdn.net/article/details/109257751#comments_27026570" data-report-click='{"mod":"popu_542","spm":"1001.2101.3001.4231","dest":"https://caochenlei.blog.csdn.net/article/details/109257751#comments_27026570","ab":"new"}' data-report-view='{"mod":"popu_542","spm":"1001.2101.3001.4231","dest":"https://caochenlei.blog.csdn.net/article/details/109257751#comments_27026570","ab":"new"}'>学习JavaScript这一篇就够了</a>
                <p class="comment ellipsis">
                    <a href="https://blog.csdn.net/2201_75876277" class="user-name" target="_blank">欸日好: </a>
                    <span class="code-comments">内容多，但很干货，看的我想打赏给博主100元(从生活费中扣)，我很喜欢</span>
                </p>
            </li>
            <li>
                <a class="title text-truncate" target="_blank" href="https://caochenlei.blog.csdn.net/article/details/108190767#comments_26998474" data-report-click='{"mod":"popu_542","spm":"1001.2101.3001.4231","dest":"https://caochenlei.blog.csdn.net/article/details/108190767#comments_26998474","ab":"new"}' data-report-view='{"mod":"popu_542","spm":"1001.2101.3001.4231","dest":"https://caochenlei.blog.csdn.net/article/details/108190767#comments_26998474","ab":"new"}'>学习MongoDB4这一篇就够了</a>
                <p class="comment ellipsis">
                    <a href="https://blog.csdn.net/m0_37581033" class="user-name" target="_blank">Introvert0701: </a>
                    <span class="code-comments">终于找到一篇讲清楚的了</span>
                </p>
            </li>
            <li>
                <a class="title text-truncate" target="_blank" href="https://caochenlei.blog.csdn.net/article/details/125250135#comments_26955943" data-report-click='{"mod":"popu_542","spm":"1001.2101.3001.4231","dest":"https://caochenlei.blog.csdn.net/article/details/125250135#comments_26955943","ab":"new"}' data-report-view='{"mod":"popu_542","spm":"1001.2101.3001.4231","dest":"https://caochenlei.blog.csdn.net/article/details/125250135#comments_26955943","ab":"new"}'>Discord机器人开发</a>
                <p class="comment ellipsis">
                    <a href="https://caochenlei.blog.csdn.net" class="user-name" target="_blank">轻松的小希: </a>
                    <span class="code-comments">输入那个机器人的命令就行</span>
                </p>
            </li>
            <li>
                <a class="title text-truncate" target="_blank" href="https://caochenlei.blog.csdn.net/article/details/109257751#comments_26949936" data-report-click='{"mod":"popu_542","spm":"1001.2101.3001.4231","dest":"https://caochenlei.blog.csdn.net/article/details/109257751#comments_26949936","ab":"new"}' data-report-view='{"mod":"popu_542","spm":"1001.2101.3001.4231","dest":"https://caochenlei.blog.csdn.net/article/details/109257751#comments_26949936","ab":"new"}'>学习JavaScript这一篇就够了</a>
                <p class="comment ellipsis">
                    <a href="https://blog.csdn.net/2302_76756387" class="user-name" target="_blank">村村: </a>
                    <span class="code-comments">声明我觉得还是用let好</span>
                </p>
            </li>
            <li>
                <a class="title text-truncate" target="_blank" href="https://caochenlei.blog.csdn.net/article/details/125250135#comments_26946464" data-report-click='{"mod":"popu_542","spm":"1001.2101.3001.4231","dest":"https://caochenlei.blog.csdn.net/article/details/125250135#comments_26946464","ab":"new"}' data-report-view='{"mod":"popu_542","spm":"1001.2101.3001.4231","dest":"https://caochenlei.blog.csdn.net/article/details/125250135#comments_26946464","ab":"new"}'>Discord机器人开发</a>
                <p class="comment ellipsis">
                    <a href="https://blog.csdn.net/a543871204" class="user-name" target="_blank">徐少-: </a>
                    <span class="code-comments">大佬，怎么给同个频道其他机器人发送斜杠命令</span>
                </p>
            </li>
        </ul>
    </div>
</div>
<div id="asideNewNps" class="aside-box common-nps-box">
    <h3 class="aside-title">您愿意向朋友推荐“博客详情页”吗？</h3>
    <div class="aside-content">
        <ul class="newnps-list">
            <li class="newnps-item" data-type="强烈不推荐">
                <div class="newnps-img-box">
                    <img class="newnps-img active" src="https://csdnimg.cn/release/blogv2/dist/pc/img/npsFeel1.png" alt="">
                    <img class="newnps-img default" src="https://csdnimg.cn/release/blogv2/dist/pc/img/npsFeelGrey1.png" alt="">
                </div>
                <div class="newnps-text">强烈不推荐</div>
            </li>
            <li class="newnps-item" data-type="不推荐">
                <div class="newnps-img-box">
                    <img class="newnps-img active" src="https://csdnimg.cn/release/blogv2/dist/pc/img/npsFeel2.png" alt="">
                    <img class="newnps-img default" src="https://csdnimg.cn/release/blogv2/dist/pc/img/npsFeelGrey2.png" alt="">
                </div>
                <div class="newnps-text">不推荐</div>
            </li>
            <li class="newnps-item" data-type="一般般">
                <div class="newnps-img-box">
                    <img class="newnps-img active" src="https://csdnimg.cn/release/blogv2/dist/pc/img/npsFeel3.png" alt="">
                    <img class="newnps-img default" src="https://csdnimg.cn/release/blogv2/dist/pc/img/npsFeelGrey3.png" alt="">
                </div>
                <div class="newnps-text">一般般</div>
            </li>
            <li class="newnps-item" data-type="推荐">
                <div class="newnps-img-box">
                    <img class="newnps-img active" src="https://csdnimg.cn/release/blogv2/dist/pc/img/npsFeel4.png" alt="">
                    <img class="newnps-img default" src="https://csdnimg.cn/release/blogv2/dist/pc/img/npsFeelGrey4.png" alt="">
                </div>
                <div class="newnps-text">推荐</div>
            </li>
            <li class="newnps-item" data-type="强烈推荐">
                <div class="newnps-img-box">
                    <img class="newnps-img active" src="https://csdnimg.cn/release/blogv2/dist/pc/img/npsFeel5.png" alt="">
                    <img class="newnps-img default" src="https://csdnimg.cn/release/blogv2/dist/pc/img/npsFeelGrey5.png" alt="">
                </div>
                <div class="newnps-text">强烈推荐</div>
            </li>
        </ul>
        <div class="newnps-form-box">
        <div class="newnps-form">
            <input type="text" placeholder="请输入建议或反馈后点击提交" class="newnps-input">
            <span class="newnps-btn">提交</span>
        </div>
        </div>
    </div>
</div>
<div id="asideArchive" class="aside-box" style="display:block!important; width:300px;">
    <h3 class="aside-title">最新文章</h3>
    <div class="aside-content">
        <ul class="inf_list clearfix">
            <li class="clearfix">
            <a href="https://caochenlei.blog.csdn.net/article/details/126356311" target="_blank" data-report-click='{"mod":"popu_382","spm":"1001.2101.3001.4136","dest":"https://caochenlei.blog.csdn.net/article/details/126356311","ab":"new"}' data-report-view='{"mod":"popu_382","dest":"https://caochenlei.blog.csdn.net/article/details/126356311","ab":"new"}'>如何设计缓存中间层</a>
            </li>
            <li class="clearfix">
            <a href="https://caochenlei.blog.csdn.net/article/details/125837106" target="_blank" data-report-click='{"mod":"popu_382","spm":"1001.2101.3001.4136","dest":"https://caochenlei.blog.csdn.net/article/details/125837106","ab":"new"}' data-report-view='{"mod":"popu_382","dest":"https://caochenlei.blog.csdn.net/article/details/125837106","ab":"new"}'>如何设计事件管理器</a>
            </li>
            <li class="clearfix">
            <a href="https://caochenlei.blog.csdn.net/article/details/125250135" target="_blank" data-report-click='{"mod":"popu_382","spm":"1001.2101.3001.4136","dest":"https://caochenlei.blog.csdn.net/article/details/125250135","ab":"new"}' data-report-view='{"mod":"popu_382","dest":"https://caochenlei.blog.csdn.net/article/details/125250135","ab":"new"}'>Discord机器人开发</a>
            </li>
        </ul>
        <div class="archive-bar"></div>
        <div class="archive-box">
                <div class="archive-list-item"><a href="https://caochenlei.blog.csdn.net?type=blog&amp;year=2022&amp;month=08" target="_blank" data-report-click='{"mod":"popu_538","spm":"1001.2101.3001.4138","ab":"new","dest":"https://caochenlei.blog.csdn.net?type=blog&amp;year=2022&amp;month=08"}'><span class="year">2022年</span><span class="num">9篇</span></a></div>
                <div class="archive-list-item"><a href="https://caochenlei.blog.csdn.net?type=blog&amp;year=2021&amp;month=10" target="_blank" data-report-click='{"mod":"popu_538","spm":"1001.2101.3001.4138","ab":"new","dest":"https://caochenlei.blog.csdn.net?type=blog&amp;year=2021&amp;month=10"}'><span class="year">2021年</span><span class="num">100篇</span></a></div>
                <div class="archive-list-item"><a href="https://caochenlei.blog.csdn.net?type=blog&amp;year=2020&amp;month=12" target="_blank" data-report-click='{"mod":"popu_538","spm":"1001.2101.3001.4138","ab":"new","dest":"https://caochenlei.blog.csdn.net?type=blog&amp;year=2020&amp;month=12"}'><span class="year">2020年</span><span class="num">51篇</span></a></div>
        </div>
    </div>
</div>
    <!-- 详情页显示目录 -->
<!--文章目录-->
<div id="asidedirectory" class="aside-box">
    <div class='groupfile' id="directory">
        <h3 class="aside-title">目录</h3>
        <div class="align-items-stretch group_item">
            <div class="pos-box">
            <div class="scroll-box">
                <div class="toc-box"></div>
            </div>
            </div>
        </div>
    </div>
</div>
</aside>
<script>
	$("a.flexible-btn").click(function(){
		$(this).parents('div.aside-box').removeClass('flexible-box');
		$(this).parents("p.text-center").remove();
	})
</script>
<script type="text/javascript"  src="https://g.csdnimg.cn/user-tooltip/2.7/user-tooltip.js"></script>
<script type="text/javascript"  src="https://g.csdnimg.cn/user-medal/2.0.0/user-medal.js"></script>        </div>
<div class="recommend-right align-items-stretch clearfix" id="rightAside" data-type="recommend">
    <aside class="recommend-right_aside">
        <div id="recommend-right" >
                        <div class='flex-column aside-box groupfile' id="groupfile">
                <div class="groupfile-div">
                <h3 class="aside-title">目录</h3>
                <div class="align-items-stretch group_item">
                    <div class="pos-box">
                        <div class="scroll-box">
                            <div class="toc-box"></div>
                        </div>
                    </div>
                </div>
                </div>
            </div>
            <div class='aside-box kind_person d-flex flex-column'>
                    <h3 class="aside-title">分类专栏</h3>
                    <div class="align-items-stretch kindof_item" id="kind_person_column">
                        <div class="aside-content">
                            <ul>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10801758.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10801758.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20210207133459462.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            学习分享
                                        </span>
                                    </a>
                                    <span class="special-column-num">3篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_11747806.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_11747806.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20201014180756918.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            技术分享
                                        </span>
                                    </a>
                                    <span class="special-column-num">7篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_11322315.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_11322315.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20201014180756780.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            博文目录
                                        </span>
                                    </a>
                                    <span class="special-column-num">2篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_11264670.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_11264670.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20210830112833200.jpg?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            运维技术
                                        </span>
                                    </a>
                                    <span class="special-column-num">1篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_11225284.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_11225284.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20210830112623119.jpg?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            开源项目
                                        </span>
                                    </a>
                                    <span class="special-column-num">5篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_11178372.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_11178372.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20210830112508956.jpg?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            微信开发
                                        </span>
                                    </a>
                                    <span class="special-column-num">1篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_11162460.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_11162460.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20210626171106448.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            网络编程
                                        </span>
                                    </a>
                                    <span class="special-column-num">1篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_11113890.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_11113890.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20210626171059894.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            并发编程
                                        </span>
                                    </a>
                                    <span class="special-column-num">1篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10837977.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10837977.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20210626171050784.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            设计模式
                                        </span>
                                    </a>
                                    <span class="special-column-num">25篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_11097593.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_11097593.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20210529091504646.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            力扣刷题
                                        </span>
                                    </a>
                                    <span class="special-column-num">9篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10837976.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10837976.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20210626171044413.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            图解算法
                                        </span>
                                    </a>
                                    <span class="special-column-num">4篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10837975.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10837975.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20210626171037127.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            数据结构
                                        </span>
                                    </a>
                                    <span class="special-column-num">9篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10801826.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10801826.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20210207134304310.jpg?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            Spring Cloud Alibaba
                                        </span>
                                    </a>
                                    <span class="special-column-num">4篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10780842.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10780842.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20210129151752118.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            Spring Cloud
                                        </span>
                                    </a>
                                    <span class="special-column-num">11篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10741126.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10741126.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20210115194709666.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            Spring Security
                                        </span>
                                    </a>
                                    <span class="special-column-num">4篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10741115.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10741115.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20210115152124814.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            Spring Boot 2
                                        </span>
                                    </a>
                                    <span class="special-column-num">21篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10685037.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10685037.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20201223163738236.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            Spring5
                                        </span>
                                    </a>
                                    <span class="special-column-num">3篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10656954.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10656954.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20201213112235516.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            Project
                                        </span>
                                    </a>
                                    <span class="special-column-num">2篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10381131.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10381131.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20201115093614215.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            JavaWeb
                                        </span>
                                    </a>
                                    <span class="special-column-num">1篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10401704.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10401704.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20201115093906928.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            Web
                                        </span>
                                    </a>
                                    <span class="special-column-num">9篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10343485.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10343485.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20201115093414551.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            Server
                                        </span>
                                    </a>
                                    <span class="special-column-num">3篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10396553.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10396553.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20201115094021849.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            ORM
                                        </span>
                                    </a>
                                    <span class="special-column-num">5篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10243064.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10243064.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20201115093244429.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            Database
                                        </span>
                                    </a>
                                    <span class="special-column-num">6篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10301824.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10301824.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20201115093234465.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            Linux
                                        </span>
                                    </a>
                                    <span class="special-column-num">1篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10189005.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10189005.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20201115093227314.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            JavaSE
                                        </span>
                                    </a>
                                    <span class="special-column-num">18篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10309041.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10309041.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20201115094140652.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            C
                                        </span>
                                    </a>
                                    <span class="special-column-num">2篇</span>
                                </li>
                                <li>
                                    <a class="clearfix special-column-name" target="_blank" href="https://blog.csdn.net/qq_38490457/category_10396439.html" data-report-click='{"mod":"popu_537","spm":"1001.2101.3001.4137","strategy":"pc付费专栏左侧入口","dest":"https://blog.csdn.net/qq_38490457/category_10396439.html","ab":"new"}'>
                                        <div class="special-column-bar "></div>
                                        <img src="https://img-blog.csdnimg.cn/20201115093856381.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="" onerror="this.src='https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64'">
                                        <span class="">
                                            Assembly
                                        </span>
                                    </a>
                                    <span class="special-column-num">2篇</span>
                                </li>
                            </ul>
                        </div>
                    </div>
            </div>
        </div>
    </aside>
</div>

<div class="recommend-right1  align-items-stretch clearfix" id="rightAsideConcision" data-type="recommend">
    <aside class="recommend-right_aside">
        <div id="recommend-right-concision" >
            <div class='flex-column aside-box groupfile' id="groupfileConcision">
                <div class="groupfile-div1">
                <h3 class="aside-title">目录</h3>
                <div class="align-items-stretch group_item">
                    <div class="pos-box">
                        <div class="scroll-box">
                            <div class="toc-box"></div>
                        </div>
                    </div>
                </div>
                </div>
            </div>
        </div>
    </aside>
</div>

      </div>
      <div class="mask-dark"></div>
      <div class="skin-boxshadow"></div>
      <div class="directory-boxshadow"></div>
<div class="comment-side-box-shadow comment-side-tit-close" id="commentSideBoxshadow">
<div class="comment-side-content">
	<div class="comment-side-tit">
		<div class="comment-side-tit-count">评论&nbsp;<span class="count">983</span></div>
	<img class="comment-side-tit-close" src="https://csdnimg.cn/release/blogv2/dist/pc/img/closeBt.png"></div>
	<div id="pcCommentSideBox" class="comment-box comment-box-new2 " style="display:block">
		<div class="comment-edit-box d-flex">
			<div class="user-img">
				<a href="https://blog.csdn.net/m0_62961153" target="_blank">
					<img src="https://profile-avatar.csdnimg.cn/default.jpg!1">
				</a>
			</div>
			<form id="commentform">
				<textarea class="comment-content" name="comment_content" id="comment_content" placeholder="欢迎高质量的评论，低质的评论会被折叠" maxlength="1000"></textarea>
				<div class="comment-reward-box" style="background-image: url('https://img-home.csdnimg.cn/images/20230131025301.png');">
          <a class="btn-remove-reward"></a>
          <div class="form-reward-box">
            <div class="info">
              成就一亿技术人!
            </div>
            <div class="price-info">
              拼手气红包<span class="price">6.0元</span>
            </div>
          </div>
        </div>
        <div class="comment-operate-box">
					<div class="comment-operate-l">
						<span id="tip_comment" class="tip">还能输入<em>1000</em>个字符</span>
					</div>
					<div class="comment-operate-c">
						&nbsp;
					</div>
					<div class="comment-operate-r">
            <div class="comment-operate-item comment-reward">
							<img class="comment-operate-img" data-url="https://csdnimg.cn/release/blogv2/dist/pc/img/" src="https://csdnimg.cn/release/blogv2/dist/pc/img/commentReward.png" alt="红包">
							<span class="comment-operate-tip">添加红包</span>
						</div>
						<div class="comment-operate-item comment-emoticon">
							<img class="comment-operate-img" data-url="https://csdnimg.cn/release/blogv2/dist/pc/img/" src="https://csdnimg.cn/release/blogv2/dist/pc/img/commentEmotionIcon.png" alt="表情包">
							<span class="comment-operate-tip">插入表情</span>
							<div class="comment-emoticon-box comment-operate-isshow">
								<div class="comment-emoticon-img-box"></div>
							</div>
						</div>
						<div class="comment-operate-item comment-code">
							<img class="comment-operate-img" data-url="https://csdnimg.cn/release/blogv2/dist/pc/img/" src="https://csdnimg.cn/release/blogv2/dist/pc/img/commentCodeIcon.png" alt="表情包">
							<span class="comment-operate-tip">代码片</span>
							<div class="comment-code-box comment-operate-isshow">
								<ul id="commentCode">
									<li><a data-code="html">HTML/XML</a></li>
									<li><a data-code="objc">objective-c</a></li>
									<li><a data-code="ruby">Ruby</a></li>
									<li><a data-code="php">PHP</a></li>
									<li><a data-code="csharp">C</a></li>
									<li><a data-code="cpp">C++</a></li>
									<li><a data-code="javascript">JavaScript</a></li>
									<li><a data-code="python">Python</a></li>
									<li><a data-code="java">Java</a></li>
									<li><a data-code="css">CSS</a></li>
									<li><a data-code="sql">SQL</a></li>
									<li><a data-code="plain">其它</a></li>
								</ul>
							</div>
						</div>
						<div class="comment-operate-item">
							<input type="hidden" id="comment_replyId" name="comment_replyId">
							<input type="hidden" id="article_id" name="article_id" value="109257751">
							<input type="hidden" id="comment_userId" name="comment_userId" value="">
							<input type="hidden" id="commentId" name="commentId" value="">
							<a data-report-click='{"mod":"1582594662_003","spm":"1001.2101.3001.4227","ab":"new"}'>
							<input type="submit" class="btn-comment btn-comment-input" value="评论">
							</a>
						</div>
					</div>
				</div>
			</form>
		</div>
		<div class="comment-list-container">
			<div class="comment-list-box comment-operate-item">
			</div>
			<div id="lookGoodComment" class="look-good-comment side-look-comment">
				<a class="look-more-comment">查看更多评论<img src="https://csdnimg.cn/release/blogv2/dist/pc/img/commentArrowDownWhite.png" alt=""></a>
			</div>
			<div id="lookFlodComment" class="look-flod-comment">
					<span class="count"></span>&nbsp;条评论被折叠&nbsp;<a class="look-more-flodcomment">查看</a>
			</div>
			<div class="opt-box text-center">
				<div class="btn btn-sm btn-link-blue" id="btnMoreComment"></div>
			</div>
		</div>
	</div>
	<div id="pcFlodCommentSideBox" class="pc-flodcomment-sidebox">
		<div class="comment-fold-tit"><span id="lookUnFlodComment" class="back"><img src="https://csdnimg.cn/release/blogv2/dist/pc/img/commentArrowLeftWhite.png" alt=""></span>被折叠的&nbsp;<span class="count"></span>&nbsp;条评论
		 <a href="https://blogdev.blog.csdn.net/article/details/122245662" class="tip" target="_blank">为什么被折叠?</a>
		 <a href="https://bbs.csdn.net/forums/FreeZone" class="park" target="_blank">
		 <img src="https://csdnimg.cn/release/blogv2/dist/pc/img/iconPark.png">到【灌水乐园】发言</a>                                
		</div>
		<div class="comment-fold-content"></div>
		<div id="lookBadComment" class="look-bad-comment side-look-comment">
			<a class="look-more-comment">查看更多评论<img src="https://csdnimg.cn/release/blogv2/dist/pc/img/commentArrowDownWhite.png" alt=""></a>
		</div>
	</div>
</div>
<div class="comment-rewarddialog-box">
  <div class="form-box">
    <div class="title-box">
      添加红包
      <a class="btn-form-close"></a>
    </div>
    <form id="commentRewardForm">
      <div class="ipt-box">
        <label for="txtName">祝福语</label>
        <div class="ipt-btn-box">
          <input type="text" name="name" id="txtName" autocomplete="off" maxlength="50">
          <a class="btn-ipt btn-random"></a>
        </div>
        <p class="notice">请填写红包祝福语或标题</p>
      </div>
      <div class="ipt-box">
        <label for="txtSendAmount">红包数量</label>
        <div class="ipt-txt-box">
          <input type="text" name="sendAmount" maxlength="4" id="txtSendAmount" placeholder="请填写红包数量(最小10个)" autocomplete="off">
          <span class="after-txt">个</span>
        </div>
        <p class="notice">红包个数最小为10个</p>
      </div>
      <div class="ipt-box">
        <label for="txtMoney">红包总金额</label>
        <div class="ipt-txt-box error">
          <input type="text" name="money" maxlength="5" id="txtMoney" placeholder="请填写总金额(最低5元)" autocomplete="off">
          <span class="after-txt">元</span>
        </div>
        <p class="notice">红包金额最低5元</p>
      </div>
      <div class="balance-info-box">
        <label>余额支付</label>
        <div class="balance-info">
          当前余额<span class="balance">3.43</span>元
          <a href="https://i.csdn.net/#/wallet/balance/recharge" class="link-charge" target="_blank">前往充值 ></a>
        </div>
      </div>
      <div class="opt-box">
        <div class="pay-info">
          需支付：<span class="price">10.00</span>元
        </div>
        <button type="button" class="ml-auto btn-cancel">取消</button>
        <button type="button" class="ml8 btn-submit" disabled="true">确定</button>
      </div>
    </form>
  </div>
</div>
<div class="rr-guide-box">
  <div class="rr-first-box">
    <img src="https://csdnimg.cn/release/blogv2/dist/pc/img/guideRedReward02.png" alt="">
    <button class="btn-guide-known next">下一步</button>
  </div>
  <div class="rr-second-box">
    <img src="https://csdnimg.cn/release/blogv2/dist/pc/img/guideRedReward03.png" alt="">
    <button class="btn-guide-known known">知道了</button>
  </div>
</div>
</div>

<div class="redEnvolope" id="redEnvolope">
  <div class="env-box">
    <div class="env-container">
      <div class="pre-open" id="preOpen">
        <div class="top">
          <header>
            <img class="clearTpaErr" :src="redpacketAuthor.avatar" alt="" />
            <div class="author">成就一亿技术人!</div>
          </header>
          <div class="bot-icon"></div>
        </div>
        <footer>
          <div class="red-openbtn open-start"></div>
          <div class="tip">
            领取后你会自动成为博主和红包主的粉丝
            <a class="rule" target="_blank">规则</a>
          </div>
        </footer>
      </div>
      <div class="opened" id="opened">
        <div class="bot-icon">
          <header>
            <a class="creatorUrl" href="" target="_blank">
              <img class="clearTpaErr" src="https://profile.csdnimg.cn/4/E/8/1_hope_wisdom" alt="" />
            </a>
            <div class="author">
              <div class="tt">hope_wisdom</div> 发出的红包
            </div>
          </header>
        </div>
        <div class="receive-box">
          <header></header>
          <div class="receive-list">
          </div>
        </div>
      </div>
    </div>
    <div class="close-btn"></div>
  </div>
</div>
<div id="rewardNew" class="reward-popupbox-new">
	<p class="rewad-title">打赏作者<span class="reward-close"><img src="https://csdnimg.cn/release/blogv2/dist/pc/img/closeBt.png"></span></p>
	<dl class="profile-box">
		<dd>
		<a href="https://caochenlei.blog.csdn.net" data-report-click='{"mod":"popu_379","dest":"https://caochenlei.blog.csdn.net","ab":"new"}'>
			<img src="https://profile-avatar.csdnimg.cn/adae5c191130470aa9c45b27974eb51a_qq_38490457.jpg!1" class="avatar_pic">
		</a>
		</dd>
		<dt>
			<p class="blog-name">轻松的小希</p>
			<p class="blog-discript">你的鼓励将是我创作的最大动力</p>
		</dt>
	</dl>
	<div class="reward-box-new">
			<div class="reward-content"><div class="reward-right"></div></div>
	</div>
	<div class="money-box">
				<span class="choose-money choosed" data-id="2">¥2</span>
				<span class="choose-money " data-id="4">¥4</span>
				<span class="choose-money " data-id="6">¥6</span>
				<span class="choose-money " data-id="10">¥10</span>
				<span class="choose-money " data-id="20">¥20</span>
				<input id="customizeMoney" class="customize-money" name="" type="" value="" placeholder="自定义"/>
				<div class="customize-tip">输入1-500的整数</div>
	</div>
	<div class="pay-box">
		<div class="pay-type-blance pay-type active" data-type="blance">
			<img class="unchoose" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newUnChoose.png" alt="">
			<img class="choose"src="https://csdnimg.cn/release/blogv2/dist/pc/img/newChoose.png" alt="">
			<span class="pay-type-name">余额支付</span>
			<span class="pay-type-num">(余额：-- )</span>
		</div>
		<div class="pay-type-money pay-type" data-type="money">
			<img class="unchoose" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newUnChoose.png" alt="">
			<img class="choose"src="https://csdnimg.cn/release/blogv2/dist/pc/img/newChoose.png" alt="">
			<span class="pay-type-name">扫码支付</span>
		</div>
	</div>
	<div class="sure-box">
		<div class="sure-box-money">
			<div class="code-box">
				<div class="code-num-box">
					<span class="code-name">扫码支付：</span><span class="code-num">¥2</span>
				</div>
				<div class="code-img-box">
					<div class="renovate">
					<img src="https://csdnimg.cn/release/blogv2/dist/pc/img/pay-time-out.png">
					<span>获取中</span>
					</div>
				</div>
				<div class="code-pay-box">
					<img src="https://csdnimg.cn/release/blogv2/dist/pc/img/newWeiXin.png" alt="">
					<img src="https://csdnimg.cn/release/blogv2/dist/pc/img/newZhiFuBao.png" alt="">
					<span>扫码支付</span>
				</div>
			</div>
		</div>
		<div class="sure-box-blance">
			<p class="tip">您的余额不足，请更换扫码支付或<a target="_blank" data-report-click='{"mod":"1597646289_003","spm":"1001.2101.3001.4302"}' href="https://i.csdn.net/#/wallet/balance/recharge?utm_source=RewardVip" class="go-invest">充值</a></p>
			<p class="is-have-money"><a class="reward-sure">打赏作者</a></p>
		</div>
	</div>
</div>
      <div class="pay-code">
      <div class="pay-money">实付<span class="pay-money-span" data-nowprice='' data-oldprice=''>元</span></div>
      <div class="content-blance"><a class="blance-bt" href="javascript:;">使用余额支付</a></div>
      <div class="content-code">
        <div id="payCode" data-id="">
          <div class="renovate">
            <img src="https://csdnimg.cn/release/blogv2/dist/pc/img/pay-time-out.png">
            <span>点击重新获取</span>
          </div>
        </div>
        <div class="pay-style"><span><img src="https://csdnimg.cn/release/blogv2/dist/pc/img/weixin.png"></span><span><img src="https://csdnimg.cn/release/blogv2/dist/pc/img/zhifubao.png"></span><span><img src="https://csdnimg.cn/release/blogv2/dist/pc/img/jingdong.png"></span><span class="text">扫码支付</span></div>
      </div>
      <div class="bt-close">
        <svg t="1567152543821" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="10924" xmlns:xlink="http://www.w3.org/1999/xlink" width="12" height="12">
          <defs>
            <style type="text/css"></style>
          </defs>
          <path d="M512 438.378667L806.506667 143.893333a52.032 52.032 0 1 1 73.6 73.621334L585.621333 512l294.485334 294.485333a52.074667 52.074667 0 0 1-73.6 73.642667L512 585.621333 217.514667 880.128a52.053333 52.053333 0 1 1-73.621334-73.642667L438.378667 512 143.893333 217.514667a52.053333 52.053333 0 1 1 73.621334-73.621334L512 438.378667z" fill="" p-id="10925"></path>
        </svg>
      </div>
      <div class="pay-balance">
        <input type="radio" class="pay-code-radio" data-type="details">
        <span class="span">钱包余额</span>
          <span class="balance" style="color:#FC5531;font-size:14px;">0</span>
          <div class="pay-code-tile">
            <img src="https://csdnimg.cn/release/blogv2/dist/pc/img/pay-help.png" alt="">
            <div class="pay-code-content">
              <div class="span">
                <p class="title">抵扣说明：</p>
                <p> 1.余额是钱包充值的虚拟货币，按照1:1的比例进行支付金额的抵扣。<br> 2.余额无法直接购买下载，可以购买VIP、C币套餐、付费专栏及课程。</p>
              </div>
            </div>
          </div>
      </div>
      <a class="pay-balance-con" href="https://i.csdn.net/#/wallet/balance/recharge" target="_blank"><img src="https://csdnimg.cn/release/blogv2/dist/pc/img/recharge.png" alt=""><span>余额充值</span></a>
    </div>
    <div style="display:none;">
      <img src="" onerror='setTimeout(function(){if(!/(csdn.net|iteye.com|baiducontent.com|googleusercontent.com|360webcache.com|sogoucdn.com|bingj.com|baidu.com)$/.test(window.location.hostname)){window.location.href="\x68\x74\x74\x70\x73\x3a\x2f\x2f\x77\x77\x77\x2e\x63\x73\x64\x6e\x2e\x6e\x65\x74"}},3000);'>
    </div>
      <div class="keyword-dec-box" id="keywordDecBox"></div>
  </body>
  <script src="https://csdnimg.cn/release/blogv2/dist/components/js/axios-83fa28cedf.min.js" type="text/javascript"></script>
  <script src="https://csdnimg.cn/release/blogv2/dist/components/js/pc_wap_highlight-8defd55d6e.min.js" type="text/javascript"></script>
  <script src="https://csdnimg.cn/release/blogv2/dist/components/js/pc_wap_common-be82269d23.min.js" type="text/javascript"></script>
  <script src="https://csdnimg.cn/release/blogv2/dist/components/js/edit_copy_code-2d3931414f.min.js" type="text/javascript"></script>
  <link rel="stylesheet" href="https://csdnimg.cn/release/blog_editor_html/release1.6.12/ckeditor/plugins/codesnippet/lib/highlight/styles/atom-one-dark.css">
  <script src="https://g.csdnimg.cn/user-accusation/1.0.5/user-accusation.js" type="text/javascript"></script>
  <script>
    // 全局声明
    if (window.csdn === undefined) {
      window.csdn = {};
    }
    window.csdn.sideToolbar = {
      options: {
        report: {
          isShow: true,
        },
        qr: {
          isShow: false,
        },
        guide: {
          isShow: true
        }
      }
    }
    $(function() {
      $(document).on('click', "a.option-box[data-type='report']", function() {
        window.csdn.loginBox.key({
          biz: 'blog',
          subBiz: 'other_service',
          cb: function() {
            window.csdn.feedback({
              "type": 'blog',
              "rtype": 'article',
              "rid": articleId,
              "reportedName": username,
              "submitOptions": {
                "title": articleTitle,
                "contentUrl": articleDetailUrl
              },
              "callback": function() {
                showToast({
                  text: "感谢您的举报，我们会尽快审核！",
                  bottom: '10%',
                  zindex: 9000,
                  speed: 500,
                  time: 1500
                })
              }
            })
          }
        })
      });
    })
  </script>
    <script src="https://g.csdnimg.cn/baidu-search/1.0.12/baidu-search.js" type="text/javascript"></script>
  <script src="https://csdnimg.cn/release/download/old_static/js/qrcode.js"></script>
  <script src="https://g.csdnimg.cn/lib/qrcode/1.0.0/qrcode.min.js"></script>
  <script src="https://g.csdnimg.cn/user-ordercart/3.0.1/user-ordercart.js" type="text/javascript"></script>
  <script src="https://g.csdnimg.cn/user-ordertip/5.0.1/user-ordertip.js" type="text/javascript"></script>
  <script src="https://g.csdnimg.cn/order-payment/4.0.1/order-payment.js" type="text/javascript"></script>
  <script src="https://csdnimg.cn/release/blogv2/dist/pc/js/common-346b634517.min.js" type="text/javascript"></script>
  <script src="https://csdnimg.cn/release/blogv2/dist/pc/js/detail-434942c04f.min.js" type="text/javascript"></script>
  <script src="https://csdnimg.cn/release/blogv2/dist/pc/js/column-3911b0dc26.min.js" type="text/javascript"></script>
  <script src="https://g.csdnimg.cn/side-toolbar/3.4/side-toolbar.js" type="text/javascript"></script>
  <script src="https://g.csdnimg.cn/copyright/1.0.4/copyright.js" type="text/javascript"></script>
  <script>
    $(".MathJax").remove();
    if ($('div.markdown_views pre.prettyprint code.hljs').length > 0) {
      $('div.markdown_views')[0].className = 'markdown_views';
    }
  </script>
  <script type="text/javascript" src="https://csdnimg.cn/release/blog_mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
  <script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      "HTML-CSS": {
        linebreaks: { automatic: true, width: "94%container" },
        imageFont: null
      },
      tex2jax: {
      preview: "none",
      ignoreClass:"title-article"
      },
      mml2jax: {
      preview: 'none'
      }
    });
  </script>
<script type="text/javascript" crossorigin src="https://g.csdnimg.cn/common/csdn-login-box/csdn-login-box.js"></script></html>